
kristina_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000760c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000081c  080077b0  080077b0  000177b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fcc  08007fcc  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  08007fcc  08007fcc  00017fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007fd4  08007fd4  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fd4  08007fd4  00017fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007fd8  08007fd8  00017fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08007fdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e8  200001d8  080081b4  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007c0  080081b4  000207c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   000099b0  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000239a  00000000  00000000  00029bfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a60  00000000  00000000  0002bf98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007b5  00000000  00000000  0002c9f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000183cb  00000000  00000000  0002d1ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010896  00000000  00000000  00045578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00088678  00000000  00000000  00055e0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003acc  00000000  00000000  000de488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000e1f54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007794 	.word	0x08007794

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	08007794 	.word	0x08007794

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b970 	b.w	8000f90 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	460d      	mov	r5, r1
 8000cd0:	4604      	mov	r4, r0
 8000cd2:	460f      	mov	r7, r1
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d14a      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4694      	mov	ip, r2
 8000cdc:	d965      	bls.n	8000daa <__udivmoddi4+0xe2>
 8000cde:	fab2 f382 	clz	r3, r2
 8000ce2:	b143      	cbz	r3, 8000cf6 <__udivmoddi4+0x2e>
 8000ce4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ce8:	f1c3 0220 	rsb	r2, r3, #32
 8000cec:	409f      	lsls	r7, r3
 8000cee:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf2:	4317      	orrs	r7, r2
 8000cf4:	409c      	lsls	r4, r3
 8000cf6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cfa:	fa1f f58c 	uxth.w	r5, ip
 8000cfe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d02:	0c22      	lsrs	r2, r4, #16
 8000d04:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d08:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d0c:	fb01 f005 	mul.w	r0, r1, r5
 8000d10:	4290      	cmp	r0, r2
 8000d12:	d90a      	bls.n	8000d2a <__udivmoddi4+0x62>
 8000d14:	eb1c 0202 	adds.w	r2, ip, r2
 8000d18:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d1c:	f080 811c 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d20:	4290      	cmp	r0, r2
 8000d22:	f240 8119 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d26:	3902      	subs	r1, #2
 8000d28:	4462      	add	r2, ip
 8000d2a:	1a12      	subs	r2, r2, r0
 8000d2c:	b2a4      	uxth	r4, r4
 8000d2e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d32:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d36:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d3a:	fb00 f505 	mul.w	r5, r0, r5
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	d90a      	bls.n	8000d58 <__udivmoddi4+0x90>
 8000d42:	eb1c 0404 	adds.w	r4, ip, r4
 8000d46:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d4a:	f080 8107 	bcs.w	8000f5c <__udivmoddi4+0x294>
 8000d4e:	42a5      	cmp	r5, r4
 8000d50:	f240 8104 	bls.w	8000f5c <__udivmoddi4+0x294>
 8000d54:	4464      	add	r4, ip
 8000d56:	3802      	subs	r0, #2
 8000d58:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d5c:	1b64      	subs	r4, r4, r5
 8000d5e:	2100      	movs	r1, #0
 8000d60:	b11e      	cbz	r6, 8000d6a <__udivmoddi4+0xa2>
 8000d62:	40dc      	lsrs	r4, r3
 8000d64:	2300      	movs	r3, #0
 8000d66:	e9c6 4300 	strd	r4, r3, [r6]
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0xbc>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80ed 	beq.w	8000f52 <__udivmoddi4+0x28a>
 8000d78:	2100      	movs	r1, #0
 8000d7a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d84:	fab3 f183 	clz	r1, r3
 8000d88:	2900      	cmp	r1, #0
 8000d8a:	d149      	bne.n	8000e20 <__udivmoddi4+0x158>
 8000d8c:	42ab      	cmp	r3, r5
 8000d8e:	d302      	bcc.n	8000d96 <__udivmoddi4+0xce>
 8000d90:	4282      	cmp	r2, r0
 8000d92:	f200 80f8 	bhi.w	8000f86 <__udivmoddi4+0x2be>
 8000d96:	1a84      	subs	r4, r0, r2
 8000d98:	eb65 0203 	sbc.w	r2, r5, r3
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	4617      	mov	r7, r2
 8000da0:	2e00      	cmp	r6, #0
 8000da2:	d0e2      	beq.n	8000d6a <__udivmoddi4+0xa2>
 8000da4:	e9c6 4700 	strd	r4, r7, [r6]
 8000da8:	e7df      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000daa:	b902      	cbnz	r2, 8000dae <__udivmoddi4+0xe6>
 8000dac:	deff      	udf	#255	; 0xff
 8000dae:	fab2 f382 	clz	r3, r2
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	f040 8090 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000db8:	1a8a      	subs	r2, r1, r2
 8000dba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dbe:	fa1f fe8c 	uxth.w	lr, ip
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dc8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dcc:	0c22      	lsrs	r2, r4, #16
 8000dce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dd2:	fb0e f005 	mul.w	r0, lr, r5
 8000dd6:	4290      	cmp	r0, r2
 8000dd8:	d908      	bls.n	8000dec <__udivmoddi4+0x124>
 8000dda:	eb1c 0202 	adds.w	r2, ip, r2
 8000dde:	f105 38ff 	add.w	r8, r5, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4290      	cmp	r0, r2
 8000de6:	f200 80cb 	bhi.w	8000f80 <__udivmoddi4+0x2b8>
 8000dea:	4645      	mov	r5, r8
 8000dec:	1a12      	subs	r2, r2, r0
 8000dee:	b2a4      	uxth	r4, r4
 8000df0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000df4:	fb07 2210 	mls	r2, r7, r0, r2
 8000df8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000e00:	45a6      	cmp	lr, r4
 8000e02:	d908      	bls.n	8000e16 <__udivmoddi4+0x14e>
 8000e04:	eb1c 0404 	adds.w	r4, ip, r4
 8000e08:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e0c:	d202      	bcs.n	8000e14 <__udivmoddi4+0x14c>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f200 80bb 	bhi.w	8000f8a <__udivmoddi4+0x2c2>
 8000e14:	4610      	mov	r0, r2
 8000e16:	eba4 040e 	sub.w	r4, r4, lr
 8000e1a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e1e:	e79f      	b.n	8000d60 <__udivmoddi4+0x98>
 8000e20:	f1c1 0720 	rsb	r7, r1, #32
 8000e24:	408b      	lsls	r3, r1
 8000e26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e2e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e32:	fa20 f307 	lsr.w	r3, r0, r7
 8000e36:	40fd      	lsrs	r5, r7
 8000e38:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e3c:	4323      	orrs	r3, r4
 8000e3e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	fb09 5518 	mls	r5, r9, r8, r5
 8000e4a:	0c1c      	lsrs	r4, r3, #16
 8000e4c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e50:	fb08 f50e 	mul.w	r5, r8, lr
 8000e54:	42a5      	cmp	r5, r4
 8000e56:	fa02 f201 	lsl.w	r2, r2, r1
 8000e5a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e68:	f080 8088 	bcs.w	8000f7c <__udivmoddi4+0x2b4>
 8000e6c:	42a5      	cmp	r5, r4
 8000e6e:	f240 8085 	bls.w	8000f7c <__udivmoddi4+0x2b4>
 8000e72:	f1a8 0802 	sub.w	r8, r8, #2
 8000e76:	4464      	add	r4, ip
 8000e78:	1b64      	subs	r4, r4, r5
 8000e7a:	b29d      	uxth	r5, r3
 8000e7c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e80:	fb09 4413 	mls	r4, r9, r3, r4
 8000e84:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e88:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e8c:	45a6      	cmp	lr, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e98:	d26c      	bcs.n	8000f74 <__udivmoddi4+0x2ac>
 8000e9a:	45a6      	cmp	lr, r4
 8000e9c:	d96a      	bls.n	8000f74 <__udivmoddi4+0x2ac>
 8000e9e:	3b02      	subs	r3, #2
 8000ea0:	4464      	add	r4, ip
 8000ea2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ea6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eaa:	eba4 040e 	sub.w	r4, r4, lr
 8000eae:	42ac      	cmp	r4, r5
 8000eb0:	46c8      	mov	r8, r9
 8000eb2:	46ae      	mov	lr, r5
 8000eb4:	d356      	bcc.n	8000f64 <__udivmoddi4+0x29c>
 8000eb6:	d053      	beq.n	8000f60 <__udivmoddi4+0x298>
 8000eb8:	b156      	cbz	r6, 8000ed0 <__udivmoddi4+0x208>
 8000eba:	ebb0 0208 	subs.w	r2, r0, r8
 8000ebe:	eb64 040e 	sbc.w	r4, r4, lr
 8000ec2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ec6:	40ca      	lsrs	r2, r1
 8000ec8:	40cc      	lsrs	r4, r1
 8000eca:	4317      	orrs	r7, r2
 8000ecc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed8:	f1c3 0120 	rsb	r1, r3, #32
 8000edc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ee0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ee4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ee8:	409d      	lsls	r5, r3
 8000eea:	432a      	orrs	r2, r5
 8000eec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef0:	fa1f fe8c 	uxth.w	lr, ip
 8000ef4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ef8:	fb07 1510 	mls	r5, r7, r0, r1
 8000efc:	0c11      	lsrs	r1, r2, #16
 8000efe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f02:	fb00 f50e 	mul.w	r5, r0, lr
 8000f06:	428d      	cmp	r5, r1
 8000f08:	fa04 f403 	lsl.w	r4, r4, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x258>
 8000f0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f12:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f16:	d22f      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f18:	428d      	cmp	r5, r1
 8000f1a:	d92d      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	4461      	add	r1, ip
 8000f20:	1b49      	subs	r1, r1, r5
 8000f22:	b292      	uxth	r2, r2
 8000f24:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f28:	fb07 1115 	mls	r1, r7, r5, r1
 8000f2c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f30:	fb05 f10e 	mul.w	r1, r5, lr
 8000f34:	4291      	cmp	r1, r2
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x282>
 8000f38:	eb1c 0202 	adds.w	r2, ip, r2
 8000f3c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f40:	d216      	bcs.n	8000f70 <__udivmoddi4+0x2a8>
 8000f42:	4291      	cmp	r1, r2
 8000f44:	d914      	bls.n	8000f70 <__udivmoddi4+0x2a8>
 8000f46:	3d02      	subs	r5, #2
 8000f48:	4462      	add	r2, ip
 8000f4a:	1a52      	subs	r2, r2, r1
 8000f4c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f50:	e738      	b.n	8000dc4 <__udivmoddi4+0xfc>
 8000f52:	4631      	mov	r1, r6
 8000f54:	4630      	mov	r0, r6
 8000f56:	e708      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000f58:	4639      	mov	r1, r7
 8000f5a:	e6e6      	b.n	8000d2a <__udivmoddi4+0x62>
 8000f5c:	4610      	mov	r0, r2
 8000f5e:	e6fb      	b.n	8000d58 <__udivmoddi4+0x90>
 8000f60:	4548      	cmp	r0, r9
 8000f62:	d2a9      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f64:	ebb9 0802 	subs.w	r8, r9, r2
 8000f68:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	e7a3      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f70:	4645      	mov	r5, r8
 8000f72:	e7ea      	b.n	8000f4a <__udivmoddi4+0x282>
 8000f74:	462b      	mov	r3, r5
 8000f76:	e794      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f78:	4640      	mov	r0, r8
 8000f7a:	e7d1      	b.n	8000f20 <__udivmoddi4+0x258>
 8000f7c:	46d0      	mov	r8, sl
 8000f7e:	e77b      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f80:	3d02      	subs	r5, #2
 8000f82:	4462      	add	r2, ip
 8000f84:	e732      	b.n	8000dec <__udivmoddi4+0x124>
 8000f86:	4608      	mov	r0, r1
 8000f88:	e70a      	b.n	8000da0 <__udivmoddi4+0xd8>
 8000f8a:	4464      	add	r4, ip
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	e742      	b.n	8000e16 <__udivmoddi4+0x14e>

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <ADC_Init>:
#include "ADC.h"

//Инициализация АЦП #1
void ADC_Init() {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
	SET_BIT(RCC->APB2ENR, RCC_APB2ENR_ADC1EN);
 8000f98:	4b34      	ldr	r3, [pc, #208]	; (800106c <ADC_Init+0xd8>)
 8000f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9c:	4a33      	ldr	r2, [pc, #204]	; (800106c <ADC_Init+0xd8>)
 8000f9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fa2:	6453      	str	r3, [r2, #68]	; 0x44
    //Установка делителя частоты на 6
    MODIFY_REG(ADC1_COMMON->CCR, ADC_CCR_ADCPRE_Msk, 2 << ADC_CCR_ADCPRE_Pos);
 8000fa4:	4b32      	ldr	r3, [pc, #200]	; (8001070 <ADC_Init+0xdc>)
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000fac:	4a30      	ldr	r2, [pc, #192]	; (8001070 <ADC_Init+0xdc>)
 8000fae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fb2:	6053      	str	r3, [r2, #4]
    //Разрешить АЦП
    MODIFY_REG(ADC1->CR2, ADC_CR2_ADON_Msk, 1 << ADC_CR2_ADON_Pos);
 8000fb4:	4b2f      	ldr	r3, [pc, #188]	; (8001074 <ADC_Init+0xe0>)
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	4a2e      	ldr	r2, [pc, #184]	; (8001074 <ADC_Init+0xe0>)
 8000fba:	f043 0301 	orr.w	r3, r3, #1
 8000fbe:	6093      	str	r3, [r2, #8]
    //Установка точности измерения = 12-bit (4096)
    MODIFY_REG(ADC1->CR1, ADC_CR1_RES_Msk, 0 << ADC_CR1_RES_Pos);
 8000fc0:	4b2c      	ldr	r3, [pc, #176]	; (8001074 <ADC_Init+0xe0>)
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	4a2b      	ldr	r2, [pc, #172]	; (8001074 <ADC_Init+0xe0>)
 8000fc6:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000fca:	6053      	str	r3, [r2, #4]
    //Установка времени выборки (на все ставим предмакс)
    //Используемые каналы: 0, 1, 2, 8
    MODIFY_REG(ADC1->SMPR2, ADC_SMPR2_SMP0_Msk, 6 << ADC_SMPR2_SMP0_Pos);
 8000fcc:	4b29      	ldr	r3, [pc, #164]	; (8001074 <ADC_Init+0xe0>)
 8000fce:	691b      	ldr	r3, [r3, #16]
 8000fd0:	f023 0307 	bic.w	r3, r3, #7
 8000fd4:	4a27      	ldr	r2, [pc, #156]	; (8001074 <ADC_Init+0xe0>)
 8000fd6:	f043 0306 	orr.w	r3, r3, #6
 8000fda:	6113      	str	r3, [r2, #16]
    MODIFY_REG(ADC1->SMPR2, ADC_SMPR2_SMP1_Msk, 6 << ADC_SMPR2_SMP1_Pos);
 8000fdc:	4b25      	ldr	r3, [pc, #148]	; (8001074 <ADC_Init+0xe0>)
 8000fde:	691b      	ldr	r3, [r3, #16]
 8000fe0:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8000fe4:	4a23      	ldr	r2, [pc, #140]	; (8001074 <ADC_Init+0xe0>)
 8000fe6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000fea:	6113      	str	r3, [r2, #16]
    MODIFY_REG(ADC1->SMPR2, ADC_SMPR2_SMP4_Msk, 6 << ADC_SMPR2_SMP4_Pos);
 8000fec:	4b21      	ldr	r3, [pc, #132]	; (8001074 <ADC_Init+0xe0>)
 8000fee:	691b      	ldr	r3, [r3, #16]
 8000ff0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000ff4:	4a1f      	ldr	r2, [pc, #124]	; (8001074 <ADC_Init+0xe0>)
 8000ff6:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8000ffa:	6113      	str	r3, [r2, #16]
    MODIFY_REG(ADC1->SMPR2, ADC_SMPR2_SMP8_Msk, 6 << ADC_SMPR2_SMP8_Pos);
 8000ffc:	4b1d      	ldr	r3, [pc, #116]	; (8001074 <ADC_Init+0xe0>)
 8000ffe:	691b      	ldr	r3, [r3, #16]
 8001000:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001004:	4a1b      	ldr	r2, [pc, #108]	; (8001074 <ADC_Init+0xe0>)
 8001006:	f043 63c0 	orr.w	r3, r3, #100663296	; 0x6000000
 800100a:	6113      	str	r3, [r2, #16]
    HAL_Delay(10);
 800100c:	200a      	movs	r0, #10
 800100e:	f002 f8a1 	bl	8003154 <HAL_Delay>
    //Установка количества опрашиваемых каналов = 4
    MODIFY_REG(ADC1->JSQR, ADC_JSQR_JL_Msk, 3 << ADC_JSQR_JL_Pos);
 8001012:	4b18      	ldr	r3, [pc, #96]	; (8001074 <ADC_Init+0xe0>)
 8001014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001016:	4a17      	ldr	r2, [pc, #92]	; (8001074 <ADC_Init+0xe0>)
 8001018:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800101c:	6393      	str	r3, [r2, #56]	; 0x38
    //Установка очереди опроса: 0, 1, 4, 8
    MODIFY_REG(ADC1->JSQR, ADC_JSQR_JSQ1_Msk, 0 << ADC_JSQR_JSQ1_Pos);
 800101e:	4b15      	ldr	r3, [pc, #84]	; (8001074 <ADC_Init+0xe0>)
 8001020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001022:	4a14      	ldr	r2, [pc, #80]	; (8001074 <ADC_Init+0xe0>)
 8001024:	f023 031f 	bic.w	r3, r3, #31
 8001028:	6393      	str	r3, [r2, #56]	; 0x38
    MODIFY_REG(ADC1->JSQR, ADC_JSQR_JSQ2_Msk, 1 << ADC_JSQR_JSQ2_Pos);
 800102a:	4b12      	ldr	r3, [pc, #72]	; (8001074 <ADC_Init+0xe0>)
 800102c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800102e:	f423 7378 	bic.w	r3, r3, #992	; 0x3e0
 8001032:	4a10      	ldr	r2, [pc, #64]	; (8001074 <ADC_Init+0xe0>)
 8001034:	f043 0320 	orr.w	r3, r3, #32
 8001038:	6393      	str	r3, [r2, #56]	; 0x38
    MODIFY_REG(ADC1->JSQR, ADC_JSQR_JSQ3_Msk, 4 << ADC_JSQR_JSQ3_Pos);
 800103a:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <ADC_Init+0xe0>)
 800103c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800103e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001042:	4a0c      	ldr	r2, [pc, #48]	; (8001074 <ADC_Init+0xe0>)
 8001044:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001048:	6393      	str	r3, [r2, #56]	; 0x38
    MODIFY_REG(ADC1->JSQR, ADC_JSQR_JSQ4_Msk, 8 << ADC_JSQR_JSQ4_Pos);
 800104a:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <ADC_Init+0xe0>)
 800104c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800104e:	f423 2378 	bic.w	r3, r3, #1015808	; 0xf8000
 8001052:	4a08      	ldr	r2, [pc, #32]	; (8001074 <ADC_Init+0xe0>)
 8001054:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001058:	6393      	str	r3, [r2, #56]	; 0x38
    //Включить режим SCAN. За один запуск опрашиваются все каналы!
    MODIFY_REG(ADC1->CR1, ADC_CR1_SCAN_Msk, 1 << ADC_CR1_SCAN_Pos);
 800105a:	4b06      	ldr	r3, [pc, #24]	; (8001074 <ADC_Init+0xe0>)
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	4a05      	ldr	r2, [pc, #20]	; (8001074 <ADC_Init+0xe0>)
 8001060:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001064:	6053      	str	r3, [r2, #4]
}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40023800 	.word	0x40023800
 8001070:	40012300 	.word	0x40012300
 8001074:	40012000 	.word	0x40012000

08001078 <BMP_ReadRegister>:
const uint8_t bmp_cal_reg_l[11] = {0xAB, 0xAD, 0xAF, 0xB1, 0xB3, 0xB5, 0xB7, 0xB9, 0xBB, 0xBD, 0xBF};
//Константы с временем ожидания измерения (ms)
const uint8_t bmp_pres_delay[4] = {5, 8, 14, 26};

//Чтение регистра register. Возвращает значение регистра
uint8_t BMP_ReadRegister(uint8_t regist) {
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	71fb      	strb	r3, [r7, #7]
    uint8_t data;
    I2C_Master_Send(BMP_ADDR, &regist, 1);
 8001082:	1dfb      	adds	r3, r7, #7
 8001084:	2201      	movs	r2, #1
 8001086:	4619      	mov	r1, r3
 8001088:	2077      	movs	r0, #119	; 0x77
 800108a:	f000 fcdb 	bl	8001a44 <I2C_Master_Send>
    I2C_Master_Read(BMP_ADDR, &data, 1);
 800108e:	f107 030f 	add.w	r3, r7, #15
 8001092:	2201      	movs	r2, #1
 8001094:	4619      	mov	r1, r3
 8001096:	2077      	movs	r0, #119	; 0x77
 8001098:	f000 fdae 	bl	8001bf8 <I2C_Master_Read>
    return data;
 800109c:	7bfb      	ldrb	r3, [r7, #15]
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <BMP_WriteRegister>:

//Запись значения data в регистер register
void BMP_WriteRegister(uint8_t regist, uint8_t data) {
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b084      	sub	sp, #16
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	4603      	mov	r3, r0
 80010ae:	460a      	mov	r2, r1
 80010b0:	71fb      	strb	r3, [r7, #7]
 80010b2:	4613      	mov	r3, r2
 80010b4:	71bb      	strb	r3, [r7, #6]
    uint8_t writeline[2] = {regist, data};
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	733b      	strb	r3, [r7, #12]
 80010ba:	79bb      	ldrb	r3, [r7, #6]
 80010bc:	737b      	strb	r3, [r7, #13]
    I2C_Master_Send(BMP_ADDR, writeline, 2);
 80010be:	f107 030c 	add.w	r3, r7, #12
 80010c2:	2202      	movs	r2, #2
 80010c4:	4619      	mov	r1, r3
 80010c6:	2077      	movs	r0, #119	; 0x77
 80010c8:	f000 fcbc 	bl	8001a44 <I2C_Master_Send>
}
 80010cc:	bf00      	nop
 80010ce:	3710      	adds	r7, #16
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <BMP_ReadCalibration>:
void BMP_SetOccurancy(uint8_t occur) {
    bmp_occ = occur;
}

//Считать калибровки сенсора. Записывает в структуру
void BMP_ReadCalibration() {
 80010d4:	b598      	push	{r3, r4, r7, lr}
 80010d6:	af00      	add	r7, sp, #0
    bmp_cal.AC1 = (BMP_ReadRegister(bmp_cal_reg_m[0]) << 8) | BMP_ReadRegister(bmp_cal_reg_l[0]);
 80010d8:	23aa      	movs	r3, #170	; 0xaa
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff ffcc 	bl	8001078 <BMP_ReadRegister>
 80010e0:	4603      	mov	r3, r0
 80010e2:	021b      	lsls	r3, r3, #8
 80010e4:	b21c      	sxth	r4, r3
 80010e6:	23ab      	movs	r3, #171	; 0xab
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff ffc5 	bl	8001078 <BMP_ReadRegister>
 80010ee:	4603      	mov	r3, r0
 80010f0:	b21b      	sxth	r3, r3
 80010f2:	4323      	orrs	r3, r4
 80010f4:	b21a      	sxth	r2, r3
 80010f6:	4b58      	ldr	r3, [pc, #352]	; (8001258 <BMP_ReadCalibration+0x184>)
 80010f8:	801a      	strh	r2, [r3, #0]
    bmp_cal.AC2 = (BMP_ReadRegister(bmp_cal_reg_m[1]) << 8) | BMP_ReadRegister(bmp_cal_reg_l[1]);
 80010fa:	23ac      	movs	r3, #172	; 0xac
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff ffbb 	bl	8001078 <BMP_ReadRegister>
 8001102:	4603      	mov	r3, r0
 8001104:	021b      	lsls	r3, r3, #8
 8001106:	b21c      	sxth	r4, r3
 8001108:	23ad      	movs	r3, #173	; 0xad
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff ffb4 	bl	8001078 <BMP_ReadRegister>
 8001110:	4603      	mov	r3, r0
 8001112:	b21b      	sxth	r3, r3
 8001114:	4323      	orrs	r3, r4
 8001116:	b21a      	sxth	r2, r3
 8001118:	4b4f      	ldr	r3, [pc, #316]	; (8001258 <BMP_ReadCalibration+0x184>)
 800111a:	805a      	strh	r2, [r3, #2]
    bmp_cal.AC3 = (BMP_ReadRegister(bmp_cal_reg_m[2]) << 8) | BMP_ReadRegister(bmp_cal_reg_l[2]);
 800111c:	23ae      	movs	r3, #174	; 0xae
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff ffaa 	bl	8001078 <BMP_ReadRegister>
 8001124:	4603      	mov	r3, r0
 8001126:	021b      	lsls	r3, r3, #8
 8001128:	b21c      	sxth	r4, r3
 800112a:	23af      	movs	r3, #175	; 0xaf
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff ffa3 	bl	8001078 <BMP_ReadRegister>
 8001132:	4603      	mov	r3, r0
 8001134:	b21b      	sxth	r3, r3
 8001136:	4323      	orrs	r3, r4
 8001138:	b21a      	sxth	r2, r3
 800113a:	4b47      	ldr	r3, [pc, #284]	; (8001258 <BMP_ReadCalibration+0x184>)
 800113c:	809a      	strh	r2, [r3, #4]
    bmp_cal.AC4 = (BMP_ReadRegister(bmp_cal_reg_m[3]) << 8) | BMP_ReadRegister(bmp_cal_reg_l[3]);
 800113e:	23b0      	movs	r3, #176	; 0xb0
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff ff99 	bl	8001078 <BMP_ReadRegister>
 8001146:	4603      	mov	r3, r0
 8001148:	021b      	lsls	r3, r3, #8
 800114a:	b21c      	sxth	r4, r3
 800114c:	23b1      	movs	r3, #177	; 0xb1
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff ff92 	bl	8001078 <BMP_ReadRegister>
 8001154:	4603      	mov	r3, r0
 8001156:	b21b      	sxth	r3, r3
 8001158:	4323      	orrs	r3, r4
 800115a:	b21b      	sxth	r3, r3
 800115c:	b29a      	uxth	r2, r3
 800115e:	4b3e      	ldr	r3, [pc, #248]	; (8001258 <BMP_ReadCalibration+0x184>)
 8001160:	80da      	strh	r2, [r3, #6]
    bmp_cal.AC5 = (BMP_ReadRegister(bmp_cal_reg_m[4]) << 8) | BMP_ReadRegister(bmp_cal_reg_l[4]);
 8001162:	23b2      	movs	r3, #178	; 0xb2
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff ff87 	bl	8001078 <BMP_ReadRegister>
 800116a:	4603      	mov	r3, r0
 800116c:	021b      	lsls	r3, r3, #8
 800116e:	b21c      	sxth	r4, r3
 8001170:	23b3      	movs	r3, #179	; 0xb3
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff ff80 	bl	8001078 <BMP_ReadRegister>
 8001178:	4603      	mov	r3, r0
 800117a:	b21b      	sxth	r3, r3
 800117c:	4323      	orrs	r3, r4
 800117e:	b21b      	sxth	r3, r3
 8001180:	b29a      	uxth	r2, r3
 8001182:	4b35      	ldr	r3, [pc, #212]	; (8001258 <BMP_ReadCalibration+0x184>)
 8001184:	811a      	strh	r2, [r3, #8]
    bmp_cal.AC6 = (BMP_ReadRegister(bmp_cal_reg_m[5]) << 8) | BMP_ReadRegister(bmp_cal_reg_l[5]);
 8001186:	23b4      	movs	r3, #180	; 0xb4
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff ff75 	bl	8001078 <BMP_ReadRegister>
 800118e:	4603      	mov	r3, r0
 8001190:	021b      	lsls	r3, r3, #8
 8001192:	b21c      	sxth	r4, r3
 8001194:	23b5      	movs	r3, #181	; 0xb5
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff ff6e 	bl	8001078 <BMP_ReadRegister>
 800119c:	4603      	mov	r3, r0
 800119e:	b21b      	sxth	r3, r3
 80011a0:	4323      	orrs	r3, r4
 80011a2:	b21b      	sxth	r3, r3
 80011a4:	b29a      	uxth	r2, r3
 80011a6:	4b2c      	ldr	r3, [pc, #176]	; (8001258 <BMP_ReadCalibration+0x184>)
 80011a8:	815a      	strh	r2, [r3, #10]
    bmp_cal.B1 = (BMP_ReadRegister(bmp_cal_reg_m[6]) << 8) | BMP_ReadRegister(bmp_cal_reg_l[6]);
 80011aa:	23b6      	movs	r3, #182	; 0xb6
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff ff63 	bl	8001078 <BMP_ReadRegister>
 80011b2:	4603      	mov	r3, r0
 80011b4:	021b      	lsls	r3, r3, #8
 80011b6:	b21c      	sxth	r4, r3
 80011b8:	23b7      	movs	r3, #183	; 0xb7
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff ff5c 	bl	8001078 <BMP_ReadRegister>
 80011c0:	4603      	mov	r3, r0
 80011c2:	b21b      	sxth	r3, r3
 80011c4:	4323      	orrs	r3, r4
 80011c6:	b21a      	sxth	r2, r3
 80011c8:	4b23      	ldr	r3, [pc, #140]	; (8001258 <BMP_ReadCalibration+0x184>)
 80011ca:	819a      	strh	r2, [r3, #12]
    bmp_cal.B2 = (BMP_ReadRegister(bmp_cal_reg_m[7]) << 8) | BMP_ReadRegister(bmp_cal_reg_l[7]);
 80011cc:	23b8      	movs	r3, #184	; 0xb8
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff ff52 	bl	8001078 <BMP_ReadRegister>
 80011d4:	4603      	mov	r3, r0
 80011d6:	021b      	lsls	r3, r3, #8
 80011d8:	b21c      	sxth	r4, r3
 80011da:	23b9      	movs	r3, #185	; 0xb9
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff ff4b 	bl	8001078 <BMP_ReadRegister>
 80011e2:	4603      	mov	r3, r0
 80011e4:	b21b      	sxth	r3, r3
 80011e6:	4323      	orrs	r3, r4
 80011e8:	b21a      	sxth	r2, r3
 80011ea:	4b1b      	ldr	r3, [pc, #108]	; (8001258 <BMP_ReadCalibration+0x184>)
 80011ec:	81da      	strh	r2, [r3, #14]
    bmp_cal.MB = (BMP_ReadRegister(bmp_cal_reg_m[8]) << 8) | BMP_ReadRegister(bmp_cal_reg_l[8]);
 80011ee:	23ba      	movs	r3, #186	; 0xba
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff ff41 	bl	8001078 <BMP_ReadRegister>
 80011f6:	4603      	mov	r3, r0
 80011f8:	021b      	lsls	r3, r3, #8
 80011fa:	b21c      	sxth	r4, r3
 80011fc:	23bb      	movs	r3, #187	; 0xbb
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff ff3a 	bl	8001078 <BMP_ReadRegister>
 8001204:	4603      	mov	r3, r0
 8001206:	b21b      	sxth	r3, r3
 8001208:	4323      	orrs	r3, r4
 800120a:	b21a      	sxth	r2, r3
 800120c:	4b12      	ldr	r3, [pc, #72]	; (8001258 <BMP_ReadCalibration+0x184>)
 800120e:	825a      	strh	r2, [r3, #18]
    bmp_cal.MC = (BMP_ReadRegister(bmp_cal_reg_m[9]) << 8) | BMP_ReadRegister(bmp_cal_reg_l[9]);
 8001210:	23bc      	movs	r3, #188	; 0xbc
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff ff30 	bl	8001078 <BMP_ReadRegister>
 8001218:	4603      	mov	r3, r0
 800121a:	021b      	lsls	r3, r3, #8
 800121c:	b21c      	sxth	r4, r3
 800121e:	23bd      	movs	r3, #189	; 0xbd
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff ff29 	bl	8001078 <BMP_ReadRegister>
 8001226:	4603      	mov	r3, r0
 8001228:	b21b      	sxth	r3, r3
 800122a:	4323      	orrs	r3, r4
 800122c:	b21a      	sxth	r2, r3
 800122e:	4b0a      	ldr	r3, [pc, #40]	; (8001258 <BMP_ReadCalibration+0x184>)
 8001230:	829a      	strh	r2, [r3, #20]
    bmp_cal.MD = (BMP_ReadRegister(bmp_cal_reg_m[10]) << 8) | BMP_ReadRegister(bmp_cal_reg_l[10]);
 8001232:	23be      	movs	r3, #190	; 0xbe
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff ff1f 	bl	8001078 <BMP_ReadRegister>
 800123a:	4603      	mov	r3, r0
 800123c:	021b      	lsls	r3, r3, #8
 800123e:	b21c      	sxth	r4, r3
 8001240:	23bf      	movs	r3, #191	; 0xbf
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff ff18 	bl	8001078 <BMP_ReadRegister>
 8001248:	4603      	mov	r3, r0
 800124a:	b21b      	sxth	r3, r3
 800124c:	4323      	orrs	r3, r4
 800124e:	b21a      	sxth	r2, r3
 8001250:	4b01      	ldr	r3, [pc, #4]	; (8001258 <BMP_ReadCalibration+0x184>)
 8001252:	82da      	strh	r2, [r3, #22]
}
 8001254:	bf00      	nop
 8001256:	bd98      	pop	{r3, r4, r7, pc}
 8001258:	200001f4 	.word	0x200001f4

0800125c <BMP_GetTempL>:

//Получить значение температуры. Возвращает значение 0.1 градуса цельсия
long BMP_GetTempL() {
 800125c:	b590      	push	{r4, r7, lr}
 800125e:	b087      	sub	sp, #28
 8001260:	af00      	add	r7, sp, #0
    BMP_WriteRegister(0xF4, 0x2E);
 8001262:	212e      	movs	r1, #46	; 0x2e
 8001264:	20f4      	movs	r0, #244	; 0xf4
 8001266:	f7ff ff1e 	bl	80010a6 <BMP_WriteRegister>
    delay_us(4500);
 800126a:	f241 1094 	movw	r0, #4500	; 0x1194
 800126e:	f001 fe8f 	bl	8002f90 <delay_us>
    long UT = (BMP_ReadRegister(0xF6) << 8) | BMP_ReadRegister(0xF7);
 8001272:	20f6      	movs	r0, #246	; 0xf6
 8001274:	f7ff ff00 	bl	8001078 <BMP_ReadRegister>
 8001278:	4603      	mov	r3, r0
 800127a:	021c      	lsls	r4, r3, #8
 800127c:	20f7      	movs	r0, #247	; 0xf7
 800127e:	f7ff fefb 	bl	8001078 <BMP_ReadRegister>
 8001282:	4603      	mov	r3, r0
 8001284:	4323      	orrs	r3, r4
 8001286:	617b      	str	r3, [r7, #20]
    long x1 = (UT - bmp_cal.AC6) * bmp_cal.AC5 / (1 << 15);
 8001288:	4b16      	ldr	r3, [pc, #88]	; (80012e4 <BMP_GetTempL+0x88>)
 800128a:	895b      	ldrh	r3, [r3, #10]
 800128c:	461a      	mov	r2, r3
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	1a9b      	subs	r3, r3, r2
 8001292:	4a14      	ldr	r2, [pc, #80]	; (80012e4 <BMP_GetTempL+0x88>)
 8001294:	8912      	ldrh	r2, [r2, #8]
 8001296:	fb02 f303 	mul.w	r3, r2, r3
 800129a:	2b00      	cmp	r3, #0
 800129c:	da02      	bge.n	80012a4 <BMP_GetTempL+0x48>
 800129e:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80012a2:	337f      	adds	r3, #127	; 0x7f
 80012a4:	13db      	asrs	r3, r3, #15
 80012a6:	613b      	str	r3, [r7, #16]
    long x2 = bmp_cal.MC * (1 << 11) / (x1 + bmp_cal.MD);
 80012a8:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <BMP_GetTempL+0x88>)
 80012aa:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80012ae:	02da      	lsls	r2, r3, #11
 80012b0:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <BMP_GetTempL+0x88>)
 80012b2:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80012b6:	4619      	mov	r1, r3
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	440b      	add	r3, r1
 80012bc:	fb92 f3f3 	sdiv	r3, r2, r3
 80012c0:	60fb      	str	r3, [r7, #12]
    long b5 = x1 + x2;
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	4413      	add	r3, r2
 80012c8:	60bb      	str	r3, [r7, #8]
    long temp = (b5 + 8) / (1 << 4);
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	3308      	adds	r3, #8
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	da00      	bge.n	80012d4 <BMP_GetTempL+0x78>
 80012d2:	330f      	adds	r3, #15
 80012d4:	111b      	asrs	r3, r3, #4
 80012d6:	607b      	str	r3, [r7, #4]
    return temp;
 80012d8:	687b      	ldr	r3, [r7, #4]
}
 80012da:	4618      	mov	r0, r3
 80012dc:	371c      	adds	r7, #28
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd90      	pop	{r4, r7, pc}
 80012e2:	bf00      	nop
 80012e4:	200001f4 	.word	0x200001f4

080012e8 <BMP_GetTemp>:

//Получить значение температуры. Возвращает значение float
float BMP_GetTemp() {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
    return BMP_GetTempL() / 10.0;
 80012ec:	f7ff ffb6 	bl	800125c <BMP_GetTempL>
 80012f0:	4603      	mov	r3, r0
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff f91e 	bl	8000534 <__aeabi_i2d>
 80012f8:	f04f 0200 	mov.w	r2, #0
 80012fc:	4b07      	ldr	r3, [pc, #28]	; (800131c <BMP_GetTemp+0x34>)
 80012fe:	f7ff faad 	bl	800085c <__aeabi_ddiv>
 8001302:	4602      	mov	r2, r0
 8001304:	460b      	mov	r3, r1
 8001306:	4610      	mov	r0, r2
 8001308:	4619      	mov	r1, r3
 800130a:	f7ff fc75 	bl	8000bf8 <__aeabi_d2f>
 800130e:	4603      	mov	r3, r0
 8001310:	ee07 3a90 	vmov	s15, r3
}
 8001314:	eeb0 0a67 	vmov.f32	s0, s15
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40240000 	.word	0x40240000

08001320 <BMP_GetPressure>:

//Получить значение атмосферного давления. Возвращает значение в паскалях
long BMP_GetPressure() {
 8001320:	b590      	push	{r4, r7, lr}
 8001322:	b08d      	sub	sp, #52	; 0x34
 8001324:	af00      	add	r7, sp, #0
    BMP_WriteRegister(0xF4, 0x2E);
 8001326:	212e      	movs	r1, #46	; 0x2e
 8001328:	20f4      	movs	r0, #244	; 0xf4
 800132a:	f7ff febc 	bl	80010a6 <BMP_WriteRegister>
    delay_us(4500);
 800132e:	f241 1094 	movw	r0, #4500	; 0x1194
 8001332:	f001 fe2d 	bl	8002f90 <delay_us>
    long UT = (BMP_ReadRegister(0xF6) << 8) | BMP_ReadRegister(0xF7);
 8001336:	20f6      	movs	r0, #246	; 0xf6
 8001338:	f7ff fe9e 	bl	8001078 <BMP_ReadRegister>
 800133c:	4603      	mov	r3, r0
 800133e:	021c      	lsls	r4, r3, #8
 8001340:	20f7      	movs	r0, #247	; 0xf7
 8001342:	f7ff fe99 	bl	8001078 <BMP_ReadRegister>
 8001346:	4603      	mov	r3, r0
 8001348:	4323      	orrs	r3, r4
 800134a:	62bb      	str	r3, [r7, #40]	; 0x28
    BMP_WriteRegister(0xF4, (0x34 | (bmp_occ << 6)));
 800134c:	4b87      	ldr	r3, [pc, #540]	; (800156c <BMP_GetPressure+0x24c>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	019b      	lsls	r3, r3, #6
 8001352:	b25b      	sxtb	r3, r3
 8001354:	f043 0334 	orr.w	r3, r3, #52	; 0x34
 8001358:	b25b      	sxtb	r3, r3
 800135a:	b2db      	uxtb	r3, r3
 800135c:	4619      	mov	r1, r3
 800135e:	20f4      	movs	r0, #244	; 0xf4
 8001360:	f7ff fea1 	bl	80010a6 <BMP_WriteRegister>
    HAL_Delay(bmp_pres_delay[bmp_occ]);
 8001364:	4b81      	ldr	r3, [pc, #516]	; (800156c <BMP_GetPressure+0x24c>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	461a      	mov	r2, r3
 800136a:	4b81      	ldr	r3, [pc, #516]	; (8001570 <BMP_GetPressure+0x250>)
 800136c:	5c9b      	ldrb	r3, [r3, r2]
 800136e:	4618      	mov	r0, r3
 8001370:	f001 fef0 	bl	8003154 <HAL_Delay>
    delay_us(bmp_pres_delay[bmp_occ] * 1000);
 8001374:	4b7d      	ldr	r3, [pc, #500]	; (800156c <BMP_GetPressure+0x24c>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	461a      	mov	r2, r3
 800137a:	4b7d      	ldr	r3, [pc, #500]	; (8001570 <BMP_GetPressure+0x250>)
 800137c:	5c9b      	ldrb	r3, [r3, r2]
 800137e:	461a      	mov	r2, r3
 8001380:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001384:	fb02 f303 	mul.w	r3, r2, r3
 8001388:	4618      	mov	r0, r3
 800138a:	f001 fe01 	bl	8002f90 <delay_us>
    long UP = (((BMP_ReadRegister(0xF6)) << 16) | ((BMP_ReadRegister(0xF7)) << 8) | BMP_ReadRegister(0xF8)) >> (8 - bmp_occ);
 800138e:	20f6      	movs	r0, #246	; 0xf6
 8001390:	f7ff fe72 	bl	8001078 <BMP_ReadRegister>
 8001394:	4603      	mov	r3, r0
 8001396:	041c      	lsls	r4, r3, #16
 8001398:	20f7      	movs	r0, #247	; 0xf7
 800139a:	f7ff fe6d 	bl	8001078 <BMP_ReadRegister>
 800139e:	4603      	mov	r3, r0
 80013a0:	021b      	lsls	r3, r3, #8
 80013a2:	431c      	orrs	r4, r3
 80013a4:	20f8      	movs	r0, #248	; 0xf8
 80013a6:	f7ff fe67 	bl	8001078 <BMP_ReadRegister>
 80013aa:	4603      	mov	r3, r0
 80013ac:	ea44 0203 	orr.w	r2, r4, r3
 80013b0:	4b6e      	ldr	r3, [pc, #440]	; (800156c <BMP_GetPressure+0x24c>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	f1c3 0308 	rsb	r3, r3, #8
 80013b8:	fa42 f303 	asr.w	r3, r2, r3
 80013bc:	627b      	str	r3, [r7, #36]	; 0x24
    long x1 = (UT - bmp_cal.AC6) * bmp_cal.AC5 / (1 << 15);
 80013be:	4b6d      	ldr	r3, [pc, #436]	; (8001574 <BMP_GetPressure+0x254>)
 80013c0:	895b      	ldrh	r3, [r3, #10]
 80013c2:	461a      	mov	r2, r3
 80013c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013c6:	1a9b      	subs	r3, r3, r2
 80013c8:	4a6a      	ldr	r2, [pc, #424]	; (8001574 <BMP_GetPressure+0x254>)
 80013ca:	8912      	ldrh	r2, [r2, #8]
 80013cc:	fb02 f303 	mul.w	r3, r2, r3
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	da02      	bge.n	80013da <BMP_GetPressure+0xba>
 80013d4:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80013d8:	337f      	adds	r3, #127	; 0x7f
 80013da:	13db      	asrs	r3, r3, #15
 80013dc:	623b      	str	r3, [r7, #32]
    long x2 = bmp_cal.MC * (1 << 11) / (x1 + bmp_cal.MD);
 80013de:	4b65      	ldr	r3, [pc, #404]	; (8001574 <BMP_GetPressure+0x254>)
 80013e0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80013e4:	02da      	lsls	r2, r3, #11
 80013e6:	4b63      	ldr	r3, [pc, #396]	; (8001574 <BMP_GetPressure+0x254>)
 80013e8:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80013ec:	4619      	mov	r1, r3
 80013ee:	6a3b      	ldr	r3, [r7, #32]
 80013f0:	440b      	add	r3, r1
 80013f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80013f6:	61fb      	str	r3, [r7, #28]
    long b5 = x1 + x2;
 80013f8:	6a3a      	ldr	r2, [r7, #32]
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	4413      	add	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
    long b6 = b5 - 4000;
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8001406:	617b      	str	r3, [r7, #20]
    x1 = (bmp_cal.B2 * (b6 * b6 / (1 << 12))) / (1 << 11);
 8001408:	4b5a      	ldr	r3, [pc, #360]	; (8001574 <BMP_GetPressure+0x254>)
 800140a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800140e:	461a      	mov	r2, r3
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	fb03 f303 	mul.w	r3, r3, r3
 8001416:	2b00      	cmp	r3, #0
 8001418:	da01      	bge.n	800141e <BMP_GetPressure+0xfe>
 800141a:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800141e:	131b      	asrs	r3, r3, #12
 8001420:	fb02 f303 	mul.w	r3, r2, r3
 8001424:	2b00      	cmp	r3, #0
 8001426:	da01      	bge.n	800142c <BMP_GetPressure+0x10c>
 8001428:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800142c:	12db      	asrs	r3, r3, #11
 800142e:	623b      	str	r3, [r7, #32]
    x2 = bmp_cal.AC2 * b6 / (1 << 11);
 8001430:	4b50      	ldr	r3, [pc, #320]	; (8001574 <BMP_GetPressure+0x254>)
 8001432:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001436:	461a      	mov	r2, r3
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	fb02 f303 	mul.w	r3, r2, r3
 800143e:	2b00      	cmp	r3, #0
 8001440:	da01      	bge.n	8001446 <BMP_GetPressure+0x126>
 8001442:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001446:	12db      	asrs	r3, r3, #11
 8001448:	61fb      	str	r3, [r7, #28]
    long x3 = x1 + x2;
 800144a:	6a3a      	ldr	r2, [r7, #32]
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	4413      	add	r3, r2
 8001450:	613b      	str	r3, [r7, #16]
    long b3 = ((((long)bmp_cal.AC1 * 4 + x3) << bmp_occ) + 2) / 4;
 8001452:	4b48      	ldr	r3, [pc, #288]	; (8001574 <BMP_GetPressure+0x254>)
 8001454:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001458:	009a      	lsls	r2, r3, #2
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	4413      	add	r3, r2
 800145e:	4a43      	ldr	r2, [pc, #268]	; (800156c <BMP_GetPressure+0x24c>)
 8001460:	7812      	ldrb	r2, [r2, #0]
 8001462:	4093      	lsls	r3, r2
 8001464:	3302      	adds	r3, #2
 8001466:	2b00      	cmp	r3, #0
 8001468:	da00      	bge.n	800146c <BMP_GetPressure+0x14c>
 800146a:	3303      	adds	r3, #3
 800146c:	109b      	asrs	r3, r3, #2
 800146e:	60fb      	str	r3, [r7, #12]
    x1 = bmp_cal.AC3 * b6 / (1 << 13);
 8001470:	4b40      	ldr	r3, [pc, #256]	; (8001574 <BMP_GetPressure+0x254>)
 8001472:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001476:	461a      	mov	r2, r3
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	fb02 f303 	mul.w	r3, r2, r3
 800147e:	2b00      	cmp	r3, #0
 8001480:	da02      	bge.n	8001488 <BMP_GetPressure+0x168>
 8001482:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 8001486:	331f      	adds	r3, #31
 8001488:	135b      	asrs	r3, r3, #13
 800148a:	623b      	str	r3, [r7, #32]
    x2 = (bmp_cal.B1 * (b6 * b6 / (1 << 12))) / (1 << 16);
 800148c:	4b39      	ldr	r3, [pc, #228]	; (8001574 <BMP_GetPressure+0x254>)
 800148e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001492:	461a      	mov	r2, r3
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	fb03 f303 	mul.w	r3, r3, r3
 800149a:	2b00      	cmp	r3, #0
 800149c:	da01      	bge.n	80014a2 <BMP_GetPressure+0x182>
 800149e:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80014a2:	131b      	asrs	r3, r3, #12
 80014a4:	fb02 f303 	mul.w	r3, r2, r3
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	da02      	bge.n	80014b2 <BMP_GetPressure+0x192>
 80014ac:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80014b0:	33ff      	adds	r3, #255	; 0xff
 80014b2:	141b      	asrs	r3, r3, #16
 80014b4:	61fb      	str	r3, [r7, #28]
    x3 = ((x1 + x2) + 2) / 4;
 80014b6:	6a3a      	ldr	r2, [r7, #32]
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	4413      	add	r3, r2
 80014bc:	3302      	adds	r3, #2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	da00      	bge.n	80014c4 <BMP_GetPressure+0x1a4>
 80014c2:	3303      	adds	r3, #3
 80014c4:	109b      	asrs	r3, r3, #2
 80014c6:	613b      	str	r3, [r7, #16]
    unsigned long b4 = bmp_cal.AC4 * (unsigned long)(x3 + 32768) / (1 << 15);
 80014c8:	4b2a      	ldr	r3, [pc, #168]	; (8001574 <BMP_GetPressure+0x254>)
 80014ca:	88db      	ldrh	r3, [r3, #6]
 80014cc:	461a      	mov	r2, r3
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80014d4:	fb02 f303 	mul.w	r3, r2, r3
 80014d8:	0bdb      	lsrs	r3, r3, #15
 80014da:	60bb      	str	r3, [r7, #8]
    unsigned long b7 = ((unsigned long)UP - b3) * (50000 >> bmp_occ);
 80014dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	4a22      	ldr	r2, [pc, #136]	; (800156c <BMP_GetPressure+0x24c>)
 80014e4:	7812      	ldrb	r2, [r2, #0]
 80014e6:	4611      	mov	r1, r2
 80014e8:	f24c 3250 	movw	r2, #50000	; 0xc350
 80014ec:	410a      	asrs	r2, r1
 80014ee:	fb02 f303 	mul.w	r3, r2, r3
 80014f2:	607b      	str	r3, [r7, #4]
    long p;
    if (b7 < 0x80000000)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	db06      	blt.n	8001508 <BMP_GetPressure+0x1e8>
        p = (b7 * 2) / b4;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	005a      	lsls	r2, r3, #1
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	fbb2 f3f3 	udiv	r3, r2, r3
 8001504:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001506:	e005      	b.n	8001514 <BMP_GetPressure+0x1f4>
    else
        p = (b7 / b4) * 2;
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	62fb      	str	r3, [r7, #44]	; 0x2c
    x1 = (p / (1 << 8)) / (p / (1 << 8));
 8001514:	2301      	movs	r3, #1
 8001516:	623b      	str	r3, [r7, #32]
    x1 = (x1 * 3038) / (1 << 16);
 8001518:	6a3b      	ldr	r3, [r7, #32]
 800151a:	f640 32de 	movw	r2, #3038	; 0xbde
 800151e:	fb02 f303 	mul.w	r3, r2, r3
 8001522:	2b00      	cmp	r3, #0
 8001524:	da02      	bge.n	800152c <BMP_GetPressure+0x20c>
 8001526:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800152a:	33ff      	adds	r3, #255	; 0xff
 800152c:	141b      	asrs	r3, r3, #16
 800152e:	623b      	str	r3, [r7, #32]
    x2 = (-7357 * p) / (1 << 16);
 8001530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001532:	4a11      	ldr	r2, [pc, #68]	; (8001578 <BMP_GetPressure+0x258>)
 8001534:	fb02 f303 	mul.w	r3, r2, r3
 8001538:	2b00      	cmp	r3, #0
 800153a:	da02      	bge.n	8001542 <BMP_GetPressure+0x222>
 800153c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001540:	33ff      	adds	r3, #255	; 0xff
 8001542:	141b      	asrs	r3, r3, #16
 8001544:	61fb      	str	r3, [r7, #28]
    p = p + (x1 + x2 + 3791) / 16;
 8001546:	6a3a      	ldr	r2, [r7, #32]
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	4413      	add	r3, r2
 800154c:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 8001550:	2b00      	cmp	r3, #0
 8001552:	da00      	bge.n	8001556 <BMP_GetPressure+0x236>
 8001554:	330f      	adds	r3, #15
 8001556:	111b      	asrs	r3, r3, #4
 8001558:	461a      	mov	r2, r3
 800155a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800155c:	4413      	add	r3, r2
 800155e:	62fb      	str	r3, [r7, #44]	; 0x2c
    return p;
 8001560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001562:	4618      	mov	r0, r3
 8001564:	3734      	adds	r7, #52	; 0x34
 8001566:	46bd      	mov	sp, r7
 8001568:	bd90      	pop	{r4, r7, pc}
 800156a:	bf00      	nop
 800156c:	20000000 	.word	0x20000000
 8001570:	08007824 	.word	0x08007824
 8001574:	200001f4 	.word	0x200001f4
 8001578:	ffffe343 	.word	0xffffe343

0800157c <BMP_GetAltitude>:

//Получить высоту над уровнем моря в метрах
long BMP_GetAltitude() {
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
    long p = BMP_GetPressure();
 8001582:	f7ff fecd 	bl	8001320 <BMP_GetPressure>
 8001586:	6078      	str	r0, [r7, #4]
    long alt = 44330 * (1 - powf(((float)p/BMP_PSL), 1.0/5.255));
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	ee07 3a90 	vmov	s15, r3
 800158e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001592:	eddf 6a0f 	vldr	s13, [pc, #60]	; 80015d0 <BMP_GetAltitude+0x54>
 8001596:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800159a:	eddf 0a0e 	vldr	s1, [pc, #56]	; 80015d4 <BMP_GetAltitude+0x58>
 800159e:	eeb0 0a47 	vmov.f32	s0, s14
 80015a2:	f005 fd35 	bl	8007010 <powf>
 80015a6:	eef0 7a40 	vmov.f32	s15, s0
 80015aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80015ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015b2:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80015d8 <BMP_GetAltitude+0x5c>
 80015b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015be:	ee17 3a90 	vmov	r3, s15
 80015c2:	603b      	str	r3, [r7, #0]
    return alt;
 80015c4:	683b      	ldr	r3, [r7, #0]
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	47c5e680 	.word	0x47c5e680
 80015d4:	3e42dcae 	.word	0x3e42dcae
 80015d8:	472d2a00 	.word	0x472d2a00

080015dc <DHT_Get>:
#include "DHT11_Driver.h"
#include "timer_delay.h"

//Получения данных от DHT11. В случае провала возвращает 0
uint8_t DHT_Get(float* data) {
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
    //Настройка линии на выход
    MODIFY_REG(GPIOA->MODER, GPIO_MODER_MODER15_Msk, 1 << GPIO_MODER_MODER15_Pos);
 80015e4:	4b4c      	ldr	r3, [pc, #304]	; (8001718 <DHT_Get+0x13c>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80015ec:	4a4a      	ldr	r2, [pc, #296]	; (8001718 <DHT_Get+0x13c>)
 80015ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80015f2:	6013      	str	r3, [r2, #0]
    //Установить логический ноль
    CLEAR_BIT(GPIOA->ODR,GPIO_ODR_OD15);
 80015f4:	4b48      	ldr	r3, [pc, #288]	; (8001718 <DHT_Get+0x13c>)
 80015f6:	695b      	ldr	r3, [r3, #20]
 80015f8:	4a47      	ldr	r2, [pc, #284]	; (8001718 <DHT_Get+0x13c>)
 80015fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80015fe:	6153      	str	r3, [r2, #20]
    //Ожидаем 18мс
    HAL_Delay(18);
 8001600:	2012      	movs	r0, #18
 8001602:	f001 fda7 	bl	8003154 <HAL_Delay>
    //Настройка линии на вход
    MODIFY_REG(GPIOA->MODER, GPIO_MODER_MODER15_Msk, 0 << GPIO_MODER_MODER15_Pos);
 8001606:	4b44      	ldr	r3, [pc, #272]	; (8001718 <DHT_Get+0x13c>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a43      	ldr	r2, [pc, #268]	; (8001718 <DHT_Get+0x13c>)
 800160c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001610:	6013      	str	r3, [r2, #0]
    delay_us(50); //Ждем 50мск, после этого датчик уже должен прижать линию
 8001612:	2032      	movs	r0, #50	; 0x32
 8001614:	f001 fcbc 	bl	8002f90 <delay_us>
    if (READ_BIT(GPIOA->IDR, GPIO_IDR_ID15_Msk))
 8001618:	4b3f      	ldr	r3, [pc, #252]	; (8001718 <DHT_Get+0x13c>)
 800161a:	691b      	ldr	r3, [r3, #16]
 800161c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <DHT_Get+0x4c>
        return 0;
 8001624:	2300      	movs	r3, #0
 8001626:	e072      	b.n	800170e <DHT_Get+0x132>
    delay_us(80); //Ждем 80 мск, проверяем чтобы линия не была прижата
 8001628:	2050      	movs	r0, #80	; 0x50
 800162a:	f001 fcb1 	bl	8002f90 <delay_us>
    if (!READ_BIT(GPIOA->IDR, GPIO_IDR_ID15_Msk))
 800162e:	4b3a      	ldr	r3, [pc, #232]	; (8001718 <DHT_Get+0x13c>)
 8001630:	691b      	ldr	r3, [r3, #16]
 8001632:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d101      	bne.n	800163e <DHT_Get+0x62>
        return 0;
 800163a:	2300      	movs	r3, #0
 800163c:	e067      	b.n	800170e <DHT_Get+0x132>
    //И ждем когда она опустится = начало передачи данных
    while (READ_BIT(GPIOA->IDR, GPIO_IDR_ID15_Msk)) {};
 800163e:	bf00      	nop
 8001640:	4b35      	ldr	r3, [pc, #212]	; (8001718 <DHT_Get+0x13c>)
 8001642:	691b      	ldr	r3, [r3, #16]
 8001644:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d1f9      	bne.n	8001640 <DHT_Get+0x64>
    //Можно приступать к чтению
    uint8_t dht_data[5] = {0};
 800164c:	2300      	movs	r3, #0
 800164e:	60bb      	str	r3, [r7, #8]
 8001650:	2300      	movs	r3, #0
 8001652:	733b      	strb	r3, [r7, #12]
    for (uint8_t byte_n = 0; byte_n < 5; byte_n++) {
 8001654:	2300      	movs	r3, #0
 8001656:	73fb      	strb	r3, [r7, #15]
 8001658:	e035      	b.n	80016c6 <DHT_Get+0xea>
        for (uint8_t bit_n = 7; bit_n != 255; bit_n--) {
 800165a:	2307      	movs	r3, #7
 800165c:	73bb      	strb	r3, [r7, #14]
 800165e:	e02c      	b.n	80016ba <DHT_Get+0xde>
            //Ждем пока линия поднимется
            while (!READ_BIT(GPIOA->IDR, GPIO_IDR_ID15_Msk)) {};
 8001660:	bf00      	nop
 8001662:	4b2d      	ldr	r3, [pc, #180]	; (8001718 <DHT_Get+0x13c>)
 8001664:	691b      	ldr	r3, [r3, #16]
 8001666:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d0f9      	beq.n	8001662 <DHT_Get+0x86>
            delay_us(30);
 800166e:	201e      	movs	r0, #30
 8001670:	f001 fc8e 	bl	8002f90 <delay_us>
            //Если спустя 30мкс линия не в лог. ед. = прислана 1
            if (READ_BIT(GPIOA->IDR, GPIO_IDR_ID15_Msk))
 8001674:	4b28      	ldr	r3, [pc, #160]	; (8001718 <DHT_Get+0x13c>)
 8001676:	691b      	ldr	r3, [r3, #16]
 8001678:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d012      	beq.n	80016a6 <DHT_Get+0xca>
                dht_data[byte_n] |= 1 << bit_n;
 8001680:	7bfb      	ldrb	r3, [r7, #15]
 8001682:	3310      	adds	r3, #16
 8001684:	443b      	add	r3, r7
 8001686:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800168a:	b25a      	sxtb	r2, r3
 800168c:	7bbb      	ldrb	r3, [r7, #14]
 800168e:	2101      	movs	r1, #1
 8001690:	fa01 f303 	lsl.w	r3, r1, r3
 8001694:	b25b      	sxtb	r3, r3
 8001696:	4313      	orrs	r3, r2
 8001698:	b25a      	sxtb	r2, r3
 800169a:	7bfb      	ldrb	r3, [r7, #15]
 800169c:	b2d2      	uxtb	r2, r2
 800169e:	3310      	adds	r3, #16
 80016a0:	443b      	add	r3, r7
 80016a2:	f803 2c08 	strb.w	r2, [r3, #-8]
            //Ждем пока линия будет на нуле = передача нового бита
            while (READ_BIT(GPIOA->IDR, GPIO_IDR_ID15_Msk)) {};
 80016a6:	bf00      	nop
 80016a8:	4b1b      	ldr	r3, [pc, #108]	; (8001718 <DHT_Get+0x13c>)
 80016aa:	691b      	ldr	r3, [r3, #16]
 80016ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d1f9      	bne.n	80016a8 <DHT_Get+0xcc>
        for (uint8_t bit_n = 7; bit_n != 255; bit_n--) {
 80016b4:	7bbb      	ldrb	r3, [r7, #14]
 80016b6:	3b01      	subs	r3, #1
 80016b8:	73bb      	strb	r3, [r7, #14]
 80016ba:	7bbb      	ldrb	r3, [r7, #14]
 80016bc:	2bff      	cmp	r3, #255	; 0xff
 80016be:	d1cf      	bne.n	8001660 <DHT_Get+0x84>
    for (uint8_t byte_n = 0; byte_n < 5; byte_n++) {
 80016c0:	7bfb      	ldrb	r3, [r7, #15]
 80016c2:	3301      	adds	r3, #1
 80016c4:	73fb      	strb	r3, [r7, #15]
 80016c6:	7bfb      	ldrb	r3, [r7, #15]
 80016c8:	2b04      	cmp	r3, #4
 80016ca:	d9c6      	bls.n	800165a <DHT_Get+0x7e>
        }
    }

    if ((uint8_t)(dht_data[0] + dht_data[1] + dht_data[2] + dht_data[3]) == dht_data[4]) {
 80016cc:	7a3a      	ldrb	r2, [r7, #8]
 80016ce:	7a7b      	ldrb	r3, [r7, #9]
 80016d0:	4413      	add	r3, r2
 80016d2:	b2da      	uxtb	r2, r3
 80016d4:	7abb      	ldrb	r3, [r7, #10]
 80016d6:	4413      	add	r3, r2
 80016d8:	b2da      	uxtb	r2, r3
 80016da:	7afb      	ldrb	r3, [r7, #11]
 80016dc:	4413      	add	r3, r2
 80016de:	b2da      	uxtb	r2, r3
 80016e0:	7b3b      	ldrb	r3, [r7, #12]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d112      	bne.n	800170c <DHT_Get+0x130>
        data[0] = (float)dht_data[2];
 80016e6:	7abb      	ldrb	r3, [r7, #10]
 80016e8:	ee07 3a90 	vmov	s15, r3
 80016ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	edc3 7a00 	vstr	s15, [r3]
        data[1] = (float)dht_data[0];
 80016f6:	7a3a      	ldrb	r2, [r7, #8]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3304      	adds	r3, #4
 80016fc:	ee07 2a90 	vmov	s15, r2
 8001700:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001704:	edc3 7a00 	vstr	s15, [r3]
        return 1;
 8001708:	2301      	movs	r3, #1
 800170a:	e000      	b.n	800170e <DHT_Get+0x132>
    }
    else
        return 0;
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40020000 	.word	0x40020000

0800171c <GPIO_Full_Init>:
/* Инициализация GPIO */
#include "GPIO.h"

void GPIO_Full_Init() {
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
/* --- Скорость портов --- */
WRITE_REG(GPIOA->OSPEEDR, 0xFFFFFFFF);
 8001720:	4ba3      	ldr	r3, [pc, #652]	; (80019b0 <GPIO_Full_Init+0x294>)
 8001722:	f04f 32ff 	mov.w	r2, #4294967295
 8001726:	609a      	str	r2, [r3, #8]
WRITE_REG(GPIOB->OSPEEDR, 0xFFFFFFFF);
 8001728:	4ba2      	ldr	r3, [pc, #648]	; (80019b4 <GPIO_Full_Init+0x298>)
 800172a:	f04f 32ff 	mov.w	r2, #4294967295
 800172e:	609a      	str	r2, [r3, #8]
WRITE_REG(GPIOC->OSPEEDR, 0xFFFFFFFF);
 8001730:	4ba1      	ldr	r3, [pc, #644]	; (80019b8 <GPIO_Full_Init+0x29c>)
 8001732:	f04f 32ff 	mov.w	r2, #4294967295
 8001736:	609a      	str	r2, [r3, #8]
//Joystick, Regulator, Microphone
//Режим: Analog; Подтяжка: OFF; Скорость: Средняя
//Порты (PA0, PA1), PA4, PB0

// PORT A0
MODIFY_REG(GPIOA->MODER, GPIO_MODER_MODER0, 3 << GPIO_MODER_MODER0_Pos);
 8001738:	4b9d      	ldr	r3, [pc, #628]	; (80019b0 <GPIO_Full_Init+0x294>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a9c      	ldr	r2, [pc, #624]	; (80019b0 <GPIO_Full_Init+0x294>)
 800173e:	f043 0303 	orr.w	r3, r3, #3
 8001742:	6013      	str	r3, [r2, #0]
MODIFY_REG(GPIOA->PUPDR, GPIO_PUPDR_PUPD0_Msk, 0 << GPIO_PUPDR_PUPD0_Pos);
 8001744:	4b9a      	ldr	r3, [pc, #616]	; (80019b0 <GPIO_Full_Init+0x294>)
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	4a99      	ldr	r2, [pc, #612]	; (80019b0 <GPIO_Full_Init+0x294>)
 800174a:	f023 0303 	bic.w	r3, r3, #3
 800174e:	60d3      	str	r3, [r2, #12]
//PORT A1
MODIFY_REG(GPIOA->MODER, GPIO_MODER_MODER1_Msk, 3 << GPIO_MODER_MODER1_Pos);
 8001750:	4b97      	ldr	r3, [pc, #604]	; (80019b0 <GPIO_Full_Init+0x294>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a96      	ldr	r2, [pc, #600]	; (80019b0 <GPIO_Full_Init+0x294>)
 8001756:	f043 030c 	orr.w	r3, r3, #12
 800175a:	6013      	str	r3, [r2, #0]
MODIFY_REG(GPIOA->PUPDR, GPIO_PUPDR_PUPD1_Msk, 0 << GPIO_PUPDR_PUPD1_Pos);
 800175c:	4b94      	ldr	r3, [pc, #592]	; (80019b0 <GPIO_Full_Init+0x294>)
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	4a93      	ldr	r2, [pc, #588]	; (80019b0 <GPIO_Full_Init+0x294>)
 8001762:	f023 030c 	bic.w	r3, r3, #12
 8001766:	60d3      	str	r3, [r2, #12]
//PORT A4
MODIFY_REG(GPIOA->MODER, GPIO_MODER_MODER4_Msk, 3 << GPIO_MODER_MODER4_Pos);
 8001768:	4b91      	ldr	r3, [pc, #580]	; (80019b0 <GPIO_Full_Init+0x294>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a90      	ldr	r2, [pc, #576]	; (80019b0 <GPIO_Full_Init+0x294>)
 800176e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001772:	6013      	str	r3, [r2, #0]
MODIFY_REG(GPIOA->PUPDR, GPIO_PUPDR_PUPD4_Msk, 0 << GPIO_PUPDR_PUPD4_Pos);
 8001774:	4b8e      	ldr	r3, [pc, #568]	; (80019b0 <GPIO_Full_Init+0x294>)
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	4a8d      	ldr	r2, [pc, #564]	; (80019b0 <GPIO_Full_Init+0x294>)
 800177a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800177e:	60d3      	str	r3, [r2, #12]
//PORT B0
MODIFY_REG(GPIOB->MODER, GPIO_MODER_MODER0_Msk, 3 << GPIO_MODER_MODER0_Pos);
 8001780:	4b8c      	ldr	r3, [pc, #560]	; (80019b4 <GPIO_Full_Init+0x298>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a8b      	ldr	r2, [pc, #556]	; (80019b4 <GPIO_Full_Init+0x298>)
 8001786:	f043 0303 	orr.w	r3, r3, #3
 800178a:	6013      	str	r3, [r2, #0]
MODIFY_REG(GPIOB->PUPDR, GPIO_PUPDR_PUPD0_Msk, 0 << GPIO_PUPDR_PUPD0_Pos);
 800178c:	4b89      	ldr	r3, [pc, #548]	; (80019b4 <GPIO_Full_Init+0x298>)
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	4a88      	ldr	r2, [pc, #544]	; (80019b4 <GPIO_Full_Init+0x298>)
 8001792:	f023 0303 	bic.w	r3, r3, #3
 8001796:	60d3      	str	r3, [r2, #12]
/* --------------- Шина I2C --------------- */
//Используется I2C 1. PB8: SCL PB9: SCL
//Mode: Alternate. Alternate High Register = AFRH4 (= I2C)

//PORT B8 | SCL
MODIFY_REG(GPIOB->MODER, GPIO_MODER_MODER8_Msk, 2 << GPIO_MODER_MODER8_Pos);
 8001798:	4b86      	ldr	r3, [pc, #536]	; (80019b4 <GPIO_Full_Init+0x298>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80017a0:	4a84      	ldr	r2, [pc, #528]	; (80019b4 <GPIO_Full_Init+0x298>)
 80017a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017a6:	6013      	str	r3, [r2, #0]
MODIFY_REG(GPIOB->PUPDR, GPIO_PUPDR_PUPD8_Msk, 0 << GPIO_PUPDR_PUPD8_Pos);
 80017a8:	4b82      	ldr	r3, [pc, #520]	; (80019b4 <GPIO_Full_Init+0x298>)
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	4a81      	ldr	r2, [pc, #516]	; (80019b4 <GPIO_Full_Init+0x298>)
 80017ae:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80017b2:	60d3      	str	r3, [r2, #12]
MODIFY_REG(GPIOB->AFR[1], GPIO_AFRH_AFSEL8_Msk, 4 << GPIO_AFRH_AFSEL8_Pos);
 80017b4:	4b7f      	ldr	r3, [pc, #508]	; (80019b4 <GPIO_Full_Init+0x298>)
 80017b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b8:	f023 030f 	bic.w	r3, r3, #15
 80017bc:	4a7d      	ldr	r2, [pc, #500]	; (80019b4 <GPIO_Full_Init+0x298>)
 80017be:	f043 0304 	orr.w	r3, r3, #4
 80017c2:	6253      	str	r3, [r2, #36]	; 0x24
//MODIFY_REG(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEED8_Msk, 3 << GPIO_OSPEEDR_OSPEED8_Pos);
//PORT B9 | SDA
MODIFY_REG(GPIOB->MODER, GPIO_MODER_MODER9_Msk, 2 << GPIO_MODER_MODER9_Pos);
 80017c4:	4b7b      	ldr	r3, [pc, #492]	; (80019b4 <GPIO_Full_Init+0x298>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80017cc:	4a79      	ldr	r2, [pc, #484]	; (80019b4 <GPIO_Full_Init+0x298>)
 80017ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80017d2:	6013      	str	r3, [r2, #0]
MODIFY_REG(GPIOB->PUPDR, GPIO_PUPDR_PUPD9_Msk, 0 << GPIO_PUPDR_PUPD9_Pos);
 80017d4:	4b77      	ldr	r3, [pc, #476]	; (80019b4 <GPIO_Full_Init+0x298>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	4a76      	ldr	r2, [pc, #472]	; (80019b4 <GPIO_Full_Init+0x298>)
 80017da:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80017de:	60d3      	str	r3, [r2, #12]
MODIFY_REG(GPIOB->AFR[1], GPIO_AFRH_AFSEL9_Msk, 4 << GPIO_AFRH_AFSEL9_Pos);
 80017e0:	4b74      	ldr	r3, [pc, #464]	; (80019b4 <GPIO_Full_Init+0x298>)
 80017e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80017e8:	4a72      	ldr	r2, [pc, #456]	; (80019b4 <GPIO_Full_Init+0x298>)
 80017ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017ee:	6253      	str	r3, [r2, #36]	; 0x24
/* --------------- Шина SPI --------------- */
//Используется SPI 1. PB4: MISO PB5: MOSI PC10: SCK
//Mode: FullDuplex-Master. Alternate Low Register = AFRL6

//PORT B4 | MISO
MODIFY_REG(GPIOB->MODER, GPIO_MODER_MODER4_Msk, 2 << GPIO_MODER_MODER4_Pos);
 80017f0:	4b70      	ldr	r3, [pc, #448]	; (80019b4 <GPIO_Full_Init+0x298>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017f8:	4a6e      	ldr	r2, [pc, #440]	; (80019b4 <GPIO_Full_Init+0x298>)
 80017fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017fe:	6013      	str	r3, [r2, #0]
MODIFY_REG(GPIOB->PUPDR, GPIO_PUPDR_PUPD4_Msk, 0 << GPIO_PUPDR_PUPD4_Pos);
 8001800:	4b6c      	ldr	r3, [pc, #432]	; (80019b4 <GPIO_Full_Init+0x298>)
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	4a6b      	ldr	r2, [pc, #428]	; (80019b4 <GPIO_Full_Init+0x298>)
 8001806:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800180a:	60d3      	str	r3, [r2, #12]
MODIFY_REG(GPIOB->AFR[0], GPIO_AFRL_AFSEL4_Msk, 6 << GPIO_AFRL_AFSEL4_Pos);
 800180c:	4b69      	ldr	r3, [pc, #420]	; (80019b4 <GPIO_Full_Init+0x298>)
 800180e:	6a1b      	ldr	r3, [r3, #32]
 8001810:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8001814:	4a67      	ldr	r2, [pc, #412]	; (80019b4 <GPIO_Full_Init+0x298>)
 8001816:	f443 23c0 	orr.w	r3, r3, #393216	; 0x60000
 800181a:	6213      	str	r3, [r2, #32]
//PORT B5 | MOSI
MODIFY_REG(GPIOB->MODER, GPIO_MODER_MODER5_Msk, 2 << GPIO_MODER_MODER5_Pos);
 800181c:	4b65      	ldr	r3, [pc, #404]	; (80019b4 <GPIO_Full_Init+0x298>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001824:	4a63      	ldr	r2, [pc, #396]	; (80019b4 <GPIO_Full_Init+0x298>)
 8001826:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800182a:	6013      	str	r3, [r2, #0]
MODIFY_REG(GPIOB->PUPDR, GPIO_PUPDR_PUPD5_Msk, 0 << GPIO_PUPDR_PUPD5_Pos);
 800182c:	4b61      	ldr	r3, [pc, #388]	; (80019b4 <GPIO_Full_Init+0x298>)
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	4a60      	ldr	r2, [pc, #384]	; (80019b4 <GPIO_Full_Init+0x298>)
 8001832:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001836:	60d3      	str	r3, [r2, #12]
MODIFY_REG(GPIOB->AFR[0], GPIO_AFRL_AFSEL5_Msk, 6 << GPIO_AFRL_AFSEL5_Pos);
 8001838:	4b5e      	ldr	r3, [pc, #376]	; (80019b4 <GPIO_Full_Init+0x298>)
 800183a:	6a1b      	ldr	r3, [r3, #32]
 800183c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001840:	4a5c      	ldr	r2, [pc, #368]	; (80019b4 <GPIO_Full_Init+0x298>)
 8001842:	f443 03c0 	orr.w	r3, r3, #6291456	; 0x600000
 8001846:	6213      	str	r3, [r2, #32]
//PORT C10 | SCK
MODIFY_REG(GPIOC->MODER, GPIO_MODER_MODER10_Msk, 2 << GPIO_MODER_MODER10_Pos);
 8001848:	4b5b      	ldr	r3, [pc, #364]	; (80019b8 <GPIO_Full_Init+0x29c>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001850:	4a59      	ldr	r2, [pc, #356]	; (80019b8 <GPIO_Full_Init+0x29c>)
 8001852:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001856:	6013      	str	r3, [r2, #0]
MODIFY_REG(GPIOC->PUPDR, GPIO_PUPDR_PUPD10_Msk, 0 << GPIO_PUPDR_PUPD10_Pos);
 8001858:	4b57      	ldr	r3, [pc, #348]	; (80019b8 <GPIO_Full_Init+0x29c>)
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	4a56      	ldr	r2, [pc, #344]	; (80019b8 <GPIO_Full_Init+0x29c>)
 800185e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001862:	60d3      	str	r3, [r2, #12]
MODIFY_REG(GPIOC->AFR[1], GPIO_AFRH_AFSEL10_Msk, 6 << GPIO_AFRH_AFSEL10_Pos);
 8001864:	4b54      	ldr	r3, [pc, #336]	; (80019b8 <GPIO_Full_Init+0x29c>)
 8001866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001868:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800186c:	4a52      	ldr	r2, [pc, #328]	; (80019b8 <GPIO_Full_Init+0x29c>)
 800186e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8001872:	6253      	str	r3, [r2, #36]	; 0x24
//PORT B1 | RFID SELECT
MODIFY_REG(GPIOB->MODER, GPIO_MODER_MODER1_Msk, 1 << GPIO_MODER_MODER1_Pos);
 8001874:	4b4f      	ldr	r3, [pc, #316]	; (80019b4 <GPIO_Full_Init+0x298>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f023 030c 	bic.w	r3, r3, #12
 800187c:	4a4d      	ldr	r2, [pc, #308]	; (80019b4 <GPIO_Full_Init+0x298>)
 800187e:	f043 0304 	orr.w	r3, r3, #4
 8001882:	6013      	str	r3, [r2, #0]
MODIFY_REG(GPIOB->PUPDR, GPIO_PUPDR_PUPD1_Msk, 0 << GPIO_PUPDR_PUPD1_Pos);
 8001884:	4b4b      	ldr	r3, [pc, #300]	; (80019b4 <GPIO_Full_Init+0x298>)
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	4a4a      	ldr	r2, [pc, #296]	; (80019b4 <GPIO_Full_Init+0x298>)
 800188a:	f023 030c 	bic.w	r3, r3, #12
 800188e:	60d3      	str	r3, [r2, #12]
//PORT B7 | SD SELECT
MODIFY_REG(GPIOB->MODER, GPIO_MODER_MODER7_Msk, 1 << GPIO_MODER_MODER7_Pos);
 8001890:	4b48      	ldr	r3, [pc, #288]	; (80019b4 <GPIO_Full_Init+0x298>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001898:	4a46      	ldr	r2, [pc, #280]	; (80019b4 <GPIO_Full_Init+0x298>)
 800189a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800189e:	6013      	str	r3, [r2, #0]
MODIFY_REG(GPIOB->PUPDR, GPIO_PUPDR_PUPD7_Msk, 0 << GPIO_PUPDR_PUPD7_Pos);
 80018a0:	4b44      	ldr	r3, [pc, #272]	; (80019b4 <GPIO_Full_Init+0x298>)
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	4a43      	ldr	r2, [pc, #268]	; (80019b4 <GPIO_Full_Init+0x298>)
 80018a6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80018aa:	60d3      	str	r3, [r2, #12]
MODIFY_REG(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEED7_Msk, 0 << GPIO_OSPEEDR_OSPEED7_Pos);
 80018ac:	4b41      	ldr	r3, [pc, #260]	; (80019b4 <GPIO_Full_Init+0x298>)
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	4a40      	ldr	r2, [pc, #256]	; (80019b4 <GPIO_Full_Init+0x298>)
 80018b2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80018b6:	6093      	str	r3, [r2, #8]

/* --------------- Модули UART --------------- */
//USART1/2 Alternate Function Register = AFRL/H 7
MODIFY_REG(GPIOA->MODER, GPIO_MODER_MODER2_Msk, 2 << GPIO_MODER_MODER2_Pos);
 80018b8:	4b3d      	ldr	r3, [pc, #244]	; (80019b0 <GPIO_Full_Init+0x294>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80018c0:	4a3b      	ldr	r2, [pc, #236]	; (80019b0 <GPIO_Full_Init+0x294>)
 80018c2:	f043 0320 	orr.w	r3, r3, #32
 80018c6:	6013      	str	r3, [r2, #0]
MODIFY_REG(GPIOA->MODER, GPIO_MODER_MODER3_Msk, 2 << GPIO_MODER_MODER3_Pos);
 80018c8:	4b39      	ldr	r3, [pc, #228]	; (80019b0 <GPIO_Full_Init+0x294>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80018d0:	4a37      	ldr	r2, [pc, #220]	; (80019b0 <GPIO_Full_Init+0x294>)
 80018d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018d6:	6013      	str	r3, [r2, #0]
MODIFY_REG(GPIOA->MODER, GPIO_MODER_MODER9_Msk, 2 << GPIO_MODER_MODER9_Pos);
 80018d8:	4b35      	ldr	r3, [pc, #212]	; (80019b0 <GPIO_Full_Init+0x294>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80018e0:	4a33      	ldr	r2, [pc, #204]	; (80019b0 <GPIO_Full_Init+0x294>)
 80018e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80018e6:	6013      	str	r3, [r2, #0]
MODIFY_REG(GPIOA->MODER, GPIO_MODER_MODER10_Msk, 2 << GPIO_MODER_MODER10_Pos);
 80018e8:	4b31      	ldr	r3, [pc, #196]	; (80019b0 <GPIO_Full_Init+0x294>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80018f0:	4a2f      	ldr	r2, [pc, #188]	; (80019b0 <GPIO_Full_Init+0x294>)
 80018f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018f6:	6013      	str	r3, [r2, #0]
MODIFY_REG(GPIOA->AFR[0], GPIO_AFRL_AFSEL2_Msk, 7 << GPIO_AFRL_AFSEL2_Pos);
 80018f8:	4b2d      	ldr	r3, [pc, #180]	; (80019b0 <GPIO_Full_Init+0x294>)
 80018fa:	6a1b      	ldr	r3, [r3, #32]
 80018fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001900:	4a2b      	ldr	r2, [pc, #172]	; (80019b0 <GPIO_Full_Init+0x294>)
 8001902:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001906:	6213      	str	r3, [r2, #32]
MODIFY_REG(GPIOA->AFR[0], GPIO_AFRL_AFSEL3_Msk, 7 << GPIO_AFRL_AFSEL3_Pos);
 8001908:	4b29      	ldr	r3, [pc, #164]	; (80019b0 <GPIO_Full_Init+0x294>)
 800190a:	6a1b      	ldr	r3, [r3, #32]
 800190c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001910:	4a27      	ldr	r2, [pc, #156]	; (80019b0 <GPIO_Full_Init+0x294>)
 8001912:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8001916:	6213      	str	r3, [r2, #32]
MODIFY_REG(GPIOA->AFR[1], GPIO_AFRH_AFSEL9_Msk, 7 << GPIO_AFRH_AFSEL9_Pos);
 8001918:	4b25      	ldr	r3, [pc, #148]	; (80019b0 <GPIO_Full_Init+0x294>)
 800191a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001920:	4a23      	ldr	r2, [pc, #140]	; (80019b0 <GPIO_Full_Init+0x294>)
 8001922:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001926:	6253      	str	r3, [r2, #36]	; 0x24
MODIFY_REG(GPIOA->AFR[1], GPIO_AFRH_AFSEL10_Msk, 7 << GPIO_AFRH_AFSEL10_Pos);
 8001928:	4b21      	ldr	r3, [pc, #132]	; (80019b0 <GPIO_Full_Init+0x294>)
 800192a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001930:	4a1f      	ldr	r2, [pc, #124]	; (80019b0 <GPIO_Full_Init+0x294>)
 8001932:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001936:	6253      	str	r3, [r2, #36]	; 0x24
//USART 6 Alternate Function Register = AFRH 8
MODIFY_REG(GPIOA->MODER, GPIO_MODER_MODER11_Msk, 2 << GPIO_MODER_MODER11_Pos);
 8001938:	4b1d      	ldr	r3, [pc, #116]	; (80019b0 <GPIO_Full_Init+0x294>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001940:	4a1b      	ldr	r2, [pc, #108]	; (80019b0 <GPIO_Full_Init+0x294>)
 8001942:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001946:	6013      	str	r3, [r2, #0]
MODIFY_REG(GPIOA->MODER, GPIO_MODER_MODER12_Msk, 2 << GPIO_MODER_MODER12_Pos);
 8001948:	4b19      	ldr	r3, [pc, #100]	; (80019b0 <GPIO_Full_Init+0x294>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001950:	4a17      	ldr	r2, [pc, #92]	; (80019b0 <GPIO_Full_Init+0x294>)
 8001952:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001956:	6013      	str	r3, [r2, #0]
MODIFY_REG(GPIOA->AFR[1], GPIO_AFRH_AFSEL11_Msk, 8 << GPIO_AFRH_AFSEL11_Pos);
 8001958:	4b15      	ldr	r3, [pc, #84]	; (80019b0 <GPIO_Full_Init+0x294>)
 800195a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001960:	4a13      	ldr	r2, [pc, #76]	; (80019b0 <GPIO_Full_Init+0x294>)
 8001962:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001966:	6253      	str	r3, [r2, #36]	; 0x24
MODIFY_REG(GPIOA->AFR[1], GPIO_AFRH_AFSEL12_Msk, 8 << GPIO_AFRH_AFSEL12_Pos);
 8001968:	4b11      	ldr	r3, [pc, #68]	; (80019b0 <GPIO_Full_Init+0x294>)
 800196a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196c:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8001970:	4a0f      	ldr	r2, [pc, #60]	; (80019b0 <GPIO_Full_Init+0x294>)
 8001972:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001976:	6253      	str	r3, [r2, #36]	; 0x24

/* --------------- DHT11 --------------- */
//PORT A15 | INPUT
MODIFY_REG(GPIOA->MODER, GPIO_MODER_MODER15_Msk, 0 << GPIO_MODER_MODER15_Pos);
 8001978:	4b0d      	ldr	r3, [pc, #52]	; (80019b0 <GPIO_Full_Init+0x294>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a0c      	ldr	r2, [pc, #48]	; (80019b0 <GPIO_Full_Init+0x294>)
 800197e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001982:	6013      	str	r3, [r2, #0]
MODIFY_REG(GPIOA->OSPEEDR, GPIO_OSPEEDR_OSPEED15_Msk, 2 << GPIO_OSPEEDR_OSPEED15_Pos);
 8001984:	4b0a      	ldr	r3, [pc, #40]	; (80019b0 <GPIO_Full_Init+0x294>)
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800198c:	4a08      	ldr	r2, [pc, #32]	; (80019b0 <GPIO_Full_Init+0x294>)
 800198e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001992:	6093      	str	r3, [r2, #8]

/* --------------- SERVO --------------- */
//PORT B6 | ALTERNATE FUNCTION 2 = TIMER4 CHANNEL 1
MODIFY_REG(GPIOB->MODER, GPIO_MODER_MODER6_Msk, 2 << GPIO_MODER_MODER6_Pos);
 8001994:	4b07      	ldr	r3, [pc, #28]	; (80019b4 <GPIO_Full_Init+0x298>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800199c:	4a05      	ldr	r2, [pc, #20]	; (80019b4 <GPIO_Full_Init+0x298>)
 800199e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019a2:	6013      	str	r3, [r2, #0]
MODIFY_REG(GPIOB->AFR[0], GPIO_AFRL_AFSEL6_Msk, 2 << GPIO_AFRL_AFSEL6_Pos);
 80019a4:	4b03      	ldr	r3, [pc, #12]	; (80019b4 <GPIO_Full_Init+0x298>)
 80019a6:	6a1b      	ldr	r3, [r3, #32]
 80019a8:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80019ac:	e006      	b.n	80019bc <GPIO_Full_Init+0x2a0>
 80019ae:	bf00      	nop
 80019b0:	40020000 	.word	0x40020000
 80019b4:	40020400 	.word	0x40020400
 80019b8:	40020800 	.word	0x40020800
 80019bc:	4a1f      	ldr	r2, [pc, #124]	; (8001a3c <GPIO_Full_Init+0x320>)
 80019be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019c2:	6213      	str	r3, [r2, #32]

/* --------------- SPEAKER --------------- */
//PORT B10 | ALTERNATE FUNCTION 1 = TIMER2 CHANNEL 3
MODIFY_REG(GPIOB->MODER, GPIO_MODER_MODER10_Msk, 2 << GPIO_MODER_MODER10_Pos);
 80019c4:	4b1d      	ldr	r3, [pc, #116]	; (8001a3c <GPIO_Full_Init+0x320>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80019cc:	4a1b      	ldr	r2, [pc, #108]	; (8001a3c <GPIO_Full_Init+0x320>)
 80019ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019d2:	6013      	str	r3, [r2, #0]
MODIFY_REG(GPIOB->AFR[1], GPIO_AFRH_AFSEL10_Msk, 1 << GPIO_AFRH_AFSEL10_Pos);
 80019d4:	4b19      	ldr	r3, [pc, #100]	; (8001a3c <GPIO_Full_Init+0x320>)
 80019d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80019dc:	4a17      	ldr	r2, [pc, #92]	; (8001a3c <GPIO_Full_Init+0x320>)
 80019de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019e2:	6253      	str	r3, [r2, #36]	; 0x24

/* --------------- IR RECEIVER --------------- */
//PORT A8 | INPUT
MODIFY_REG(GPIOA->MODER, GPIO_MODER_MODER8_Msk, 0 << GPIO_MODER_MODER8_Pos);
 80019e4:	4b16      	ldr	r3, [pc, #88]	; (8001a40 <GPIO_Full_Init+0x324>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a15      	ldr	r2, [pc, #84]	; (8001a40 <GPIO_Full_Init+0x324>)
 80019ea:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80019ee:	6013      	str	r3, [r2, #0]

/* --------------- KEYBOARD --------------- */
//Используется SPI 2. PB13: SCK PB14: MISO
//Mode: HalfDuplex-Master. Alternate High Register = AFRL5 (= SPI2)
MODIFY_REG(GPIOB->MODER, GPIO_MODER_MODER13_Msk, 2 << GPIO_MODER_MODER13_Pos);
 80019f0:	4b12      	ldr	r3, [pc, #72]	; (8001a3c <GPIO_Full_Init+0x320>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80019f8:	4a10      	ldr	r2, [pc, #64]	; (8001a3c <GPIO_Full_Init+0x320>)
 80019fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80019fe:	6013      	str	r3, [r2, #0]
MODIFY_REG(GPIOB->AFR[1], GPIO_AFRH_AFSEL13_Msk, 5 << GPIO_AFRH_AFSEL13_Pos);
 8001a00:	4b0e      	ldr	r3, [pc, #56]	; (8001a3c <GPIO_Full_Init+0x320>)
 8001a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a04:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001a08:	4a0c      	ldr	r2, [pc, #48]	; (8001a3c <GPIO_Full_Init+0x320>)
 8001a0a:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 8001a0e:	6253      	str	r3, [r2, #36]	; 0x24
MODIFY_REG(GPIOB->MODER, GPIO_MODER_MODER14_Msk, 2 << GPIO_MODER_MODER14_Pos);
 8001a10:	4b0a      	ldr	r3, [pc, #40]	; (8001a3c <GPIO_Full_Init+0x320>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001a18:	4a08      	ldr	r2, [pc, #32]	; (8001a3c <GPIO_Full_Init+0x320>)
 8001a1a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001a1e:	6013      	str	r3, [r2, #0]
MODIFY_REG(GPIOB->AFR[1], GPIO_AFRH_AFSEL14_Msk, 5 << GPIO_AFRH_AFSEL14_Pos);
 8001a20:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <GPIO_Full_Init+0x320>)
 8001a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a24:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001a28:	4a04      	ldr	r2, [pc, #16]	; (8001a3c <GPIO_Full_Init+0x320>)
 8001a2a:	f043 63a0 	orr.w	r3, r3, #83886080	; 0x5000000
 8001a2e:	6253      	str	r3, [r2, #36]	; 0x24

}
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	40020400 	.word	0x40020400
 8001a40:	40020000 	.word	0x40020000

08001a44 <I2C_Master_Send>:
    //Второй адрес = 0x0
    MODIFY_REG(I2C1->OAR2, I2C_OAR2_ADD2, 0);
}

//I2C Master отправка данных
void I2C_Master_Send(uint8_t addr, uint8_t* data, uint16_t size) {
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	6039      	str	r1, [r7, #0]
 8001a4e:	71fb      	strb	r3, [r7, #7]
 8001a50:	4613      	mov	r3, r2
 8001a52:	80bb      	strh	r3, [r7, #4]
    //Отключить POS
    CLEAR_BIT(I2C1->CR1, I2C_CR1_POS);
 8001a54:	4b2c      	ldr	r3, [pc, #176]	; (8001b08 <I2C_Master_Send+0xc4>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a2b      	ldr	r2, [pc, #172]	; (8001b08 <I2C_Master_Send+0xc4>)
 8001a5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001a5e:	6013      	str	r3, [r2, #0]
    //Включить генерацию ACK
    MODIFY_REG(I2C1->CR1, I2C_CR1_ACK, I2C_CR1_ACK);
 8001a60:	4b29      	ldr	r3, [pc, #164]	; (8001b08 <I2C_Master_Send+0xc4>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a28      	ldr	r2, [pc, #160]	; (8001b08 <I2C_Master_Send+0xc4>)
 8001a66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a6a:	6013      	str	r3, [r2, #0]
    //Генерация START
    SET_BIT(I2C1->CR1, I2C_CR1_START);
 8001a6c:	4b26      	ldr	r3, [pc, #152]	; (8001b08 <I2C_Master_Send+0xc4>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a25      	ldr	r2, [pc, #148]	; (8001b08 <I2C_Master_Send+0xc4>)
 8001a72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a76:	6013      	str	r3, [r2, #0]
    //Ожидаем окончания генерации START
    while (!READ_BIT(I2C1->SR1, I2C_SR1_SB)){};
 8001a78:	bf00      	nop
 8001a7a:	4b23      	ldr	r3, [pc, #140]	; (8001b08 <I2C_Master_Send+0xc4>)
 8001a7c:	695b      	ldr	r3, [r3, #20]
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d0f9      	beq.n	8001a7a <I2C_Master_Send+0x36>
    (void) I2C1->SR1;
 8001a86:	4b20      	ldr	r3, [pc, #128]	; (8001b08 <I2C_Master_Send+0xc4>)
 8001a88:	695b      	ldr	r3, [r3, #20]
    //Передача адреса
    MODIFY_REG(I2C1->DR, I2C_DR_DR, (addr<<1) | 0x00);
 8001a8a:	4b1f      	ldr	r3, [pc, #124]	; (8001b08 <I2C_Master_Send+0xc4>)
 8001a8c:	691b      	ldr	r3, [r3, #16]
 8001a8e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001a92:	79fa      	ldrb	r2, [r7, #7]
 8001a94:	0052      	lsls	r2, r2, #1
 8001a96:	4611      	mov	r1, r2
 8001a98:	4a1b      	ldr	r2, [pc, #108]	; (8001b08 <I2C_Master_Send+0xc4>)
 8001a9a:	430b      	orrs	r3, r1
 8001a9c:	6113      	str	r3, [r2, #16]
    while (!READ_BIT(I2C1->SR1, I2C_SR1_ADDR)){};
 8001a9e:	bf00      	nop
 8001aa0:	4b19      	ldr	r3, [pc, #100]	; (8001b08 <I2C_Master_Send+0xc4>)
 8001aa2:	695b      	ldr	r3, [r3, #20]
 8001aa4:	f003 0302 	and.w	r3, r3, #2
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d0f9      	beq.n	8001aa0 <I2C_Master_Send+0x5c>
    (void) I2C1->SR1;
 8001aac:	4b16      	ldr	r3, [pc, #88]	; (8001b08 <I2C_Master_Send+0xc4>)
 8001aae:	695b      	ldr	r3, [r3, #20]
    (void) I2C1->SR2;
 8001ab0:	4b15      	ldr	r3, [pc, #84]	; (8001b08 <I2C_Master_Send+0xc4>)
 8001ab2:	699b      	ldr	r3, [r3, #24]
    //Передача байтов данных
    for(int i = 0; i < size; i++) {
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	e015      	b.n	8001ae6 <I2C_Master_Send+0xa2>
        MODIFY_REG(I2C1->DR, I2C_DR_DR, data[i]);
 8001aba:	4b13      	ldr	r3, [pc, #76]	; (8001b08 <I2C_Master_Send+0xc4>)
 8001abc:	691b      	ldr	r3, [r3, #16]
 8001abe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001ac2:	68fa      	ldr	r2, [r7, #12]
 8001ac4:	6839      	ldr	r1, [r7, #0]
 8001ac6:	440a      	add	r2, r1
 8001ac8:	7812      	ldrb	r2, [r2, #0]
 8001aca:	4611      	mov	r1, r2
 8001acc:	4a0e      	ldr	r2, [pc, #56]	; (8001b08 <I2C_Master_Send+0xc4>)
 8001ace:	430b      	orrs	r3, r1
 8001ad0:	6113      	str	r3, [r2, #16]
        while (!READ_BIT(I2C1->SR1, I2C_SR1_TXE)){};
 8001ad2:	bf00      	nop
 8001ad4:	4b0c      	ldr	r3, [pc, #48]	; (8001b08 <I2C_Master_Send+0xc4>)
 8001ad6:	695b      	ldr	r3, [r3, #20]
 8001ad8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d0f9      	beq.n	8001ad4 <I2C_Master_Send+0x90>
    for(int i = 0; i < size; i++) {
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	60fb      	str	r3, [r7, #12]
 8001ae6:	88bb      	ldrh	r3, [r7, #4]
 8001ae8:	68fa      	ldr	r2, [r7, #12]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	dbe5      	blt.n	8001aba <I2C_Master_Send+0x76>
    }
    //Конец передачи. Генерация STOP
    SET_BIT(I2C1->CR1, I2C_CR1_STOP);
 8001aee:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <I2C_Master_Send+0xc4>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a05      	ldr	r2, [pc, #20]	; (8001b08 <I2C_Master_Send+0xc4>)
 8001af4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001af8:	6013      	str	r3, [r2, #0]
}
 8001afa:	bf00      	nop
 8001afc:	3714      	adds	r7, #20
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	40005400 	.word	0x40005400

08001b0c <I2C_Master_SendReg>:

//I2C Master отправка данных с регистром
void I2C_Master_SendReg(uint8_t addr, uint8_t reg_addr, uint8_t* data, uint16_t size) {
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	603a      	str	r2, [r7, #0]
 8001b14:	461a      	mov	r2, r3
 8001b16:	4603      	mov	r3, r0
 8001b18:	71fb      	strb	r3, [r7, #7]
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	71bb      	strb	r3, [r7, #6]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	80bb      	strh	r3, [r7, #4]
    //Отключить POS
    CLEAR_BIT(I2C1->CR1, I2C_CR1_POS);
 8001b22:	4b34      	ldr	r3, [pc, #208]	; (8001bf4 <I2C_Master_SendReg+0xe8>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a33      	ldr	r2, [pc, #204]	; (8001bf4 <I2C_Master_SendReg+0xe8>)
 8001b28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001b2c:	6013      	str	r3, [r2, #0]
    //Включить генерацию ACK
    MODIFY_REG(I2C1->CR1, I2C_CR1_ACK, I2C_CR1_ACK);
 8001b2e:	4b31      	ldr	r3, [pc, #196]	; (8001bf4 <I2C_Master_SendReg+0xe8>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a30      	ldr	r2, [pc, #192]	; (8001bf4 <I2C_Master_SendReg+0xe8>)
 8001b34:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b38:	6013      	str	r3, [r2, #0]
    //Генерация START
    SET_BIT(I2C1->CR1, I2C_CR1_START);
 8001b3a:	4b2e      	ldr	r3, [pc, #184]	; (8001bf4 <I2C_Master_SendReg+0xe8>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a2d      	ldr	r2, [pc, #180]	; (8001bf4 <I2C_Master_SendReg+0xe8>)
 8001b40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b44:	6013      	str	r3, [r2, #0]
    //Ожидаем окончания генерации START
    while (!READ_BIT(I2C1->SR1, I2C_SR1_SB)){};
 8001b46:	bf00      	nop
 8001b48:	4b2a      	ldr	r3, [pc, #168]	; (8001bf4 <I2C_Master_SendReg+0xe8>)
 8001b4a:	695b      	ldr	r3, [r3, #20]
 8001b4c:	f003 0301 	and.w	r3, r3, #1
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d0f9      	beq.n	8001b48 <I2C_Master_SendReg+0x3c>
    (void) I2C1->SR1;
 8001b54:	4b27      	ldr	r3, [pc, #156]	; (8001bf4 <I2C_Master_SendReg+0xe8>)
 8001b56:	695b      	ldr	r3, [r3, #20]
    //Передача адреса
    MODIFY_REG(I2C1->DR, I2C_DR_DR, (addr<<1) | 0x00);
 8001b58:	4b26      	ldr	r3, [pc, #152]	; (8001bf4 <I2C_Master_SendReg+0xe8>)
 8001b5a:	691b      	ldr	r3, [r3, #16]
 8001b5c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001b60:	79fa      	ldrb	r2, [r7, #7]
 8001b62:	0052      	lsls	r2, r2, #1
 8001b64:	4611      	mov	r1, r2
 8001b66:	4a23      	ldr	r2, [pc, #140]	; (8001bf4 <I2C_Master_SendReg+0xe8>)
 8001b68:	430b      	orrs	r3, r1
 8001b6a:	6113      	str	r3, [r2, #16]
    while (!READ_BIT(I2C1->SR1, I2C_SR1_ADDR)){};
 8001b6c:	bf00      	nop
 8001b6e:	4b21      	ldr	r3, [pc, #132]	; (8001bf4 <I2C_Master_SendReg+0xe8>)
 8001b70:	695b      	ldr	r3, [r3, #20]
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d0f9      	beq.n	8001b6e <I2C_Master_SendReg+0x62>
    (void) I2C1->SR1;
 8001b7a:	4b1e      	ldr	r3, [pc, #120]	; (8001bf4 <I2C_Master_SendReg+0xe8>)
 8001b7c:	695b      	ldr	r3, [r3, #20]
    (void) I2C1->SR2;
 8001b7e:	4b1d      	ldr	r3, [pc, #116]	; (8001bf4 <I2C_Master_SendReg+0xe8>)
 8001b80:	699b      	ldr	r3, [r3, #24]
    //Передача адреса регистра
    MODIFY_REG(I2C1->DR,  I2C_DR_DR, reg_addr);
 8001b82:	4b1c      	ldr	r3, [pc, #112]	; (8001bf4 <I2C_Master_SendReg+0xe8>)
 8001b84:	691b      	ldr	r3, [r3, #16]
 8001b86:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8001b8a:	79bb      	ldrb	r3, [r7, #6]
 8001b8c:	4919      	ldr	r1, [pc, #100]	; (8001bf4 <I2C_Master_SendReg+0xe8>)
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	610b      	str	r3, [r1, #16]
    while (!READ_BIT(I2C1->SR1, I2C_SR1_TXE)){};
 8001b92:	bf00      	nop
 8001b94:	4b17      	ldr	r3, [pc, #92]	; (8001bf4 <I2C_Master_SendReg+0xe8>)
 8001b96:	695b      	ldr	r3, [r3, #20]
 8001b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d0f9      	beq.n	8001b94 <I2C_Master_SendReg+0x88>
    //Передача байтов данных
    for(int i = 0; i < size; i++) {
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	e015      	b.n	8001bd2 <I2C_Master_SendReg+0xc6>
        MODIFY_REG(I2C1->DR, I2C_DR_DR, data[i]);
 8001ba6:	4b13      	ldr	r3, [pc, #76]	; (8001bf4 <I2C_Master_SendReg+0xe8>)
 8001ba8:	691b      	ldr	r3, [r3, #16]
 8001baa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	6839      	ldr	r1, [r7, #0]
 8001bb2:	440a      	add	r2, r1
 8001bb4:	7812      	ldrb	r2, [r2, #0]
 8001bb6:	4611      	mov	r1, r2
 8001bb8:	4a0e      	ldr	r2, [pc, #56]	; (8001bf4 <I2C_Master_SendReg+0xe8>)
 8001bba:	430b      	orrs	r3, r1
 8001bbc:	6113      	str	r3, [r2, #16]
        while (!READ_BIT(I2C1->SR1, I2C_SR1_TXE)){};
 8001bbe:	bf00      	nop
 8001bc0:	4b0c      	ldr	r3, [pc, #48]	; (8001bf4 <I2C_Master_SendReg+0xe8>)
 8001bc2:	695b      	ldr	r3, [r3, #20]
 8001bc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d0f9      	beq.n	8001bc0 <I2C_Master_SendReg+0xb4>
    for(int i = 0; i < size; i++) {
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	3301      	adds	r3, #1
 8001bd0:	60fb      	str	r3, [r7, #12]
 8001bd2:	88bb      	ldrh	r3, [r7, #4]
 8001bd4:	68fa      	ldr	r2, [r7, #12]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	dbe5      	blt.n	8001ba6 <I2C_Master_SendReg+0x9a>
    }
    //Конец передачи. Генерация STOP
    SET_BIT(I2C1->CR1, I2C_CR1_STOP);
 8001bda:	4b06      	ldr	r3, [pc, #24]	; (8001bf4 <I2C_Master_SendReg+0xe8>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a05      	ldr	r2, [pc, #20]	; (8001bf4 <I2C_Master_SendReg+0xe8>)
 8001be0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001be4:	6013      	str	r3, [r2, #0]
}
 8001be6:	bf00      	nop
 8001be8:	3714      	adds	r7, #20
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	40005400 	.word	0x40005400

08001bf8 <I2C_Master_Read>:

//I2C Master получение данных
void I2C_Master_Read(uint8_t addr, uint8_t* data, uint16_t size) {
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	6039      	str	r1, [r7, #0]
 8001c02:	71fb      	strb	r3, [r7, #7]
 8001c04:	4613      	mov	r3, r2
 8001c06:	80bb      	strh	r3, [r7, #4]
    //Отключить POS
    CLEAR_BIT(I2C1->CR1, I2C_CR1_POS);
 8001c08:	4b3a      	ldr	r3, [pc, #232]	; (8001cf4 <I2C_Master_Read+0xfc>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a39      	ldr	r2, [pc, #228]	; (8001cf4 <I2C_Master_Read+0xfc>)
 8001c0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001c12:	6013      	str	r3, [r2, #0]
    //Включить генерацию ACK
    MODIFY_REG(I2C1->CR1, I2C_CR1_ACK, I2C_CR1_ACK);
 8001c14:	4b37      	ldr	r3, [pc, #220]	; (8001cf4 <I2C_Master_Read+0xfc>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a36      	ldr	r2, [pc, #216]	; (8001cf4 <I2C_Master_Read+0xfc>)
 8001c1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c1e:	6013      	str	r3, [r2, #0]
    //Генерация START
    SET_BIT(I2C1->CR1, I2C_CR1_START);
 8001c20:	4b34      	ldr	r3, [pc, #208]	; (8001cf4 <I2C_Master_Read+0xfc>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a33      	ldr	r2, [pc, #204]	; (8001cf4 <I2C_Master_Read+0xfc>)
 8001c26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c2a:	6013      	str	r3, [r2, #0]
    //Ожидаем окончания генерации START
    while (!READ_BIT(I2C1->SR1, I2C_SR1_SB)){};
 8001c2c:	bf00      	nop
 8001c2e:	4b31      	ldr	r3, [pc, #196]	; (8001cf4 <I2C_Master_Read+0xfc>)
 8001c30:	695b      	ldr	r3, [r3, #20]
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d0f9      	beq.n	8001c2e <I2C_Master_Read+0x36>
    (void) I2C1->SR1;
 8001c3a:	4b2e      	ldr	r3, [pc, #184]	; (8001cf4 <I2C_Master_Read+0xfc>)
 8001c3c:	695b      	ldr	r3, [r3, #20]
    //Передача адреса
    MODIFY_REG(I2C1->DR, I2C_DR_DR, (addr<<1) | 0x01);
 8001c3e:	4b2d      	ldr	r3, [pc, #180]	; (8001cf4 <I2C_Master_Read+0xfc>)
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c46:	79fa      	ldrb	r2, [r7, #7]
 8001c48:	0052      	lsls	r2, r2, #1
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	4a29      	ldr	r2, [pc, #164]	; (8001cf4 <I2C_Master_Read+0xfc>)
 8001c4e:	f043 0301 	orr.w	r3, r3, #1
 8001c52:	6113      	str	r3, [r2, #16]
    while (!READ_BIT(I2C1->SR1, I2C_SR1_ADDR)){};
 8001c54:	bf00      	nop
 8001c56:	4b27      	ldr	r3, [pc, #156]	; (8001cf4 <I2C_Master_Read+0xfc>)
 8001c58:	695b      	ldr	r3, [r3, #20]
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d0f9      	beq.n	8001c56 <I2C_Master_Read+0x5e>
    (void) I2C1->SR1;
 8001c62:	4b24      	ldr	r3, [pc, #144]	; (8001cf4 <I2C_Master_Read+0xfc>)
 8001c64:	695b      	ldr	r3, [r3, #20]
    (void) I2C1->SR2;
 8001c66:	4b23      	ldr	r3, [pc, #140]	; (8001cf4 <I2C_Master_Read+0xfc>)
 8001c68:	699b      	ldr	r3, [r3, #24]
    //Прием данных
    for(int i = 0; i < size; i++) {
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	e030      	b.n	8001cd2 <I2C_Master_Read+0xda>
        if(i < (size-1) ) {
 8001c70:	88bb      	ldrh	r3, [r7, #4]
 8001c72:	3b01      	subs	r3, #1
 8001c74:	68fa      	ldr	r2, [r7, #12]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	da0e      	bge.n	8001c98 <I2C_Master_Read+0xa0>
            while (!READ_BIT(I2C1->SR1, I2C_SR1_RXNE)){};
 8001c7a:	bf00      	nop
 8001c7c:	4b1d      	ldr	r3, [pc, #116]	; (8001cf4 <I2C_Master_Read+0xfc>)
 8001c7e:	695b      	ldr	r3, [r3, #20]
 8001c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d0f9      	beq.n	8001c7c <I2C_Master_Read+0x84>
            data[i] = READ_BIT(I2C1->DR, I2C_DR_DR);
 8001c88:	4b1a      	ldr	r3, [pc, #104]	; (8001cf4 <I2C_Master_Read+0xfc>)
 8001c8a:	6919      	ldr	r1, [r3, #16]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	683a      	ldr	r2, [r7, #0]
 8001c90:	4413      	add	r3, r2
 8001c92:	b2ca      	uxtb	r2, r1
 8001c94:	701a      	strb	r2, [r3, #0]
 8001c96:	e019      	b.n	8001ccc <I2C_Master_Read+0xd4>
        }
        else {
            CLEAR_BIT(I2C1->CR1, I2C_CR1_ACK);
 8001c98:	4b16      	ldr	r3, [pc, #88]	; (8001cf4 <I2C_Master_Read+0xfc>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a15      	ldr	r2, [pc, #84]	; (8001cf4 <I2C_Master_Read+0xfc>)
 8001c9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001ca2:	6013      	str	r3, [r2, #0]
            SET_BIT(I2C1->CR1, I2C_CR1_STOP);
 8001ca4:	4b13      	ldr	r3, [pc, #76]	; (8001cf4 <I2C_Master_Read+0xfc>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a12      	ldr	r2, [pc, #72]	; (8001cf4 <I2C_Master_Read+0xfc>)
 8001caa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cae:	6013      	str	r3, [r2, #0]
            while (!READ_BIT(I2C1->SR1, I2C_SR1_RXNE)){};
 8001cb0:	bf00      	nop
 8001cb2:	4b10      	ldr	r3, [pc, #64]	; (8001cf4 <I2C_Master_Read+0xfc>)
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d0f9      	beq.n	8001cb2 <I2C_Master_Read+0xba>
            data[i] = READ_BIT(I2C1->DR, I2C_DR_DR);
 8001cbe:	4b0d      	ldr	r3, [pc, #52]	; (8001cf4 <I2C_Master_Read+0xfc>)
 8001cc0:	6919      	ldr	r1, [r3, #16]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	683a      	ldr	r2, [r7, #0]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	b2ca      	uxtb	r2, r1
 8001cca:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < size; i++) {
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	60fb      	str	r3, [r7, #12]
 8001cd2:	88bb      	ldrh	r3, [r7, #4]
 8001cd4:	68fa      	ldr	r2, [r7, #12]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	dbca      	blt.n	8001c70 <I2C_Master_Read+0x78>
        }
    }

    //Конец передачи. Генерация STOP
    SET_BIT(I2C1->CR1, I2C_CR1_STOP);
 8001cda:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <I2C_Master_Read+0xfc>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a05      	ldr	r2, [pc, #20]	; (8001cf4 <I2C_Master_Read+0xfc>)
 8001ce0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ce4:	6013      	str	r3, [r2, #0]
}
 8001ce6:	bf00      	nop
 8001ce8:	3714      	adds	r7, #20
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	40005400 	.word	0x40005400

08001cf8 <I2C_Scan>:
    //Конец передачи. Генерация STOP
    SET_BIT(I2C1->CR1, I2C_CR1_STOP);
}

//Сканнер устройств (вывод в отладку)
void I2C_Scan() {
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
	printf("Scanning I2C bus...\r\n");
 8001cfe:	4836      	ldr	r0, [pc, #216]	; (8001dd8 <I2C_Scan+0xe0>)
 8001d00:	f003 f80c 	bl	8004d1c <puts>
    for (uint16_t i2c_dev_num = 0; i2c_dev_num < 128; i2c_dev_num++) {
 8001d04:	2300      	movs	r3, #0
 8001d06:	82fb      	strh	r3, [r7, #22]
 8001d08:	e05e      	b.n	8001dc8 <I2C_Scan+0xd0>
        //Отключить POS
        CLEAR_BIT(I2C1->CR1, I2C_CR1_POS);
 8001d0a:	4b34      	ldr	r3, [pc, #208]	; (8001ddc <I2C_Scan+0xe4>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a33      	ldr	r2, [pc, #204]	; (8001ddc <I2C_Scan+0xe4>)
 8001d10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001d14:	6013      	str	r3, [r2, #0]
        //Включить генерацию ACK
        MODIFY_REG(I2C1->CR1, I2C_CR1_ACK, I2C_CR1_ACK);
 8001d16:	4b31      	ldr	r3, [pc, #196]	; (8001ddc <I2C_Scan+0xe4>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a30      	ldr	r2, [pc, #192]	; (8001ddc <I2C_Scan+0xe4>)
 8001d1c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d20:	6013      	str	r3, [r2, #0]
        //Генерация START
        SET_BIT(I2C1->CR1, I2C_CR1_START);
 8001d22:	4b2e      	ldr	r3, [pc, #184]	; (8001ddc <I2C_Scan+0xe4>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a2d      	ldr	r2, [pc, #180]	; (8001ddc <I2C_Scan+0xe4>)
 8001d28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d2c:	6013      	str	r3, [r2, #0]
        //Ожидаем окончания генерации START
        while (!READ_BIT(I2C1->SR1, I2C_SR1_SB)){};
 8001d2e:	bf00      	nop
 8001d30:	4b2a      	ldr	r3, [pc, #168]	; (8001ddc <I2C_Scan+0xe4>)
 8001d32:	695b      	ldr	r3, [r3, #20]
 8001d34:	f003 0301 	and.w	r3, r3, #1
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d0f9      	beq.n	8001d30 <I2C_Scan+0x38>
        (void) I2C1->SR1;
 8001d3c:	4b27      	ldr	r3, [pc, #156]	; (8001ddc <I2C_Scan+0xe4>)
 8001d3e:	695b      	ldr	r3, [r3, #20]
        //Передача адреса
        I2C1->DR = i2c_dev_num << 1;
 8001d40:	8afb      	ldrh	r3, [r7, #22]
 8001d42:	005a      	lsls	r2, r3, #1
 8001d44:	4b25      	ldr	r3, [pc, #148]	; (8001ddc <I2C_Scan+0xe4>)
 8001d46:	611a      	str	r2, [r3, #16]
        //MODIFY_REG(I2C1->DR, I2C_DR_DR, (i2c_dev_num << 1) | 0x00);
        //Ждем отзыва
        timer_counter = 250;
 8001d48:	4b25      	ldr	r3, [pc, #148]	; (8001de0 <I2C_Scan+0xe8>)
 8001d4a:	22fa      	movs	r2, #250	; 0xfa
 8001d4c:	601a      	str	r2, [r3, #0]
        while ((READ_BIT(I2C1->SR1, I2C_SR1_ADDR)==0) && (READ_BIT(I2C1->SR1, I2C_SR1_AF)==0) ){
 8001d4e:	e003      	b.n	8001d58 <I2C_Scan+0x60>
        	if (!timer_counter)
 8001d50:	4b23      	ldr	r3, [pc, #140]	; (8001de0 <I2C_Scan+0xe8>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d00c      	beq.n	8001d72 <I2C_Scan+0x7a>
        while ((READ_BIT(I2C1->SR1, I2C_SR1_ADDR)==0) && (READ_BIT(I2C1->SR1, I2C_SR1_AF)==0) ){
 8001d58:	4b20      	ldr	r3, [pc, #128]	; (8001ddc <I2C_Scan+0xe4>)
 8001d5a:	695b      	ldr	r3, [r3, #20]
 8001d5c:	f003 0302 	and.w	r3, r3, #2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d107      	bne.n	8001d74 <I2C_Scan+0x7c>
 8001d64:	4b1d      	ldr	r3, [pc, #116]	; (8001ddc <I2C_Scan+0xe4>)
 8001d66:	695b      	ldr	r3, [r3, #20]
 8001d68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d0ef      	beq.n	8001d50 <I2C_Scan+0x58>
 8001d70:	e000      	b.n	8001d74 <I2C_Scan+0x7c>
        		break;
 8001d72:	bf00      	nop
        }
        //Если отозвалось
        if (READ_BIT(I2C1->SR1, I2C_SR1_ADDR)) {
 8001d74:	4b19      	ldr	r3, [pc, #100]	; (8001ddc <I2C_Scan+0xe4>)
 8001d76:	695b      	ldr	r3, [r3, #20]
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d014      	beq.n	8001daa <I2C_Scan+0xb2>
            SET_BIT(I2C1->CR1, I2C_CR1_STOP);
 8001d80:	4b16      	ldr	r3, [pc, #88]	; (8001ddc <I2C_Scan+0xe4>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a15      	ldr	r2, [pc, #84]	; (8001ddc <I2C_Scan+0xe4>)
 8001d86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d8a:	6013      	str	r3, [r2, #0]
            (void) I2C1->SR1;
 8001d8c:	4b13      	ldr	r3, [pc, #76]	; (8001ddc <I2C_Scan+0xe4>)
 8001d8e:	695b      	ldr	r3, [r3, #20]
            (void) I2C1->SR2;
 8001d90:	4b12      	ldr	r3, [pc, #72]	; (8001ddc <I2C_Scan+0xe4>)
 8001d92:	699b      	ldr	r3, [r3, #24]
            char msg[20];
            snprintf(msg, sizeof(msg), "Device 0x%02X\r\n", i2c_dev_num);
 8001d94:	8afb      	ldrh	r3, [r7, #22]
 8001d96:	4638      	mov	r0, r7
 8001d98:	4a12      	ldr	r2, [pc, #72]	; (8001de4 <I2C_Scan+0xec>)
 8001d9a:	2114      	movs	r1, #20
 8001d9c:	f002 ffc6 	bl	8004d2c <sniprintf>
            printf(msg);
 8001da0:	463b      	mov	r3, r7
 8001da2:	4618      	mov	r0, r3
 8001da4:	f002 ff54 	bl	8004c50 <iprintf>
 8001da8:	e00b      	b.n	8001dc2 <I2C_Scan+0xca>
        }
        else {
            SET_BIT(I2C1->CR1, I2C_CR1_STOP);
 8001daa:	4b0c      	ldr	r3, [pc, #48]	; (8001ddc <I2C_Scan+0xe4>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a0b      	ldr	r2, [pc, #44]	; (8001ddc <I2C_Scan+0xe4>)
 8001db0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001db4:	6013      	str	r3, [r2, #0]
            CLEAR_BIT(I2C1->SR1, I2C_SR1_AF);
 8001db6:	4b09      	ldr	r3, [pc, #36]	; (8001ddc <I2C_Scan+0xe4>)
 8001db8:	695b      	ldr	r3, [r3, #20]
 8001dba:	4a08      	ldr	r2, [pc, #32]	; (8001ddc <I2C_Scan+0xe4>)
 8001dbc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001dc0:	6153      	str	r3, [r2, #20]
    for (uint16_t i2c_dev_num = 0; i2c_dev_num < 128; i2c_dev_num++) {
 8001dc2:	8afb      	ldrh	r3, [r7, #22]
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	82fb      	strh	r3, [r7, #22]
 8001dc8:	8afb      	ldrh	r3, [r7, #22]
 8001dca:	2b7f      	cmp	r3, #127	; 0x7f
 8001dcc:	d99d      	bls.n	8001d0a <I2C_Scan+0x12>
        }
    }
}
 8001dce:	bf00      	nop
 8001dd0:	bf00      	nop
 8001dd2:	3718      	adds	r7, #24
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	080077b0 	.word	0x080077b0
 8001ddc:	40005400 	.word	0x40005400
 8001de0:	20000610 	.word	0x20000610
 8001de4:	080077c8 	.word	0x080077c8

08001de8 <Joystick_getCoords>:
/* Программный код для работы с джойстиком и регулятором */
#include "JR_Driver.h"

//Получить координаты джостика
void Joystick_getCoords(uint16_t* coords) {
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
    MODIFY_REG(ADC1->CR2, ADC_CR2_JSWSTART_Msk, 1 << ADC_CR2_JSWSTART_Pos);
 8001df0:	4b10      	ldr	r3, [pc, #64]	; (8001e34 <Joystick_getCoords+0x4c>)
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	4a0f      	ldr	r2, [pc, #60]	; (8001e34 <Joystick_getCoords+0x4c>)
 8001df6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001dfa:	6093      	str	r3, [r2, #8]
    while (READ_BIT(ADC1->SR, ADC_SR_JEOC_Msk) == 0) {};
 8001dfc:	bf00      	nop
 8001dfe:	4b0d      	ldr	r3, [pc, #52]	; (8001e34 <Joystick_getCoords+0x4c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0304 	and.w	r3, r3, #4
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d0f9      	beq.n	8001dfe <Joystick_getCoords+0x16>
    coords[0] = 4096 - READ_REG(ADC1->JDR1);
 8001e0a:	4b0a      	ldr	r3, [pc, #40]	; (8001e34 <Joystick_getCoords+0x4c>)
 8001e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8001e14:	b29a      	uxth	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	801a      	strh	r2, [r3, #0]
    coords[1] = READ_REG(ADC1->JDR2);
 8001e1a:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <Joystick_getCoords+0x4c>)
 8001e1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	3302      	adds	r3, #2
 8001e22:	b292      	uxth	r2, r2
 8001e24:	801a      	strh	r2, [r3, #0]
}
 8001e26:	bf00      	nop
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	40012000 	.word	0x40012000

08001e38 <Regulator_getValue>:
uint8_t Joystick_button() {
    return READ_BIT(GPIOA->IDR, GPIO_IDR_ID5_Msk);
}

//Возвращает текущее значение регулятора
uint16_t Regulator_getValue() {
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
    MODIFY_REG(ADC1->CR2, ADC_CR2_JSWSTART_Msk, 1 << ADC_CR2_JSWSTART_Pos);
 8001e3c:	4b0a      	ldr	r3, [pc, #40]	; (8001e68 <Regulator_getValue+0x30>)
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	4a09      	ldr	r2, [pc, #36]	; (8001e68 <Regulator_getValue+0x30>)
 8001e42:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e46:	6093      	str	r3, [r2, #8]
    while (READ_BIT(ADC1->SR, ADC_SR_JEOC_Msk) == 0) {}
 8001e48:	bf00      	nop
 8001e4a:	4b07      	ldr	r3, [pc, #28]	; (8001e68 <Regulator_getValue+0x30>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0304 	and.w	r3, r3, #4
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d0f9      	beq.n	8001e4a <Regulator_getValue+0x12>
    return READ_REG(ADC1->JDR3);
 8001e56:	4b04      	ldr	r3, [pc, #16]	; (8001e68 <Regulator_getValue+0x30>)
 8001e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5a:	b29b      	uxth	r3, r3
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	40012000 	.word	0x40012000

08001e6c <LCD_SendData>:
#include "timer_delay.h"
#include "I2C.h"
uint8_t LCD_backlight_status = (1 << 3); //Флаг подсветки дисплея

//Отправка байта данных дисплею
void LCD_SendData(uint8_t data, uint8_t lcd_rs) {
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	460a      	mov	r2, r1
 8001e76:	71fb      	strb	r3, [r7, #7]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	71bb      	strb	r3, [r7, #6]
    uint8_t upper = data & 0xF0;
 8001e7c:	79fb      	ldrb	r3, [r7, #7]
 8001e7e:	f023 030f 	bic.w	r3, r3, #15
 8001e82:	73fb      	strb	r3, [r7, #15]
    uint8_t lower = (data << 4) & 0xF0;
 8001e84:	79fb      	ldrb	r3, [r7, #7]
 8001e86:	011b      	lsls	r3, r3, #4
 8001e88:	73bb      	strb	r3, [r7, #14]
    uint8_t data_packet[4];
    data_packet[0] = upper|lcd_rs|LCD_backlight_status|PIN_E_ON;
 8001e8a:	7bfa      	ldrb	r2, [r7, #15]
 8001e8c:	79bb      	ldrb	r3, [r7, #6]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	b2da      	uxtb	r2, r3
 8001e92:	4b1a      	ldr	r3, [pc, #104]	; (8001efc <LCD_SendData+0x90>)
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	f043 0304 	orr.w	r3, r3, #4
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	723b      	strb	r3, [r7, #8]
    data_packet[1] = upper|lcd_rs|LCD_backlight_status;
 8001ea2:	7bfa      	ldrb	r2, [r7, #15]
 8001ea4:	79bb      	ldrb	r3, [r7, #6]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	b2da      	uxtb	r2, r3
 8001eaa:	4b14      	ldr	r3, [pc, #80]	; (8001efc <LCD_SendData+0x90>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	727b      	strb	r3, [r7, #9]
    data_packet[2] = lower|lcd_rs|LCD_backlight_status|PIN_E_ON;
 8001eb4:	7bba      	ldrb	r2, [r7, #14]
 8001eb6:	79bb      	ldrb	r3, [r7, #6]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	b2da      	uxtb	r2, r3
 8001ebc:	4b0f      	ldr	r3, [pc, #60]	; (8001efc <LCD_SendData+0x90>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	f043 0304 	orr.w	r3, r3, #4
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	72bb      	strb	r3, [r7, #10]
    data_packet[3] = lower|lcd_rs|LCD_backlight_status;
 8001ecc:	7bba      	ldrb	r2, [r7, #14]
 8001ece:	79bb      	ldrb	r3, [r7, #6]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	b2da      	uxtb	r2, r3
 8001ed4:	4b09      	ldr	r3, [pc, #36]	; (8001efc <LCD_SendData+0x90>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	72fb      	strb	r3, [r7, #11]

    I2C_Master_Send(0x27, data_packet, sizeof(data_packet));
 8001ede:	f107 0308 	add.w	r3, r7, #8
 8001ee2:	2204      	movs	r2, #4
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	2027      	movs	r0, #39	; 0x27
 8001ee8:	f7ff fdac 	bl	8001a44 <I2C_Master_Send>
    delay_us(2000);
 8001eec:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001ef0:	f001 f84e 	bl	8002f90 <delay_us>
    return;
 8001ef4:	bf00      	nop
}
 8001ef6:	3710      	adds	r7, #16
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	20000001 	.word	0x20000001

08001f00 <LCD_Init>:

//Инициализация дисплея
void LCD_Init() {
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
	LCD_SendData(0b00110011, 0);
 8001f04:	2100      	movs	r1, #0
 8001f06:	2033      	movs	r0, #51	; 0x33
 8001f08:	f7ff ffb0 	bl	8001e6c <LCD_SendData>
	LCD_SendData(0b00110010, 0);
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	2032      	movs	r0, #50	; 0x32
 8001f10:	f7ff ffac 	bl	8001e6c <LCD_SendData>
    LCD_SendData(0x28, 0); //включить + не отобр курсор + не миг курсор
 8001f14:	2100      	movs	r1, #0
 8001f16:	2028      	movs	r0, #40	; 0x28
 8001f18:	f7ff ffa8 	bl	8001e6c <LCD_SendData>
    LCD_SendData(0x08, 0); //Вывод слева-направо, сдвиг экрана выкл
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	2008      	movs	r0, #8
 8001f20:	f7ff ffa4 	bl	8001e6c <LCD_SendData>
    LCD_SendData(0b00000001, 0); //очистка+курсор в начало
 8001f24:	2100      	movs	r1, #0
 8001f26:	2001      	movs	r0, #1
 8001f28:	f7ff ffa0 	bl	8001e6c <LCD_SendData>
    LCD_SendData(0x06,0);   // установка курсора в начале строки
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	2006      	movs	r0, #6
 8001f30:	f7ff ff9c 	bl	8001e6c <LCD_SendData>
    LCD_SendData(0x0C, 0);
 8001f34:	2100      	movs	r1, #0
 8001f36:	200c      	movs	r0, #12
 8001f38:	f7ff ff98 	bl	8001e6c <LCD_SendData>
    LCD_SendData(0x02, 0);
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	2002      	movs	r0, #2
 8001f40:	f7ff ff94 	bl	8001e6c <LCD_SendData>
}
 8001f44:	bf00      	nop
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <LCD_Print>:
    LCD_backlight_status = 0 | (state << 3); //меняем значение P3
    I2C_Master_Send(0x27, &LCD_backlight_status, 1);
}

//Вывод сообщения на экран
void LCD_Print(char *message) {
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
    while(*message) {
 8001f50:	e008      	b.n	8001f64 <LCD_Print+0x1c>
        LCD_SendData((uint8_t)(*message), 1);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	2101      	movs	r1, #1
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff ff87 	bl	8001e6c <LCD_SendData>
        message++;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	3301      	adds	r3, #1
 8001f62:	607b      	str	r3, [r7, #4]
    while(*message) {
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d1f2      	bne.n	8001f52 <LCD_Print+0xa>
    }
}
 8001f6c:	bf00      	nop
 8001f6e:	bf00      	nop
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <LCD_SetCursor>:
void LCD_CursorInBegin() {
        LCD_SendData(0b00000010, 0);
}

//Установка курсора
void LCD_SetCursor(uint8_t row, uint8_t col) {
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b084      	sub	sp, #16
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	460a      	mov	r2, r1
 8001f80:	71fb      	strb	r3, [r7, #7]
 8001f82:	4613      	mov	r3, r2
 8001f84:	71bb      	strb	r3, [r7, #6]
	//Команда 8 = запись адреса DDRAM
	uint8_t cursor = 0x40*row | col;
 8001f86:	79fb      	ldrb	r3, [r7, #7]
 8001f88:	019b      	lsls	r3, r3, #6
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	b25a      	sxtb	r2, r3
 8001f8e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	b25b      	sxtb	r3, r3
 8001f96:	73fb      	strb	r3, [r7, #15]
	LCD_SendData(0x80 | cursor, 0);
 8001f98:	7bfb      	ldrb	r3, [r7, #15]
 8001f9a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff ff62 	bl	8001e6c <LCD_SendData>
}
 8001fa8:	bf00      	nop
 8001faa:	3710      	adds	r7, #16
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <LCD_Clear>:

//Очистка дисплея
void LCD_Clear() {
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
    LCD_SendData(0b00000001, 0);
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	2001      	movs	r0, #1
 8001fb8:	f7ff ff58 	bl	8001e6c <LCD_SendData>
}
 8001fbc:	bf00      	nop
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <LED_Init>:
#include "LED_Driver.h"

uint16_t led_state = {0};

void LED_Init() {
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
  uint8_t cmd[2] = {3,0};
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	80bb      	strh	r3, [r7, #4]
  I2C_Master_Send(0x70, cmd, 2);
 8001fca:	1d3b      	adds	r3, r7, #4
 8001fcc:	2202      	movs	r2, #2
 8001fce:	4619      	mov	r1, r3
 8001fd0:	2070      	movs	r0, #112	; 0x70
 8001fd2:	f7ff fd37 	bl	8001a44 <I2C_Master_Send>
  I2C_Master_Send(0x73, cmd, 2);
 8001fd6:	1d3b      	adds	r3, r7, #4
 8001fd8:	2202      	movs	r2, #2
 8001fda:	4619      	mov	r1, r3
 8001fdc:	2073      	movs	r0, #115	; 0x73
 8001fde:	f7ff fd31 	bl	8001a44 <I2C_Master_Send>
  LED_Set(0, 0);
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	2000      	movs	r0, #0
 8001fe6:	f000 f809 	bl	8001ffc <LED_Set>
  LED_Set(0, 0);
 8001fea:	2100      	movs	r1, #0
 8001fec:	2000      	movs	r0, #0
 8001fee:	f000 f805 	bl	8001ffc <LED_Set>
}
 8001ff2:	bf00      	nop
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
	...

08001ffc <LED_Set>:

void LED_Set(uint8_t set, uint8_t num) {
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	4603      	mov	r3, r0
 8002004:	460a      	mov	r2, r1
 8002006:	71fb      	strb	r3, [r7, #7]
 8002008:	4613      	mov	r3, r2
 800200a:	71bb      	strb	r3, [r7, #6]
    uint8_t cmd[2] = {1, 0};
 800200c:	2301      	movs	r3, #1
 800200e:	81bb      	strh	r3, [r7, #12]
    switch(num) {
 8002010:	79bb      	ldrb	r3, [r7, #6]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d002      	beq.n	800201c <LED_Set+0x20>
 8002016:	2b01      	cmp	r3, #1
 8002018:	d030      	beq.n	800207c <LED_Set+0x80>
            led_state |= ((set & 0b100) | ((set & 0b010)<<2) | ((set & 1)<<4));
            cmd[1] = led_state & 0xFF;
            I2C_Master_Send(0x70, cmd, 2);
            break;
    }
}
 800201a:	e05f      	b.n	80020dc <LED_Set+0xe0>
            led_state &= 0b1111111100011111;
 800201c:	4b31      	ldr	r3, [pc, #196]	; (80020e4 <LED_Set+0xe8>)
 800201e:	881b      	ldrh	r3, [r3, #0]
 8002020:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8002024:	b29a      	uxth	r2, r3
 8002026:	4b2f      	ldr	r3, [pc, #188]	; (80020e4 <LED_Set+0xe8>)
 8002028:	801a      	strh	r2, [r3, #0]
            led_state |= ((set & 0b100)<<3) | ((set & 0b010)<<5) | ((set & 1)<<7);
 800202a:	79fb      	ldrb	r3, [r7, #7]
 800202c:	00db      	lsls	r3, r3, #3
 800202e:	b21b      	sxth	r3, r3
 8002030:	f003 0320 	and.w	r3, r3, #32
 8002034:	b21a      	sxth	r2, r3
 8002036:	79fb      	ldrb	r3, [r7, #7]
 8002038:	015b      	lsls	r3, r3, #5
 800203a:	b21b      	sxth	r3, r3
 800203c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002040:	b21b      	sxth	r3, r3
 8002042:	4313      	orrs	r3, r2
 8002044:	b21a      	sxth	r2, r3
 8002046:	79fb      	ldrb	r3, [r7, #7]
 8002048:	01db      	lsls	r3, r3, #7
 800204a:	b21b      	sxth	r3, r3
 800204c:	b2db      	uxtb	r3, r3
 800204e:	b21b      	sxth	r3, r3
 8002050:	4313      	orrs	r3, r2
 8002052:	b21a      	sxth	r2, r3
 8002054:	4b23      	ldr	r3, [pc, #140]	; (80020e4 <LED_Set+0xe8>)
 8002056:	881b      	ldrh	r3, [r3, #0]
 8002058:	b21b      	sxth	r3, r3
 800205a:	4313      	orrs	r3, r2
 800205c:	b21b      	sxth	r3, r3
 800205e:	b29a      	uxth	r2, r3
 8002060:	4b20      	ldr	r3, [pc, #128]	; (80020e4 <LED_Set+0xe8>)
 8002062:	801a      	strh	r2, [r3, #0]
            cmd[1] = led_state & 0xFF;
 8002064:	4b1f      	ldr	r3, [pc, #124]	; (80020e4 <LED_Set+0xe8>)
 8002066:	881b      	ldrh	r3, [r3, #0]
 8002068:	b2db      	uxtb	r3, r3
 800206a:	737b      	strb	r3, [r7, #13]
            I2C_Master_Send(0x70, cmd, 2);
 800206c:	f107 030c 	add.w	r3, r7, #12
 8002070:	2202      	movs	r2, #2
 8002072:	4619      	mov	r1, r3
 8002074:	2070      	movs	r0, #112	; 0x70
 8002076:	f7ff fce5 	bl	8001a44 <I2C_Master_Send>
            break;
 800207a:	e02f      	b.n	80020dc <LED_Set+0xe0>
            led_state &= 0b1111111111100011;
 800207c:	4b19      	ldr	r3, [pc, #100]	; (80020e4 <LED_Set+0xe8>)
 800207e:	881b      	ldrh	r3, [r3, #0]
 8002080:	f023 031c 	bic.w	r3, r3, #28
 8002084:	b29a      	uxth	r2, r3
 8002086:	4b17      	ldr	r3, [pc, #92]	; (80020e4 <LED_Set+0xe8>)
 8002088:	801a      	strh	r2, [r3, #0]
            led_state |= ((set & 0b100) | ((set & 0b010)<<2) | ((set & 1)<<4));
 800208a:	79fb      	ldrb	r3, [r7, #7]
 800208c:	b21b      	sxth	r3, r3
 800208e:	f003 0304 	and.w	r3, r3, #4
 8002092:	b21a      	sxth	r2, r3
 8002094:	79fb      	ldrb	r3, [r7, #7]
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	b21b      	sxth	r3, r3
 800209a:	f003 0308 	and.w	r3, r3, #8
 800209e:	b21b      	sxth	r3, r3
 80020a0:	4313      	orrs	r3, r2
 80020a2:	b21a      	sxth	r2, r3
 80020a4:	79fb      	ldrb	r3, [r7, #7]
 80020a6:	011b      	lsls	r3, r3, #4
 80020a8:	b21b      	sxth	r3, r3
 80020aa:	f003 0310 	and.w	r3, r3, #16
 80020ae:	b21b      	sxth	r3, r3
 80020b0:	4313      	orrs	r3, r2
 80020b2:	b21a      	sxth	r2, r3
 80020b4:	4b0b      	ldr	r3, [pc, #44]	; (80020e4 <LED_Set+0xe8>)
 80020b6:	881b      	ldrh	r3, [r3, #0]
 80020b8:	b21b      	sxth	r3, r3
 80020ba:	4313      	orrs	r3, r2
 80020bc:	b21b      	sxth	r3, r3
 80020be:	b29a      	uxth	r2, r3
 80020c0:	4b08      	ldr	r3, [pc, #32]	; (80020e4 <LED_Set+0xe8>)
 80020c2:	801a      	strh	r2, [r3, #0]
            cmd[1] = led_state & 0xFF;
 80020c4:	4b07      	ldr	r3, [pc, #28]	; (80020e4 <LED_Set+0xe8>)
 80020c6:	881b      	ldrh	r3, [r3, #0]
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	737b      	strb	r3, [r7, #13]
            I2C_Master_Send(0x70, cmd, 2);
 80020cc:	f107 030c 	add.w	r3, r7, #12
 80020d0:	2202      	movs	r2, #2
 80020d2:	4619      	mov	r1, r3
 80020d4:	2070      	movs	r0, #112	; 0x70
 80020d6:	f7ff fcb5 	bl	8001a44 <I2C_Master_Send>
            break;
 80020da:	bf00      	nop
}
 80020dc:	bf00      	nop
 80020de:	3710      	adds	r7, #16
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	2000020c 	.word	0x2000020c

080020e8 <LED_Volume_Set>:

void LED_Volume_Set(uint16_t set) {
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	4603      	mov	r3, r0
 80020f0:	80fb      	strh	r3, [r7, #6]
    uint8_t cmd[2] = {1, 0};
 80020f2:	2301      	movs	r3, #1
 80020f4:	81bb      	strh	r3, [r7, #12]
    //led_state = 0xFFFF;
    uint16_t temp_led_state = 0;
 80020f6:	2300      	movs	r3, #0
 80020f8:	81fb      	strh	r3, [r7, #14]
    temp_led_state |= ((set&0x1)<<1) | ((set&0b10)>>1) | ((set&0b100)<<13) | ((set&0b1000)<<11) | ((set&0b10000)<<9) | ((set&0b100000)<<7) | ((set&0b1000000)<<5) | ((set&0b10000000)<<3) | ((set&0b100000000)<<1) | ((set&0b1000000000)>>1);
 80020fa:	88fb      	ldrh	r3, [r7, #6]
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	b21b      	sxth	r3, r3
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	b21a      	sxth	r2, r3
 8002106:	88fb      	ldrh	r3, [r7, #6]
 8002108:	105b      	asrs	r3, r3, #1
 800210a:	b21b      	sxth	r3, r3
 800210c:	f003 0301 	and.w	r3, r3, #1
 8002110:	b21b      	sxth	r3, r3
 8002112:	4313      	orrs	r3, r2
 8002114:	b21a      	sxth	r2, r3
 8002116:	88fb      	ldrh	r3, [r7, #6]
 8002118:	035b      	lsls	r3, r3, #13
 800211a:	b21b      	sxth	r3, r3
 800211c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002120:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002124:	b21b      	sxth	r3, r3
 8002126:	4313      	orrs	r3, r2
 8002128:	b21a      	sxth	r2, r3
 800212a:	88fb      	ldrh	r3, [r7, #6]
 800212c:	02db      	lsls	r3, r3, #11
 800212e:	b21b      	sxth	r3, r3
 8002130:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002134:	b21b      	sxth	r3, r3
 8002136:	4313      	orrs	r3, r2
 8002138:	b21a      	sxth	r2, r3
 800213a:	88fb      	ldrh	r3, [r7, #6]
 800213c:	025b      	lsls	r3, r3, #9
 800213e:	b21b      	sxth	r3, r3
 8002140:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002144:	b21b      	sxth	r3, r3
 8002146:	4313      	orrs	r3, r2
 8002148:	b21a      	sxth	r2, r3
 800214a:	88fb      	ldrh	r3, [r7, #6]
 800214c:	01db      	lsls	r3, r3, #7
 800214e:	b21b      	sxth	r3, r3
 8002150:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002154:	b21b      	sxth	r3, r3
 8002156:	4313      	orrs	r3, r2
 8002158:	b21a      	sxth	r2, r3
 800215a:	88fb      	ldrh	r3, [r7, #6]
 800215c:	015b      	lsls	r3, r3, #5
 800215e:	b21b      	sxth	r3, r3
 8002160:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002164:	b21b      	sxth	r3, r3
 8002166:	4313      	orrs	r3, r2
 8002168:	b21a      	sxth	r2, r3
 800216a:	88fb      	ldrh	r3, [r7, #6]
 800216c:	00db      	lsls	r3, r3, #3
 800216e:	b21b      	sxth	r3, r3
 8002170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002174:	b21b      	sxth	r3, r3
 8002176:	4313      	orrs	r3, r2
 8002178:	b21a      	sxth	r2, r3
 800217a:	88fb      	ldrh	r3, [r7, #6]
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	b21b      	sxth	r3, r3
 8002180:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002184:	b21b      	sxth	r3, r3
 8002186:	4313      	orrs	r3, r2
 8002188:	b21a      	sxth	r2, r3
 800218a:	88fb      	ldrh	r3, [r7, #6]
 800218c:	105b      	asrs	r3, r3, #1
 800218e:	b21b      	sxth	r3, r3
 8002190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002194:	b21b      	sxth	r3, r3
 8002196:	4313      	orrs	r3, r2
 8002198:	b21a      	sxth	r2, r3
 800219a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800219e:	4313      	orrs	r3, r2
 80021a0:	b21b      	sxth	r3, r3
 80021a2:	81fb      	strh	r3, [r7, #14]
    temp_led_state = ~temp_led_state;
 80021a4:	89fb      	ldrh	r3, [r7, #14]
 80021a6:	43db      	mvns	r3, r3
 80021a8:	81fb      	strh	r3, [r7, #14]
    led_state = (temp_led_state & 0b1111111100000011) | (led_state & 0b11111100);
 80021aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80021ae:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 80021b2:	b21a      	sxth	r2, r3
 80021b4:	4b13      	ldr	r3, [pc, #76]	; (8002204 <LED_Volume_Set+0x11c>)
 80021b6:	881b      	ldrh	r3, [r3, #0]
 80021b8:	b21b      	sxth	r3, r3
 80021ba:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80021be:	b21b      	sxth	r3, r3
 80021c0:	4313      	orrs	r3, r2
 80021c2:	b21b      	sxth	r3, r3
 80021c4:	b29a      	uxth	r2, r3
 80021c6:	4b0f      	ldr	r3, [pc, #60]	; (8002204 <LED_Volume_Set+0x11c>)
 80021c8:	801a      	strh	r2, [r3, #0]
    cmd[1] = led_state & 0xFF;
 80021ca:	4b0e      	ldr	r3, [pc, #56]	; (8002204 <LED_Volume_Set+0x11c>)
 80021cc:	881b      	ldrh	r3, [r3, #0]
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	737b      	strb	r3, [r7, #13]
    I2C_Master_Send(0x70, cmd, 2);
 80021d2:	f107 030c 	add.w	r3, r7, #12
 80021d6:	2202      	movs	r2, #2
 80021d8:	4619      	mov	r1, r3
 80021da:	2070      	movs	r0, #112	; 0x70
 80021dc:	f7ff fc32 	bl	8001a44 <I2C_Master_Send>
    cmd[1] = led_state >> 8;
 80021e0:	4b08      	ldr	r3, [pc, #32]	; (8002204 <LED_Volume_Set+0x11c>)
 80021e2:	881b      	ldrh	r3, [r3, #0]
 80021e4:	0a1b      	lsrs	r3, r3, #8
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	737b      	strb	r3, [r7, #13]
    I2C_Master_Send(0x73, cmd, 2);
 80021ec:	f107 030c 	add.w	r3, r7, #12
 80021f0:	2202      	movs	r2, #2
 80021f2:	4619      	mov	r1, r3
 80021f4:	2073      	movs	r0, #115	; 0x73
 80021f6:	f7ff fc25 	bl	8001a44 <I2C_Master_Send>
}
 80021fa:	bf00      	nop
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	2000020c 	.word	0x2000020c

08002208 <OLED_SendCommand>:
//Координаты
uint8_t OLED_CurrentX = 0;
uint8_t OLED_CurrentY = 0;

//Отправка команды дисплею
void OLED_SendCommand(uint8_t command) {
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	4603      	mov	r3, r0
 8002210:	71fb      	strb	r3, [r7, #7]
    I2C_Master_SendReg(OLED_ADDR, 0x00, &command, 1);
 8002212:	1dfa      	adds	r2, r7, #7
 8002214:	2301      	movs	r3, #1
 8002216:	2100      	movs	r1, #0
 8002218:	203c      	movs	r0, #60	; 0x3c
 800221a:	f7ff fc77 	bl	8001b0c <I2C_Master_SendReg>
}
 800221e:	bf00      	nop
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <OLED_SendData>:

//Отправка данных дисплею
void OLED_SendData(uint8_t* data, uint16_t data_size) {
 8002226:	b580      	push	{r7, lr}
 8002228:	b082      	sub	sp, #8
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
 800222e:	460b      	mov	r3, r1
 8002230:	807b      	strh	r3, [r7, #2]
    I2C_Master_SendReg(OLED_ADDR, 0x40, data, data_size);
 8002232:	887b      	ldrh	r3, [r7, #2]
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	2140      	movs	r1, #64	; 0x40
 8002238:	203c      	movs	r0, #60	; 0x3c
 800223a:	f7ff fc67 	bl	8001b0c <I2C_Master_SendReg>
}
 800223e:	bf00      	nop
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <OLED_Init>:

//Инициализация OLED
void OLED_Init() {
 8002246:	b580      	push	{r7, lr}
 8002248:	af00      	add	r7, sp, #0
    //Коэффициент мультиплексирования = 63. ВЫСОТА 64 пикс
    OLED_SendCommand(0xA8);
 800224a:	20a8      	movs	r0, #168	; 0xa8
 800224c:	f7ff ffdc 	bl	8002208 <OLED_SendCommand>
    OLED_SendCommand(0x3F);
 8002250:	203f      	movs	r0, #63	; 0x3f
 8002252:	f7ff ffd9 	bl	8002208 <OLED_SendCommand>
    //Смещение строк (COM) = 0
    OLED_SendCommand(0xD3);
 8002256:	20d3      	movs	r0, #211	; 0xd3
 8002258:	f7ff ffd6 	bl	8002208 <OLED_SendCommand>
    OLED_SendCommand(0x00);
 800225c:	2000      	movs	r0, #0
 800225e:	f7ff ffd3 	bl	8002208 <OLED_SendCommand>
    //Начальная строка = 0
    OLED_SendCommand(0x40);
 8002262:	2040      	movs	r0, #64	; 0x40
 8002264:	f7ff ffd0 	bl	8002208 <OLED_SendCommand>
    //Адрес столбца 0 на SEG0. ОТРАЖЕНИЕ ГОРИЗОНТ ВЫКЛ
    OLED_SendCommand(0xA1);
 8002268:	20a1      	movs	r0, #161	; 0xa1
 800226a:	f7ff ffcd 	bl	8002208 <OLED_SendCommand>
    //Направление сканирования строк. ОТРАЖЕНИЕ ВЕРТИКАЛЬ ВЫКЛ
    OLED_SendCommand(0xC8);
 800226e:	20c8      	movs	r0, #200	; 0xc8
 8002270:	f7ff ffca 	bl	8002208 <OLED_SendCommand>
    //Задает порядок прорисовки строк и направление.
    OLED_SendCommand(0xDA);
 8002274:	20da      	movs	r0, #218	; 0xda
 8002276:	f7ff ffc7 	bl	8002208 <OLED_SendCommand>
    OLED_SendCommand(0x12);
 800227a:	2012      	movs	r0, #18
 800227c:	f7ff ffc4 	bl	8002208 <OLED_SendCommand>
    //Установка констрастности
    OLED_SendCommand(0x81);
 8002280:	2081      	movs	r0, #129	; 0x81
 8002282:	f7ff ffc1 	bl	8002208 <OLED_SendCommand>
    OLED_SendCommand(0x7F);
 8002286:	207f      	movs	r0, #127	; 0x7f
 8002288:	f7ff ffbe 	bl	8002208 <OLED_SendCommand>
    //Полное включение, отображать из RAM
    OLED_SendCommand(0xA4);
 800228c:	20a4      	movs	r0, #164	; 0xa4
 800228e:	f7ff ffbb 	bl	8002208 <OLED_SendCommand>
    //Нормальный режим. Выключить инверсию
    OLED_SendCommand(0xA6);
 8002292:	20a6      	movs	r0, #166	; 0xa6
 8002294:	f7ff ffb8 	bl	8002208 <OLED_SendCommand>
    //Настройка частоты
    OLED_SendCommand(0xD5);
 8002298:	20d5      	movs	r0, #213	; 0xd5
 800229a:	f7ff ffb5 	bl	8002208 <OLED_SendCommand>
    OLED_SendCommand(0x80);
 800229e:	2080      	movs	r0, #128	; 0x80
 80022a0:	f7ff ffb2 	bl	8002208 <OLED_SendCommand>
    //Включить регулятор напряжения
    OLED_SendCommand(0x8D);
 80022a4:	208d      	movs	r0, #141	; 0x8d
 80022a6:	f7ff ffaf 	bl	8002208 <OLED_SendCommand>
    OLED_SendCommand(0x14);
 80022aa:	2014      	movs	r0, #20
 80022ac:	f7ff ffac 	bl	8002208 <OLED_SendCommand>
    //Адрессация ГОРИЗОНТАЛЬНАЯ
    OLED_SendCommand(0x20);
 80022b0:	2020      	movs	r0, #32
 80022b2:	f7ff ffa9 	bl	8002208 <OLED_SendCommand>
    OLED_SendCommand(0x00);
 80022b6:	2000      	movs	r0, #0
 80022b8:	f7ff ffa6 	bl	8002208 <OLED_SendCommand>
    //Настройка адресов столбцов
    OLED_SendCommand(0x21);
 80022bc:	2021      	movs	r0, #33	; 0x21
 80022be:	f7ff ffa3 	bl	8002208 <OLED_SendCommand>
    OLED_SendCommand(0x00);
 80022c2:	2000      	movs	r0, #0
 80022c4:	f7ff ffa0 	bl	8002208 <OLED_SendCommand>
    OLED_SendCommand(127);
 80022c8:	207f      	movs	r0, #127	; 0x7f
 80022ca:	f7ff ff9d 	bl	8002208 <OLED_SendCommand>
    //Настройка адресов строк
    OLED_SendCommand(0x22);
 80022ce:	2022      	movs	r0, #34	; 0x22
 80022d0:	f7ff ff9a 	bl	8002208 <OLED_SendCommand>
    OLED_SendCommand(0x00);
 80022d4:	2000      	movs	r0, #0
 80022d6:	f7ff ff97 	bl	8002208 <OLED_SendCommand>
    OLED_SendCommand(7);
 80022da:	2007      	movs	r0, #7
 80022dc:	f7ff ff94 	bl	8002208 <OLED_SendCommand>

    //OLED_SendCommand(0xB0);
    //Включить экран
    OLED_SendCommand(0xAF);
 80022e0:	20af      	movs	r0, #175	; 0xaf
 80022e2:	f7ff ff91 	bl	8002208 <OLED_SendCommand>

    OLED_Fill(0);
 80022e6:	2000      	movs	r0, #0
 80022e8:	f000 f804 	bl	80022f4 <OLED_Fill>
    OLED_Update();
 80022ec:	f000 f81a 	bl	8002324 <OLED_Update>

    //OLED_SetCursor(0, 0);
}
 80022f0:	bf00      	nop
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <OLED_Fill>:
    OLED_SendCommand(0x81);
    OLED_SendCommand(contrast);
}

//Заполнить дисплей
void OLED_Fill(uint8_t filler) {
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	4603      	mov	r3, r0
 80022fc:	71fb      	strb	r3, [r7, #7]
    memset(OLEDBUFF, filler ? 0xFF : 0x00, sizeof(OLEDBUFF));
 80022fe:	79fb      	ldrb	r3, [r7, #7]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <OLED_Fill+0x14>
 8002304:	23ff      	movs	r3, #255	; 0xff
 8002306:	e000      	b.n	800230a <OLED_Fill+0x16>
 8002308:	2300      	movs	r3, #0
 800230a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800230e:	4619      	mov	r1, r3
 8002310:	4803      	ldr	r0, [pc, #12]	; (8002320 <OLED_Fill+0x2c>)
 8002312:	f002 fe17 	bl	8004f44 <memset>
}
 8002316:	bf00      	nop
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	20000210 	.word	0x20000210

08002324 <OLED_Update>:

//Обновить содержимое дисплея
void OLED_Update() {
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
    OLED_SendData(OLEDBUFF, 1024);
 8002328:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800232c:	4802      	ldr	r0, [pc, #8]	; (8002338 <OLED_Update+0x14>)
 800232e:	f7ff ff7a 	bl	8002226 <OLED_SendData>
}
 8002332:	bf00      	nop
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	20000210 	.word	0x20000210

0800233c <OLED_DrawPixel>:

//Отрисовка пикселя на координатах x,y
void OLED_DrawPixel(uint8_t x, uint8_t y, uint8_t set) {
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	4603      	mov	r3, r0
 8002344:	71fb      	strb	r3, [r7, #7]
 8002346:	460b      	mov	r3, r1
 8002348:	71bb      	strb	r3, [r7, #6]
 800234a:	4613      	mov	r3, r2
 800234c:	717b      	strb	r3, [r7, #5]
    if ((x > 127) | (y > 63))
 800234e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002352:	b2db      	uxtb	r3, r3
 8002354:	09db      	lsrs	r3, r3, #7
 8002356:	b2da      	uxtb	r2, r3
 8002358:	79bb      	ldrb	r3, [r7, #6]
 800235a:	2b3f      	cmp	r3, #63	; 0x3f
 800235c:	bf8c      	ite	hi
 800235e:	2301      	movhi	r3, #1
 8002360:	2300      	movls	r3, #0
 8002362:	b2db      	uxtb	r3, r3
 8002364:	4313      	orrs	r3, r2
 8002366:	b2db      	uxtb	r3, r3
 8002368:	2b00      	cmp	r3, #0
 800236a:	d13a      	bne.n	80023e2 <OLED_DrawPixel+0xa6>
        return;
    if (set)
 800236c:	797b      	ldrb	r3, [r7, #5]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d01a      	beq.n	80023a8 <OLED_DrawPixel+0x6c>
        OLEDBUFF[x + (y/8) * 128] |= 1 << (y % 8);
 8002372:	79fa      	ldrb	r2, [r7, #7]
 8002374:	79bb      	ldrb	r3, [r7, #6]
 8002376:	08db      	lsrs	r3, r3, #3
 8002378:	b2d8      	uxtb	r0, r3
 800237a:	4603      	mov	r3, r0
 800237c:	01db      	lsls	r3, r3, #7
 800237e:	4413      	add	r3, r2
 8002380:	4a1b      	ldr	r2, [pc, #108]	; (80023f0 <OLED_DrawPixel+0xb4>)
 8002382:	5cd3      	ldrb	r3, [r2, r3]
 8002384:	b25a      	sxtb	r2, r3
 8002386:	79bb      	ldrb	r3, [r7, #6]
 8002388:	f003 0307 	and.w	r3, r3, #7
 800238c:	2101      	movs	r1, #1
 800238e:	fa01 f303 	lsl.w	r3, r1, r3
 8002392:	b25b      	sxtb	r3, r3
 8002394:	4313      	orrs	r3, r2
 8002396:	b259      	sxtb	r1, r3
 8002398:	79fa      	ldrb	r2, [r7, #7]
 800239a:	4603      	mov	r3, r0
 800239c:	01db      	lsls	r3, r3, #7
 800239e:	4413      	add	r3, r2
 80023a0:	b2c9      	uxtb	r1, r1
 80023a2:	4a13      	ldr	r2, [pc, #76]	; (80023f0 <OLED_DrawPixel+0xb4>)
 80023a4:	54d1      	strb	r1, [r2, r3]
 80023a6:	e01d      	b.n	80023e4 <OLED_DrawPixel+0xa8>
    else
        OLEDBUFF[x + (y/8) * 128] &= ~(1 << (y % 8));
 80023a8:	79fa      	ldrb	r2, [r7, #7]
 80023aa:	79bb      	ldrb	r3, [r7, #6]
 80023ac:	08db      	lsrs	r3, r3, #3
 80023ae:	b2d8      	uxtb	r0, r3
 80023b0:	4603      	mov	r3, r0
 80023b2:	01db      	lsls	r3, r3, #7
 80023b4:	4413      	add	r3, r2
 80023b6:	4a0e      	ldr	r2, [pc, #56]	; (80023f0 <OLED_DrawPixel+0xb4>)
 80023b8:	5cd3      	ldrb	r3, [r2, r3]
 80023ba:	b25a      	sxtb	r2, r3
 80023bc:	79bb      	ldrb	r3, [r7, #6]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	2101      	movs	r1, #1
 80023c4:	fa01 f303 	lsl.w	r3, r1, r3
 80023c8:	b25b      	sxtb	r3, r3
 80023ca:	43db      	mvns	r3, r3
 80023cc:	b25b      	sxtb	r3, r3
 80023ce:	4013      	ands	r3, r2
 80023d0:	b259      	sxtb	r1, r3
 80023d2:	79fa      	ldrb	r2, [r7, #7]
 80023d4:	4603      	mov	r3, r0
 80023d6:	01db      	lsls	r3, r3, #7
 80023d8:	4413      	add	r3, r2
 80023da:	b2c9      	uxtb	r1, r1
 80023dc:	4a04      	ldr	r2, [pc, #16]	; (80023f0 <OLED_DrawPixel+0xb4>)
 80023de:	54d1      	strb	r1, [r2, r3]
 80023e0:	e000      	b.n	80023e4 <OLED_DrawPixel+0xa8>
        return;
 80023e2:	bf00      	nop
}
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	20000210 	.word	0x20000210

080023f4 <OLED_DrawLine>:
    OLED_CurrentX = x;
    OLED_CurrentY = y;
}

//Отрисовка линии
void OLED_DrawLine(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2) {
 80023f4:	b590      	push	{r4, r7, lr}
 80023f6:	b089      	sub	sp, #36	; 0x24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	4604      	mov	r4, r0
 80023fc:	4608      	mov	r0, r1
 80023fe:	4611      	mov	r1, r2
 8002400:	461a      	mov	r2, r3
 8002402:	4623      	mov	r3, r4
 8002404:	71fb      	strb	r3, [r7, #7]
 8002406:	4603      	mov	r3, r0
 8002408:	71bb      	strb	r3, [r7, #6]
 800240a:	460b      	mov	r3, r1
 800240c:	717b      	strb	r3, [r7, #5]
 800240e:	4613      	mov	r3, r2
 8002410:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 8002412:	797a      	ldrb	r2, [r7, #5]
 8002414:	79fb      	ldrb	r3, [r7, #7]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b00      	cmp	r3, #0
 800241a:	bfb8      	it	lt
 800241c:	425b      	neglt	r3, r3
 800241e:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 8002420:	793a      	ldrb	r2, [r7, #4]
 8002422:	79bb      	ldrb	r3, [r7, #6]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b00      	cmp	r3, #0
 8002428:	bfb8      	it	lt
 800242a:	425b      	neglt	r3, r3
 800242c:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 800242e:	79fa      	ldrb	r2, [r7, #7]
 8002430:	797b      	ldrb	r3, [r7, #5]
 8002432:	429a      	cmp	r2, r3
 8002434:	d201      	bcs.n	800243a <OLED_DrawLine+0x46>
 8002436:	2301      	movs	r3, #1
 8002438:	e001      	b.n	800243e <OLED_DrawLine+0x4a>
 800243a:	f04f 33ff 	mov.w	r3, #4294967295
 800243e:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8002440:	79ba      	ldrb	r2, [r7, #6]
 8002442:	793b      	ldrb	r3, [r7, #4]
 8002444:	429a      	cmp	r2, r3
 8002446:	d201      	bcs.n	800244c <OLED_DrawLine+0x58>
 8002448:	2301      	movs	r3, #1
 800244a:	e001      	b.n	8002450 <OLED_DrawLine+0x5c>
 800244c:	f04f 33ff 	mov.w	r3, #4294967295
 8002450:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    OLED_DrawPixel(x2, y2, 1);
 800245a:	7939      	ldrb	r1, [r7, #4]
 800245c:	797b      	ldrb	r3, [r7, #5]
 800245e:	2201      	movs	r2, #1
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff ff6b 	bl	800233c <OLED_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8002466:	e023      	b.n	80024b0 <OLED_DrawLine+0xbc>
        OLED_DrawPixel(x1, y1, 1);
 8002468:	79b9      	ldrb	r1, [r7, #6]
 800246a:	79fb      	ldrb	r3, [r7, #7]
 800246c:	2201      	movs	r2, #1
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff ff64 	bl	800233c <OLED_DrawPixel>
        error2 = error * 2;
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	425b      	negs	r3, r3
 800247e:	68ba      	ldr	r2, [r7, #8]
 8002480:	429a      	cmp	r2, r3
 8002482:	dd08      	ble.n	8002496 <OLED_DrawLine+0xa2>
            error -= deltaY;
 8002484:	69fa      	ldr	r2, [r7, #28]
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	b2da      	uxtb	r2, r3
 8002490:	79fb      	ldrb	r3, [r7, #7]
 8002492:	4413      	add	r3, r2
 8002494:	71fb      	strb	r3, [r7, #7]
        }
        if(error2 < deltaX) {
 8002496:	68ba      	ldr	r2, [r7, #8]
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	429a      	cmp	r2, r3
 800249c:	da08      	bge.n	80024b0 <OLED_DrawLine+0xbc>
            error += deltaX;
 800249e:	69fa      	ldr	r2, [r7, #28]
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	4413      	add	r3, r2
 80024a4:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	b2da      	uxtb	r2, r3
 80024aa:	79bb      	ldrb	r3, [r7, #6]
 80024ac:	4413      	add	r3, r2
 80024ae:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 80024b0:	79fa      	ldrb	r2, [r7, #7]
 80024b2:	797b      	ldrb	r3, [r7, #5]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d1d7      	bne.n	8002468 <OLED_DrawLine+0x74>
 80024b8:	79ba      	ldrb	r2, [r7, #6]
 80024ba:	793b      	ldrb	r3, [r7, #4]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d1d3      	bne.n	8002468 <OLED_DrawLine+0x74>
        }
    }
    return;
 80024c0:	bf00      	nop
}
 80024c2:	3724      	adds	r7, #36	; 0x24
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd90      	pop	{r4, r7, pc}

080024c8 <OLED_DrawRectangle>:

//Отрисовка квадрата
void OLED_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2) {
 80024c8:	b590      	push	{r4, r7, lr}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	4604      	mov	r4, r0
 80024d0:	4608      	mov	r0, r1
 80024d2:	4611      	mov	r1, r2
 80024d4:	461a      	mov	r2, r3
 80024d6:	4623      	mov	r3, r4
 80024d8:	71fb      	strb	r3, [r7, #7]
 80024da:	4603      	mov	r3, r0
 80024dc:	71bb      	strb	r3, [r7, #6]
 80024de:	460b      	mov	r3, r1
 80024e0:	717b      	strb	r3, [r7, #5]
 80024e2:	4613      	mov	r3, r2
 80024e4:	713b      	strb	r3, [r7, #4]
    OLED_DrawLine(x1,y1,x2,y1);
 80024e6:	79bb      	ldrb	r3, [r7, #6]
 80024e8:	797a      	ldrb	r2, [r7, #5]
 80024ea:	79b9      	ldrb	r1, [r7, #6]
 80024ec:	79f8      	ldrb	r0, [r7, #7]
 80024ee:	f7ff ff81 	bl	80023f4 <OLED_DrawLine>
    OLED_DrawLine(x2,y1,x2,y2);
 80024f2:	793b      	ldrb	r3, [r7, #4]
 80024f4:	797a      	ldrb	r2, [r7, #5]
 80024f6:	79b9      	ldrb	r1, [r7, #6]
 80024f8:	7978      	ldrb	r0, [r7, #5]
 80024fa:	f7ff ff7b 	bl	80023f4 <OLED_DrawLine>
    OLED_DrawLine(x2,y2,x1,y2);
 80024fe:	793b      	ldrb	r3, [r7, #4]
 8002500:	79fa      	ldrb	r2, [r7, #7]
 8002502:	7939      	ldrb	r1, [r7, #4]
 8002504:	7978      	ldrb	r0, [r7, #5]
 8002506:	f7ff ff75 	bl	80023f4 <OLED_DrawLine>
    OLED_DrawLine(x1,y2,x1,y1);
 800250a:	79bb      	ldrb	r3, [r7, #6]
 800250c:	79fa      	ldrb	r2, [r7, #7]
 800250e:	7939      	ldrb	r1, [r7, #4]
 8002510:	79f8      	ldrb	r0, [r7, #7]
 8002512:	f7ff ff6f 	bl	80023f4 <OLED_DrawLine>
    return;
 8002516:	bf00      	nop
}
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	bd90      	pop	{r4, r7, pc}

0800251e <OLED_DrawBitmap>:
        OLEDBUFF[i] = 0;
    OLED_Update();
}

//Отрисовка Bitmap изображения, заданного массивом
void OLED_DrawBitmap(uint8_t* img_bitmap, uint8_t x, uint8_t y, uint8_t w, uint8_t h) {
 800251e:	b580      	push	{r7, lr}
 8002520:	b084      	sub	sp, #16
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
 8002526:	4608      	mov	r0, r1
 8002528:	4611      	mov	r1, r2
 800252a:	461a      	mov	r2, r3
 800252c:	4603      	mov	r3, r0
 800252e:	70fb      	strb	r3, [r7, #3]
 8002530:	460b      	mov	r3, r1
 8002532:	70bb      	strb	r3, [r7, #2]
 8002534:	4613      	mov	r3, r2
 8002536:	707b      	strb	r3, [r7, #1]
    int16_t byteWidth = (w + 7) / 8;
 8002538:	787b      	ldrb	r3, [r7, #1]
 800253a:	3307      	adds	r3, #7
 800253c:	2b00      	cmp	r3, #0
 800253e:	da00      	bge.n	8002542 <OLED_DrawBitmap+0x24>
 8002540:	3307      	adds	r3, #7
 8002542:	10db      	asrs	r3, r3, #3
 8002544:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8002546:	2300      	movs	r3, #0
 8002548:	73fb      	strb	r3, [r7, #15]

    if (x > 127 || y > 63) {
 800254a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800254e:	2b00      	cmp	r3, #0
 8002550:	db3e      	blt.n	80025d0 <OLED_DrawBitmap+0xb2>
 8002552:	78bb      	ldrb	r3, [r7, #2]
 8002554:	2b3f      	cmp	r3, #63	; 0x3f
 8002556:	d83b      	bhi.n	80025d0 <OLED_DrawBitmap+0xb2>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8002558:	2300      	movs	r3, #0
 800255a:	73bb      	strb	r3, [r7, #14]
 800255c:	e033      	b.n	80025c6 <OLED_DrawBitmap+0xa8>
        for (uint8_t i = 0; i < w; i++) {
 800255e:	2300      	movs	r3, #0
 8002560:	737b      	strb	r3, [r7, #13]
 8002562:	e026      	b.n	80025b2 <OLED_DrawBitmap+0x94>
            if (i & 7) {
 8002564:	7b7b      	ldrb	r3, [r7, #13]
 8002566:	f003 0307 	and.w	r3, r3, #7
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <OLED_DrawBitmap+0x58>
                byte <<= 1;
 800256e:	7bfb      	ldrb	r3, [r7, #15]
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	73fb      	strb	r3, [r7, #15]
 8002574:	e00d      	b.n	8002592 <OLED_DrawBitmap+0x74>
            } else {
                byte = (*(const unsigned char *)(&img_bitmap[j * byteWidth + i / 8]));
 8002576:	7bbb      	ldrb	r3, [r7, #14]
 8002578:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800257c:	fb02 f303 	mul.w	r3, r2, r3
 8002580:	7b7a      	ldrb	r2, [r7, #13]
 8002582:	08d2      	lsrs	r2, r2, #3
 8002584:	b2d2      	uxtb	r2, r2
 8002586:	4413      	add	r3, r2
 8002588:	461a      	mov	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4413      	add	r3, r2
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8002592:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002596:	2b00      	cmp	r3, #0
 8002598:	da08      	bge.n	80025ac <OLED_DrawBitmap+0x8e>
                OLED_DrawPixel(x + i, y, 1);
 800259a:	78fa      	ldrb	r2, [r7, #3]
 800259c:	7b7b      	ldrb	r3, [r7, #13]
 800259e:	4413      	add	r3, r2
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	78b9      	ldrb	r1, [r7, #2]
 80025a4:	2201      	movs	r2, #1
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff fec8 	bl	800233c <OLED_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 80025ac:	7b7b      	ldrb	r3, [r7, #13]
 80025ae:	3301      	adds	r3, #1
 80025b0:	737b      	strb	r3, [r7, #13]
 80025b2:	7b7a      	ldrb	r2, [r7, #13]
 80025b4:	787b      	ldrb	r3, [r7, #1]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d3d4      	bcc.n	8002564 <OLED_DrawBitmap+0x46>
    for (uint8_t j = 0; j < h; j++, y++) {
 80025ba:	7bbb      	ldrb	r3, [r7, #14]
 80025bc:	3301      	adds	r3, #1
 80025be:	73bb      	strb	r3, [r7, #14]
 80025c0:	78bb      	ldrb	r3, [r7, #2]
 80025c2:	3301      	adds	r3, #1
 80025c4:	70bb      	strb	r3, [r7, #2]
 80025c6:	7bba      	ldrb	r2, [r7, #14]
 80025c8:	7e3b      	ldrb	r3, [r7, #24]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d3c7      	bcc.n	800255e <OLED_DrawBitmap+0x40>
            }
        }
    }
    return;
 80025ce:	e000      	b.n	80025d2 <OLED_DrawBitmap+0xb4>
        return;
 80025d0:	bf00      	nop
}
 80025d2:	3710      	adds	r7, #16
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <RTC_Read>:
    reg[7] = TenToBin(y);

    I2C_Master_Send(I2C_RTC_ADDR, reg, 8);
}

void RTC_Read(uint8_t* rtc_data) {
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
    I2C_Master_Send(I2C_RTC_ADDR, 0, 1);
 80025e0:	2201      	movs	r2, #1
 80025e2:	2100      	movs	r1, #0
 80025e4:	2068      	movs	r0, #104	; 0x68
 80025e6:	f7ff fa2d 	bl	8001a44 <I2C_Master_Send>
    I2C_Master_Read(I2C_RTC_ADDR, rtc_data, 7);
 80025ea:	2207      	movs	r2, #7
 80025ec:	6879      	ldr	r1, [r7, #4]
 80025ee:	2068      	movs	r0, #104	; 0x68
 80025f0:	f7ff fb02 	bl	8001bf8 <I2C_Master_Read>
    for (int i = 0; i < 7; i++)
 80025f4:	2300      	movs	r3, #0
 80025f6:	60fb      	str	r3, [r7, #12]
 80025f8:	e01a      	b.n	8002630 <RTC_Read+0x58>
        rtc_data[i] = BinToTen(rtc_data[i]);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	4413      	add	r3, r2
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	091b      	lsrs	r3, r3, #4
 8002604:	b2db      	uxtb	r3, r3
 8002606:	461a      	mov	r2, r3
 8002608:	0092      	lsls	r2, r2, #2
 800260a:	4413      	add	r3, r2
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	b2d9      	uxtb	r1, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	4413      	add	r3, r2
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	f003 030f 	and.w	r3, r3, #15
 800261c:	b2da      	uxtb	r2, r3
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	4403      	add	r3, r0
 8002624:	440a      	add	r2, r1
 8002626:	b2d2      	uxtb	r2, r2
 8002628:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 7; i++)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	3301      	adds	r3, #1
 800262e:	60fb      	str	r3, [r7, #12]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2b06      	cmp	r3, #6
 8002634:	dde1      	ble.n	80025fa <RTC_Read+0x22>
}
 8002636:	bf00      	nop
 8002638:	bf00      	nop
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <Servo_Init>:
/* Управление сервоприводом */
#include "Servo.h"

//Инициализация таймера
void Servo_Init() {
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
    //Таймер 4. Канал 1. Режим ШИМ (пока счетчик меньше CCR = 1)
    SET_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM4EN);
 8002644:	4b1b      	ldr	r3, [pc, #108]	; (80026b4 <Servo_Init+0x74>)
 8002646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002648:	4a1a      	ldr	r2, [pc, #104]	; (80026b4 <Servo_Init+0x74>)
 800264a:	f043 0304 	orr.w	r3, r3, #4
 800264e:	6413      	str	r3, [r2, #64]	; 0x40
    CLEAR_BIT(TIM4->CR1, TIM_CR1_CEN);
 8002650:	4b19      	ldr	r3, [pc, #100]	; (80026b8 <Servo_Init+0x78>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a18      	ldr	r2, [pc, #96]	; (80026b8 <Servo_Init+0x78>)
 8002656:	f023 0301 	bic.w	r3, r3, #1
 800265a:	6013      	str	r3, [r2, #0]
    SET_BIT(TIM4->CCER, TIM_CCER_CC1E); //канал 1 включить на выход
 800265c:	4b16      	ldr	r3, [pc, #88]	; (80026b8 <Servo_Init+0x78>)
 800265e:	6a1b      	ldr	r3, [r3, #32]
 8002660:	4a15      	ldr	r2, [pc, #84]	; (80026b8 <Servo_Init+0x78>)
 8002662:	f043 0301 	orr.w	r3, r3, #1
 8002666:	6213      	str	r3, [r2, #32]
    MODIFY_REG(TIM4->CCMR1, TIM_CCMR1_OC1M_Msk, 6 << TIM_CCMR1_OC1M_Pos); //режим шим1
 8002668:	4b13      	ldr	r3, [pc, #76]	; (80026b8 <Servo_Init+0x78>)
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002670:	4a11      	ldr	r2, [pc, #68]	; (80026b8 <Servo_Init+0x78>)
 8002672:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002676:	6193      	str	r3, [r2, #24]
    WRITE_REG(TIM4->PSC, 83); //1 тик = 1/1000 милисекунды
 8002678:	4b0f      	ldr	r3, [pc, #60]	; (80026b8 <Servo_Init+0x78>)
 800267a:	2253      	movs	r2, #83	; 0x53
 800267c:	629a      	str	r2, [r3, #40]	; 0x28
    WRITE_REG(TIM4->ARR, 3000); //переполнение на 3 милисекундах
 800267e:	4b0e      	ldr	r3, [pc, #56]	; (80026b8 <Servo_Init+0x78>)
 8002680:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002684:	62da      	str	r2, [r3, #44]	; 0x2c
    //после протиканья - останавливается, перезапуск ручной
    SET_BIT(TIM4->CR1, TIM_CR1_OPM); //one pulse
 8002686:	4b0c      	ldr	r3, [pc, #48]	; (80026b8 <Servo_Init+0x78>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a0b      	ldr	r2, [pc, #44]	; (80026b8 <Servo_Init+0x78>)
 800268c:	f043 0308 	orr.w	r3, r3, #8
 8002690:	6013      	str	r3, [r2, #0]
    SET_BIT(TIM4->EGR, TIM_EGR_UG); //обновляем все
 8002692:	4b09      	ldr	r3, [pc, #36]	; (80026b8 <Servo_Init+0x78>)
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	4a08      	ldr	r2, [pc, #32]	; (80026b8 <Servo_Init+0x78>)
 8002698:	f043 0301 	orr.w	r3, r3, #1
 800269c:	6153      	str	r3, [r2, #20]
    SET_BIT(TIM4->CR1, TIM_CR1_UDIS); //событие обновления для загрузки регистров
 800269e:	4b06      	ldr	r3, [pc, #24]	; (80026b8 <Servo_Init+0x78>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a05      	ldr	r2, [pc, #20]	; (80026b8 <Servo_Init+0x78>)
 80026a4:	f043 0302 	orr.w	r3, r3, #2
 80026a8:	6013      	str	r3, [r2, #0]
}
 80026aa:	bf00      	nop
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr
 80026b4:	40023800 	.word	0x40023800
 80026b8:	40000800 	.word	0x40000800
 80026bc:	00000000 	.word	0x00000000

080026c0 <Servo_Set>:

//Установка серво на заданный угол
void Servo_Set(uint16_t angle) {
 80026c0:	b590      	push	{r4, r7, lr}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	4603      	mov	r3, r0
 80026c8:	80fb      	strh	r3, [r7, #6]
    //Импульс = 400 тиков + angle * 5.5 тиков
    WRITE_REG(TIM4->CCR1, 400 + angle*11.1);
 80026ca:	88fb      	ldrh	r3, [r7, #6]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7fd ff31 	bl	8000534 <__aeabi_i2d>
 80026d2:	a315      	add	r3, pc, #84	; (adr r3, 8002728 <Servo_Set+0x68>)
 80026d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d8:	f7fd ff96 	bl	8000608 <__aeabi_dmul>
 80026dc:	4602      	mov	r2, r0
 80026de:	460b      	mov	r3, r1
 80026e0:	4610      	mov	r0, r2
 80026e2:	4619      	mov	r1, r3
 80026e4:	f04f 0200 	mov.w	r2, #0
 80026e8:	4b0d      	ldr	r3, [pc, #52]	; (8002720 <Servo_Set+0x60>)
 80026ea:	f7fd fdd7 	bl	800029c <__adddf3>
 80026ee:	4602      	mov	r2, r0
 80026f0:	460b      	mov	r3, r1
 80026f2:	4c0c      	ldr	r4, [pc, #48]	; (8002724 <Servo_Set+0x64>)
 80026f4:	4610      	mov	r0, r2
 80026f6:	4619      	mov	r1, r3
 80026f8:	f7fe fa5e 	bl	8000bb8 <__aeabi_d2uiz>
 80026fc:	4603      	mov	r3, r0
 80026fe:	6363      	str	r3, [r4, #52]	; 0x34
    //WRITE_REG(TIM4->CCR1, 400);
    WRITE_REG(TIM4->CNT, 0x00000000); //скидывает счетчик
 8002700:	4b08      	ldr	r3, [pc, #32]	; (8002724 <Servo_Set+0x64>)
 8002702:	2200      	movs	r2, #0
 8002704:	625a      	str	r2, [r3, #36]	; 0x24
    SET_BIT(TIM4->CR1, TIM_CR1_CEN); //вкл. таймер
 8002706:	4b07      	ldr	r3, [pc, #28]	; (8002724 <Servo_Set+0x64>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a06      	ldr	r2, [pc, #24]	; (8002724 <Servo_Set+0x64>)
 800270c:	f043 0301 	orr.w	r3, r3, #1
 8002710:	6013      	str	r3, [r2, #0]
}
 8002712:	bf00      	nop
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	bd90      	pop	{r4, r7, pc}
 800271a:	bf00      	nop
 800271c:	f3af 8000 	nop.w
 8002720:	40790000 	.word	0x40790000
 8002724:	40000800 	.word	0x40000800
 8002728:	33333333 	.word	0x33333333
 800272c:	40263333 	.word	0x40263333

08002730 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002738:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800273c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8002740:	f003 0301 	and.w	r3, r3, #1
 8002744:	2b00      	cmp	r3, #0
 8002746:	d013      	beq.n	8002770 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002748:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800274c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8002750:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002754:	2b00      	cmp	r3, #0
 8002756:	d00b      	beq.n	8002770 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002758:	e000      	b.n	800275c <ITM_SendChar+0x2c>
    {
      __NOP();
 800275a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800275c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d0f9      	beq.n	800275a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002766:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	b2d2      	uxtb	r2, r2
 800276e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002770:	687b      	ldr	r3, [r7, #4]
}
 8002772:	4618      	mov	r0, r3
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr

0800277e <_write>:
#include "timer_delay.h"

volatile uint32_t timer_counter = 0;
volatile uint32_t tick_counter = 0;

int _write(int file, char *ptr, int len) {
 800277e:	b580      	push	{r7, lr}
 8002780:	b086      	sub	sp, #24
 8002782:	af00      	add	r7, sp, #0
 8002784:	60f8      	str	r0, [r7, #12]
 8002786:	60b9      	str	r1, [r7, #8]
 8002788:	607a      	str	r2, [r7, #4]
	int i=0;
 800278a:	2300      	movs	r3, #0
 800278c:	617b      	str	r3, [r7, #20]
	for (i=0;i<len;i++)
 800278e:	2300      	movs	r3, #0
 8002790:	617b      	str	r3, [r7, #20]
 8002792:	e009      	b.n	80027a8 <_write+0x2a>
		ITM_SendChar((*ptr++));
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	1c5a      	adds	r2, r3, #1
 8002798:	60ba      	str	r2, [r7, #8]
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff ffc7 	bl	8002730 <ITM_SendChar>
	for (i=0;i<len;i++)
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	3301      	adds	r3, #1
 80027a6:	617b      	str	r3, [r7, #20]
 80027a8:	697a      	ldr	r2, [r7, #20]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	dbf1      	blt.n	8002794 <_write+0x16>
	return len;
 80027b0:	687b      	ldr	r3, [r7, #4]
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3718      	adds	r7, #24
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
	...

080027bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80027bc:	b5b0      	push	{r4, r5, r7, lr}
 80027be:	b09a      	sub	sp, #104	; 0x68
 80027c0:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80027c2:	f000 fc55 	bl	8003070 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80027c6:	f000 f989 	bl	8002adc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80027ca:	f000 fa1f 	bl	8002c0c <MX_GPIO_Init>
  MX_I2C1_Init();
 80027ce:	f000 f9ef 	bl	8002bb0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  uint16_t coords[2] = {0};
 80027d2:	2300      	movs	r3, #0
 80027d4:	633b      	str	r3, [r7, #48]	; 0x30
  printf("Start program.\r\n");
 80027d6:	48b3      	ldr	r0, [pc, #716]	; (8002aa4 <main+0x2e8>)
 80027d8:	f002 faa0 	bl	8004d1c <puts>
  GPIO_Full_Init();
 80027dc:	f7fe ff9e 	bl	800171c <GPIO_Full_Init>
  //I2C_Init();
  I2C_Scan();
 80027e0:	f7ff fa8a 	bl	8001cf8 <I2C_Scan>
  Delay_Init();
 80027e4:	f000 fbf6 	bl	8002fd4 <Delay_Init>
  LCD_Init();
 80027e8:	f7ff fb8a 	bl	8001f00 <LCD_Init>
  ADC_Init();
 80027ec:	f7fe fbd2 	bl	8000f94 <ADC_Init>
  LED_Init();
 80027f0:	f7ff fbe6 	bl	8001fc0 <LED_Init>
  OLED_Init();
 80027f4:	f7ff fd27 	bl	8002246 <OLED_Init>
  Servo_Init();
 80027f8:	f7ff ff22 	bl	8002640 <Servo_Init>

  BMP_ReadCalibration();
 80027fc:	f7fe fc6a 	bl	80010d4 <BMP_ReadCalibration>

  LCD_Print("Hello!");
 8002800:	48a9      	ldr	r0, [pc, #676]	; (8002aa8 <main+0x2ec>)
 8002802:	f7ff fba1 	bl	8001f48 <LCD_Print>
  delay_us(1000000);
 8002806:	48a9      	ldr	r0, [pc, #676]	; (8002aac <main+0x2f0>)
 8002808:	f000 fbc2 	bl	8002f90 <delay_us>

  tick_counter = 0;
 800280c:	4ba8      	ldr	r3, [pc, #672]	; (8002ab0 <main+0x2f4>)
 800280e:	2200      	movs	r2, #0
 8002810:	601a      	str	r2, [r3, #0]
  int j_on = 1;
 8002812:	2301      	movs	r3, #1
 8002814:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint8_t rtc_data[7] = {0};
 8002816:	2300      	movs	r3, #0
 8002818:	62bb      	str	r3, [r7, #40]	; 0x28
 800281a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800281e:	2100      	movs	r1, #0
 8002820:	460a      	mov	r2, r1
 8002822:	801a      	strh	r2, [r3, #0]
 8002824:	460a      	mov	r2, r1
 8002826:	709a      	strb	r2, [r3, #2]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //Режим работы (битмап или джойстик)
	  if (j_on) {
 8002828:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800282a:	2b00      	cmp	r3, #0
 800282c:	d05e      	beq.n	80028ec <main+0x130>
	  //Джостик и OLED
	  Joystick_getCoords(coords);
 800282e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002832:	4618      	mov	r0, r3
 8002834:	f7ff fad8 	bl	8001de8 <Joystick_getCoords>
	  OLED_Fill(0);
 8002838:	2000      	movs	r0, #0
 800283a:	f7ff fd5b 	bl	80022f4 <OLED_Fill>
	  OLED_DrawRectangle(32, 0, 95, 63);
 800283e:	233f      	movs	r3, #63	; 0x3f
 8002840:	225f      	movs	r2, #95	; 0x5f
 8002842:	2100      	movs	r1, #0
 8002844:	2020      	movs	r0, #32
 8002846:	f7ff fe3f 	bl	80024c8 <OLED_DrawRectangle>
	  float j_x = coords[0]/4096.0*62.0+32;
 800284a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800284c:	4618      	mov	r0, r3
 800284e:	f7fd fe71 	bl	8000534 <__aeabi_i2d>
 8002852:	f04f 0200 	mov.w	r2, #0
 8002856:	4b97      	ldr	r3, [pc, #604]	; (8002ab4 <main+0x2f8>)
 8002858:	f7fe f800 	bl	800085c <__aeabi_ddiv>
 800285c:	4602      	mov	r2, r0
 800285e:	460b      	mov	r3, r1
 8002860:	4610      	mov	r0, r2
 8002862:	4619      	mov	r1, r3
 8002864:	f04f 0200 	mov.w	r2, #0
 8002868:	4b93      	ldr	r3, [pc, #588]	; (8002ab8 <main+0x2fc>)
 800286a:	f7fd fecd 	bl	8000608 <__aeabi_dmul>
 800286e:	4602      	mov	r2, r0
 8002870:	460b      	mov	r3, r1
 8002872:	4610      	mov	r0, r2
 8002874:	4619      	mov	r1, r3
 8002876:	f04f 0200 	mov.w	r2, #0
 800287a:	4b90      	ldr	r3, [pc, #576]	; (8002abc <main+0x300>)
 800287c:	f7fd fd0e 	bl	800029c <__adddf3>
 8002880:	4602      	mov	r2, r0
 8002882:	460b      	mov	r3, r1
 8002884:	4610      	mov	r0, r2
 8002886:	4619      	mov	r1, r3
 8002888:	f7fe f9b6 	bl	8000bf8 <__aeabi_d2f>
 800288c:	4603      	mov	r3, r0
 800288e:	64bb      	str	r3, [r7, #72]	; 0x48
	  float j_y = coords[1]/4096.0*62.0;
 8002890:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002892:	4618      	mov	r0, r3
 8002894:	f7fd fe4e 	bl	8000534 <__aeabi_i2d>
 8002898:	f04f 0200 	mov.w	r2, #0
 800289c:	4b85      	ldr	r3, [pc, #532]	; (8002ab4 <main+0x2f8>)
 800289e:	f7fd ffdd 	bl	800085c <__aeabi_ddiv>
 80028a2:	4602      	mov	r2, r0
 80028a4:	460b      	mov	r3, r1
 80028a6:	4610      	mov	r0, r2
 80028a8:	4619      	mov	r1, r3
 80028aa:	f04f 0200 	mov.w	r2, #0
 80028ae:	4b82      	ldr	r3, [pc, #520]	; (8002ab8 <main+0x2fc>)
 80028b0:	f7fd feaa 	bl	8000608 <__aeabi_dmul>
 80028b4:	4602      	mov	r2, r0
 80028b6:	460b      	mov	r3, r1
 80028b8:	4610      	mov	r0, r2
 80028ba:	4619      	mov	r1, r3
 80028bc:	f7fe f99c 	bl	8000bf8 <__aeabi_d2f>
 80028c0:	4603      	mov	r3, r0
 80028c2:	647b      	str	r3, [r7, #68]	; 0x44
	  OLED_DrawPixel((int)j_x,(int)j_y, 1);
 80028c4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80028c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028cc:	edc7 7a01 	vstr	s15, [r7, #4]
 80028d0:	793b      	ldrb	r3, [r7, #4]
 80028d2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80028d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028da:	edc7 7a01 	vstr	s15, [r7, #4]
 80028de:	7939      	ldrb	r1, [r7, #4]
 80028e0:	2201      	movs	r2, #1
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7ff fd2a 	bl	800233c <OLED_DrawPixel>
	  OLED_Update();
 80028e8:	f7ff fd1c 	bl	8002324 <OLED_Update>
	  }
	  //Регулятор и индикатор
	  uint8_t vlm_v = Regulator_getValue()/4096.0*10.0;
 80028ec:	f7ff faa4 	bl	8001e38 <Regulator_getValue>
 80028f0:	4603      	mov	r3, r0
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7fd fe1e 	bl	8000534 <__aeabi_i2d>
 80028f8:	f04f 0200 	mov.w	r2, #0
 80028fc:	4b6d      	ldr	r3, [pc, #436]	; (8002ab4 <main+0x2f8>)
 80028fe:	f7fd ffad 	bl	800085c <__aeabi_ddiv>
 8002902:	4602      	mov	r2, r0
 8002904:	460b      	mov	r3, r1
 8002906:	4610      	mov	r0, r2
 8002908:	4619      	mov	r1, r3
 800290a:	f04f 0200 	mov.w	r2, #0
 800290e:	4b6c      	ldr	r3, [pc, #432]	; (8002ac0 <main+0x304>)
 8002910:	f7fd fe7a 	bl	8000608 <__aeabi_dmul>
 8002914:	4602      	mov	r2, r0
 8002916:	460b      	mov	r3, r1
 8002918:	4610      	mov	r0, r2
 800291a:	4619      	mov	r1, r3
 800291c:	f7fe f94c 	bl	8000bb8 <__aeabi_d2uiz>
 8002920:	4603      	mov	r3, r0
 8002922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	  LED_Volume_Set(0b1111111111 >> vlm_v);
 8002926:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800292a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800292e:	fa42 f303 	asr.w	r3, r2, r3
 8002932:	b29b      	uxth	r3, r3
 8002934:	4618      	mov	r0, r3
 8002936:	f7ff fbd7 	bl	80020e8 <LED_Volume_Set>
	  uint8_t srv_v = Regulator_getValue()/4096.0 * 180.0;
 800293a:	f7ff fa7d 	bl	8001e38 <Regulator_getValue>
 800293e:	4603      	mov	r3, r0
 8002940:	4618      	mov	r0, r3
 8002942:	f7fd fdf7 	bl	8000534 <__aeabi_i2d>
 8002946:	f04f 0200 	mov.w	r2, #0
 800294a:	4b5a      	ldr	r3, [pc, #360]	; (8002ab4 <main+0x2f8>)
 800294c:	f7fd ff86 	bl	800085c <__aeabi_ddiv>
 8002950:	4602      	mov	r2, r0
 8002952:	460b      	mov	r3, r1
 8002954:	4610      	mov	r0, r2
 8002956:	4619      	mov	r1, r3
 8002958:	f04f 0200 	mov.w	r2, #0
 800295c:	4b59      	ldr	r3, [pc, #356]	; (8002ac4 <main+0x308>)
 800295e:	f7fd fe53 	bl	8000608 <__aeabi_dmul>
 8002962:	4602      	mov	r2, r0
 8002964:	460b      	mov	r3, r1
 8002966:	4610      	mov	r0, r2
 8002968:	4619      	mov	r1, r3
 800296a:	f7fe f925 	bl	8000bb8 <__aeabi_d2uiz>
 800296e:	4603      	mov	r3, r0
 8002970:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	  Servo_Set(srv_v);
 8002974:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8002978:	b29b      	uxth	r3, r3
 800297a:	4618      	mov	r0, r3
 800297c:	f7ff fea0 	bl	80026c0 <Servo_Set>
	  //Вывод DHT и BMP (темп влаж темп давл)
	  if (tick_counter == 0) {
 8002980:	4b4b      	ldr	r3, [pc, #300]	; (8002ab0 <main+0x2f4>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d16d      	bne.n	8002a64 <main+0x2a8>
		  float dht_data[2] = {0};
 8002988:	f107 0320 	add.w	r3, r7, #32
 800298c:	2200      	movs	r2, #0
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	605a      	str	r2, [r3, #4]
		  DHT_Get(dht_data);
 8002992:	f107 0320 	add.w	r3, r7, #32
 8002996:	4618      	mov	r0, r3
 8002998:	f7fe fe20 	bl	80015dc <DHT_Get>
		  float bmp_temp = BMP_GetTemp();
 800299c:	f7fe fca4 	bl	80012e8 <BMP_GetTemp>
 80029a0:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
		  long bmp_pres = BMP_GetPressure();
 80029a4:	f7fe fcbc 	bl	8001320 <BMP_GetPressure>
 80029a8:	63b8      	str	r0, [r7, #56]	; 0x38
		  long bmp_alt = BMP_GetAltitude();
 80029aa:	f7fe fde7 	bl	800157c <BMP_GetAltitude>
 80029ae:	6378      	str	r0, [r7, #52]	; 0x34
		  delay_us(1000);//гложит шину..
 80029b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80029b4:	f000 faec 	bl	8002f90 <delay_us>
		  RTC_Read(rtc_data);
 80029b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029bc:	4618      	mov	r0, r3
 80029be:	f7ff fe0b 	bl	80025d8 <RTC_Read>
		  char lcd_msg[17];
		  snprintf(lcd_msg, sizeof(lcd_msg), "%02d:%02d %2.1f %d", rtc_data[2], rtc_data[1], bmp_temp, bmp_pres);
 80029c2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80029c6:	461d      	mov	r5, r3
 80029c8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80029cc:	461c      	mov	r4, r3
 80029ce:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80029d0:	f7fd fdc2 	bl	8000558 <__aeabi_f2d>
 80029d4:	4602      	mov	r2, r0
 80029d6:	460b      	mov	r3, r1
 80029d8:	f107 000c 	add.w	r0, r7, #12
 80029dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80029de:	9104      	str	r1, [sp, #16]
 80029e0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80029e4:	9400      	str	r4, [sp, #0]
 80029e6:	462b      	mov	r3, r5
 80029e8:	4a37      	ldr	r2, [pc, #220]	; (8002ac8 <main+0x30c>)
 80029ea:	2111      	movs	r1, #17
 80029ec:	f002 f99e 	bl	8004d2c <sniprintf>
		  LCD_Clear();
 80029f0:	f7ff fade 	bl	8001fb0 <LCD_Clear>
		  LCD_Print(lcd_msg);
 80029f4:	f107 030c 	add.w	r3, r7, #12
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7ff faa5 	bl	8001f48 <LCD_Print>
		  snprintf(lcd_msg, sizeof(lcd_msg), "DHT: %-2.0f %-2.0f%%", dht_data[0], dht_data[1]);
 80029fe:	6a3b      	ldr	r3, [r7, #32]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7fd fda9 	bl	8000558 <__aeabi_f2d>
 8002a06:	4604      	mov	r4, r0
 8002a08:	460d      	mov	r5, r1
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7fd fda3 	bl	8000558 <__aeabi_f2d>
 8002a12:	4602      	mov	r2, r0
 8002a14:	460b      	mov	r3, r1
 8002a16:	f107 000c 	add.w	r0, r7, #12
 8002a1a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002a1e:	e9cd 4500 	strd	r4, r5, [sp]
 8002a22:	4a2a      	ldr	r2, [pc, #168]	; (8002acc <main+0x310>)
 8002a24:	2111      	movs	r1, #17
 8002a26:	f002 f981 	bl	8004d2c <sniprintf>
		  LCD_SetCursor(1, 0);
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	2001      	movs	r0, #1
 8002a2e:	f7ff faa2 	bl	8001f76 <LCD_SetCursor>
		  LCD_Print(lcd_msg);
 8002a32:	f107 030c 	add.w	r3, r7, #12
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7ff fa86 	bl	8001f48 <LCD_Print>
		  snprintf(lcd_msg, sizeof(lcd_msg), "%3ldm\0", bmp_alt);
 8002a3c:	f107 000c 	add.w	r0, r7, #12
 8002a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a42:	4a23      	ldr	r2, [pc, #140]	; (8002ad0 <main+0x314>)
 8002a44:	2111      	movs	r1, #17
 8002a46:	f002 f971 	bl	8004d2c <sniprintf>
		  LCD_SetCursor(1, 12);
 8002a4a:	210c      	movs	r1, #12
 8002a4c:	2001      	movs	r0, #1
 8002a4e:	f7ff fa92 	bl	8001f76 <LCD_SetCursor>
		  LCD_Print(lcd_msg);
 8002a52:	f107 030c 	add.w	r3, r7, #12
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7ff fa76 	bl	8001f48 <LCD_Print>

		  tick_counter = 2000;
 8002a5c:	4b14      	ldr	r3, [pc, #80]	; (8002ab0 <main+0x2f4>)
 8002a5e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002a62:	601a      	str	r2, [r3, #0]
		  //timer_counter = 2000;
	  }
	  //Если джойстик нажат
	  if (!READ_BIT(GPIOA->IDR, GPIO_IDR_ID5_Msk)) {
 8002a64:	4b1b      	ldr	r3, [pc, #108]	; (8002ad4 <main+0x318>)
 8002a66:	691b      	ldr	r3, [r3, #16]
 8002a68:	f003 0320 	and.w	r3, r3, #32
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d114      	bne.n	8002a9a <main+0x2de>
		  //RTC_Set(9, 14, 00, 21, 6, 24);
		  if (j_on) {
 8002a70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00f      	beq.n	8002a96 <main+0x2da>
			 j_on = 0;
 8002a76:	2300      	movs	r3, #0
 8002a78:	64fb      	str	r3, [r7, #76]	; 0x4c
			 OLED_Fill(0);
 8002a7a:	2000      	movs	r0, #0
 8002a7c:	f7ff fc3a 	bl	80022f4 <OLED_Fill>
		  OLED_DrawBitmap(bstu, 0, 0, 128, 64);
 8002a80:	2340      	movs	r3, #64	; 0x40
 8002a82:	9300      	str	r3, [sp, #0]
 8002a84:	2380      	movs	r3, #128	; 0x80
 8002a86:	2200      	movs	r2, #0
 8002a88:	2100      	movs	r1, #0
 8002a8a:	4813      	ldr	r0, [pc, #76]	; (8002ad8 <main+0x31c>)
 8002a8c:	f7ff fd47 	bl	800251e <OLED_DrawBitmap>
		  OLED_Update();
 8002a90:	f7ff fc48 	bl	8002324 <OLED_Update>
 8002a94:	e001      	b.n	8002a9a <main+0x2de>
		  }
		  else {
			  j_on = 1;		  }
 8002a96:	2301      	movs	r3, #1
 8002a98:	64fb      	str	r3, [r7, #76]	; 0x4c
	  }
	  delay_us(10000);
 8002a9a:	f242 7010 	movw	r0, #10000	; 0x2710
 8002a9e:	f000 fa77 	bl	8002f90 <delay_us>
  {
 8002aa2:	e6c1      	b.n	8002828 <main+0x6c>
 8002aa4:	080077d8 	.word	0x080077d8
 8002aa8:	080077e8 	.word	0x080077e8
 8002aac:	000f4240 	.word	0x000f4240
 8002ab0:	20000614 	.word	0x20000614
 8002ab4:	40b00000 	.word	0x40b00000
 8002ab8:	404f0000 	.word	0x404f0000
 8002abc:	40400000 	.word	0x40400000
 8002ac0:	40240000 	.word	0x40240000
 8002ac4:	40668000 	.word	0x40668000
 8002ac8:	080077f0 	.word	0x080077f0
 8002acc:	08007804 	.word	0x08007804
 8002ad0:	0800781c 	.word	0x0800781c
 8002ad4:	40020000 	.word	0x40020000
 8002ad8:	08007828 	.word	0x08007828

08002adc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b094      	sub	sp, #80	; 0x50
 8002ae0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ae2:	f107 0320 	add.w	r3, r7, #32
 8002ae6:	2230      	movs	r2, #48	; 0x30
 8002ae8:	2100      	movs	r1, #0
 8002aea:	4618      	mov	r0, r3
 8002aec:	f002 fa2a 	bl	8004f44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002af0:	f107 030c 	add.w	r3, r7, #12
 8002af4:	2200      	movs	r2, #0
 8002af6:	601a      	str	r2, [r3, #0]
 8002af8:	605a      	str	r2, [r3, #4]
 8002afa:	609a      	str	r2, [r3, #8]
 8002afc:	60da      	str	r2, [r3, #12]
 8002afe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b00:	2300      	movs	r3, #0
 8002b02:	60bb      	str	r3, [r7, #8]
 8002b04:	4b28      	ldr	r3, [pc, #160]	; (8002ba8 <SystemClock_Config+0xcc>)
 8002b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b08:	4a27      	ldr	r2, [pc, #156]	; (8002ba8 <SystemClock_Config+0xcc>)
 8002b0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b0e:	6413      	str	r3, [r2, #64]	; 0x40
 8002b10:	4b25      	ldr	r3, [pc, #148]	; (8002ba8 <SystemClock_Config+0xcc>)
 8002b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b18:	60bb      	str	r3, [r7, #8]
 8002b1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	607b      	str	r3, [r7, #4]
 8002b20:	4b22      	ldr	r3, [pc, #136]	; (8002bac <SystemClock_Config+0xd0>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a21      	ldr	r2, [pc, #132]	; (8002bac <SystemClock_Config+0xd0>)
 8002b26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b2a:	6013      	str	r3, [r2, #0]
 8002b2c:	4b1f      	ldr	r3, [pc, #124]	; (8002bac <SystemClock_Config+0xd0>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002b34:	607b      	str	r3, [r7, #4]
 8002b36:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002b3c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002b40:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b42:	2302      	movs	r3, #2
 8002b44:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b46:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002b4c:	2308      	movs	r3, #8
 8002b4e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002b50:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002b54:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002b56:	2304      	movs	r3, #4
 8002b58:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002b5a:	2304      	movs	r3, #4
 8002b5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b5e:	f107 0320 	add.w	r3, r7, #32
 8002b62:	4618      	mov	r0, r3
 8002b64:	f000 fec8 	bl	80038f8 <HAL_RCC_OscConfig>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002b6e:	f000 f8a7 	bl	8002cc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b72:	230f      	movs	r3, #15
 8002b74:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b76:	2302      	movs	r3, #2
 8002b78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002b7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b82:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b84:	2300      	movs	r3, #0
 8002b86:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002b88:	f107 030c 	add.w	r3, r7, #12
 8002b8c:	2102      	movs	r1, #2
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f001 f92a 	bl	8003de8 <HAL_RCC_ClockConfig>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002b9a:	f000 f891 	bl	8002cc0 <Error_Handler>
  }
}
 8002b9e:	bf00      	nop
 8002ba0:	3750      	adds	r7, #80	; 0x50
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	40023800 	.word	0x40023800
 8002bac:	40007000 	.word	0x40007000

08002bb0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002bb4:	4b12      	ldr	r3, [pc, #72]	; (8002c00 <MX_I2C1_Init+0x50>)
 8002bb6:	4a13      	ldr	r2, [pc, #76]	; (8002c04 <MX_I2C1_Init+0x54>)
 8002bb8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002bba:	4b11      	ldr	r3, [pc, #68]	; (8002c00 <MX_I2C1_Init+0x50>)
 8002bbc:	4a12      	ldr	r2, [pc, #72]	; (8002c08 <MX_I2C1_Init+0x58>)
 8002bbe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002bc0:	4b0f      	ldr	r3, [pc, #60]	; (8002c00 <MX_I2C1_Init+0x50>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002bc6:	4b0e      	ldr	r3, [pc, #56]	; (8002c00 <MX_I2C1_Init+0x50>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002bcc:	4b0c      	ldr	r3, [pc, #48]	; (8002c00 <MX_I2C1_Init+0x50>)
 8002bce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002bd2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002bd4:	4b0a      	ldr	r3, [pc, #40]	; (8002c00 <MX_I2C1_Init+0x50>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002bda:	4b09      	ldr	r3, [pc, #36]	; (8002c00 <MX_I2C1_Init+0x50>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002be0:	4b07      	ldr	r3, [pc, #28]	; (8002c00 <MX_I2C1_Init+0x50>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002be6:	4b06      	ldr	r3, [pc, #24]	; (8002c00 <MX_I2C1_Init+0x50>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002bec:	4804      	ldr	r0, [pc, #16]	; (8002c00 <MX_I2C1_Init+0x50>)
 8002bee:	f000 fd3f 	bl	8003670 <HAL_I2C_Init>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d001      	beq.n	8002bfc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002bf8:	f000 f862 	bl	8002cc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002bfc:	bf00      	nop
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	20000618 	.word	0x20000618
 8002c04:	40005400 	.word	0x40005400
 8002c08:	000186a0 	.word	0x000186a0

08002c0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b08a      	sub	sp, #40	; 0x28
 8002c10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c12:	f107 0314 	add.w	r3, r7, #20
 8002c16:	2200      	movs	r2, #0
 8002c18:	601a      	str	r2, [r3, #0]
 8002c1a:	605a      	str	r2, [r3, #4]
 8002c1c:	609a      	str	r2, [r3, #8]
 8002c1e:	60da      	str	r2, [r3, #12]
 8002c20:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c22:	2300      	movs	r3, #0
 8002c24:	613b      	str	r3, [r7, #16]
 8002c26:	4b24      	ldr	r3, [pc, #144]	; (8002cb8 <MX_GPIO_Init+0xac>)
 8002c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2a:	4a23      	ldr	r2, [pc, #140]	; (8002cb8 <MX_GPIO_Init+0xac>)
 8002c2c:	f043 0304 	orr.w	r3, r3, #4
 8002c30:	6313      	str	r3, [r2, #48]	; 0x30
 8002c32:	4b21      	ldr	r3, [pc, #132]	; (8002cb8 <MX_GPIO_Init+0xac>)
 8002c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c36:	f003 0304 	and.w	r3, r3, #4
 8002c3a:	613b      	str	r3, [r7, #16]
 8002c3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60fb      	str	r3, [r7, #12]
 8002c42:	4b1d      	ldr	r3, [pc, #116]	; (8002cb8 <MX_GPIO_Init+0xac>)
 8002c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c46:	4a1c      	ldr	r2, [pc, #112]	; (8002cb8 <MX_GPIO_Init+0xac>)
 8002c48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c4e:	4b1a      	ldr	r3, [pc, #104]	; (8002cb8 <MX_GPIO_Init+0xac>)
 8002c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c56:	60fb      	str	r3, [r7, #12]
 8002c58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	60bb      	str	r3, [r7, #8]
 8002c5e:	4b16      	ldr	r3, [pc, #88]	; (8002cb8 <MX_GPIO_Init+0xac>)
 8002c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c62:	4a15      	ldr	r2, [pc, #84]	; (8002cb8 <MX_GPIO_Init+0xac>)
 8002c64:	f043 0301 	orr.w	r3, r3, #1
 8002c68:	6313      	str	r3, [r2, #48]	; 0x30
 8002c6a:	4b13      	ldr	r3, [pc, #76]	; (8002cb8 <MX_GPIO_Init+0xac>)
 8002c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	60bb      	str	r3, [r7, #8]
 8002c74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c76:	2300      	movs	r3, #0
 8002c78:	607b      	str	r3, [r7, #4]
 8002c7a:	4b0f      	ldr	r3, [pc, #60]	; (8002cb8 <MX_GPIO_Init+0xac>)
 8002c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7e:	4a0e      	ldr	r2, [pc, #56]	; (8002cb8 <MX_GPIO_Init+0xac>)
 8002c80:	f043 0302 	orr.w	r3, r3, #2
 8002c84:	6313      	str	r3, [r2, #48]	; 0x30
 8002c86:	4b0c      	ldr	r3, [pc, #48]	; (8002cb8 <MX_GPIO_Init+0xac>)
 8002c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	607b      	str	r3, [r7, #4]
 8002c90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002c92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002c98:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002c9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002ca2:	f107 0314 	add.w	r3, r7, #20
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	4804      	ldr	r0, [pc, #16]	; (8002cbc <MX_GPIO_Init+0xb0>)
 8002caa:	f000 fb5d 	bl	8003368 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002cae:	bf00      	nop
 8002cb0:	3728      	adds	r7, #40	; 0x28
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	40023800 	.word	0x40023800
 8002cbc:	40020800 	.word	0x40020800

08002cc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002cc4:	b672      	cpsid	i
}
 8002cc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002cc8:	e7fe      	b.n	8002cc8 <Error_Handler+0x8>
	...

08002ccc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	607b      	str	r3, [r7, #4]
 8002cd6:	4b10      	ldr	r3, [pc, #64]	; (8002d18 <HAL_MspInit+0x4c>)
 8002cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cda:	4a0f      	ldr	r2, [pc, #60]	; (8002d18 <HAL_MspInit+0x4c>)
 8002cdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ce0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ce2:	4b0d      	ldr	r3, [pc, #52]	; (8002d18 <HAL_MspInit+0x4c>)
 8002ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cea:	607b      	str	r3, [r7, #4]
 8002cec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cee:	2300      	movs	r3, #0
 8002cf0:	603b      	str	r3, [r7, #0]
 8002cf2:	4b09      	ldr	r3, [pc, #36]	; (8002d18 <HAL_MspInit+0x4c>)
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf6:	4a08      	ldr	r2, [pc, #32]	; (8002d18 <HAL_MspInit+0x4c>)
 8002cf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8002cfe:	4b06      	ldr	r3, [pc, #24]	; (8002d18 <HAL_MspInit+0x4c>)
 8002d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d06:	603b      	str	r3, [r7, #0]
 8002d08:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002d0a:	2007      	movs	r0, #7
 8002d0c:	f000 faf8 	bl	8003300 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d10:	bf00      	nop
 8002d12:	3708      	adds	r7, #8
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	40023800 	.word	0x40023800

08002d1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b08a      	sub	sp, #40	; 0x28
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d24:	f107 0314 	add.w	r3, r7, #20
 8002d28:	2200      	movs	r2, #0
 8002d2a:	601a      	str	r2, [r3, #0]
 8002d2c:	605a      	str	r2, [r3, #4]
 8002d2e:	609a      	str	r2, [r3, #8]
 8002d30:	60da      	str	r2, [r3, #12]
 8002d32:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a19      	ldr	r2, [pc, #100]	; (8002da0 <HAL_I2C_MspInit+0x84>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d12c      	bne.n	8002d98 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d3e:	2300      	movs	r3, #0
 8002d40:	613b      	str	r3, [r7, #16]
 8002d42:	4b18      	ldr	r3, [pc, #96]	; (8002da4 <HAL_I2C_MspInit+0x88>)
 8002d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d46:	4a17      	ldr	r2, [pc, #92]	; (8002da4 <HAL_I2C_MspInit+0x88>)
 8002d48:	f043 0302 	orr.w	r3, r3, #2
 8002d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d4e:	4b15      	ldr	r3, [pc, #84]	; (8002da4 <HAL_I2C_MspInit+0x88>)
 8002d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	613b      	str	r3, [r7, #16]
 8002d58:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002d5a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002d5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d60:	2312      	movs	r3, #18
 8002d62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d64:	2300      	movs	r3, #0
 8002d66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002d6c:	2304      	movs	r3, #4
 8002d6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d70:	f107 0314 	add.w	r3, r7, #20
 8002d74:	4619      	mov	r1, r3
 8002d76:	480c      	ldr	r0, [pc, #48]	; (8002da8 <HAL_I2C_MspInit+0x8c>)
 8002d78:	f000 faf6 	bl	8003368 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	60fb      	str	r3, [r7, #12]
 8002d80:	4b08      	ldr	r3, [pc, #32]	; (8002da4 <HAL_I2C_MspInit+0x88>)
 8002d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d84:	4a07      	ldr	r2, [pc, #28]	; (8002da4 <HAL_I2C_MspInit+0x88>)
 8002d86:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d8a:	6413      	str	r3, [r2, #64]	; 0x40
 8002d8c:	4b05      	ldr	r3, [pc, #20]	; (8002da4 <HAL_I2C_MspInit+0x88>)
 8002d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d94:	60fb      	str	r3, [r7, #12]
 8002d96:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002d98:	bf00      	nop
 8002d9a:	3728      	adds	r7, #40	; 0x28
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	40005400 	.word	0x40005400
 8002da4:	40023800 	.word	0x40023800
 8002da8:	40020400 	.word	0x40020400

08002dac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002db0:	e7fe      	b.n	8002db0 <NMI_Handler+0x4>

08002db2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002db2:	b480      	push	{r7}
 8002db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002db6:	e7fe      	b.n	8002db6 <HardFault_Handler+0x4>

08002db8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002dbc:	e7fe      	b.n	8002dbc <MemManage_Handler+0x4>

08002dbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dc2:	e7fe      	b.n	8002dc2 <BusFault_Handler+0x4>

08002dc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002dc8:	e7fe      	b.n	8002dc8 <UsageFault_Handler+0x4>

08002dca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002dce:	bf00      	nop
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ddc:	bf00      	nop
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr

08002de6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002de6:	b480      	push	{r7}
 8002de8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002dea:	bf00      	nop
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
		timer_counter--;
		tick_counter = 0;
	} else {
		tick_counter++;
	}*/
	if (tick_counter > 0)
 8002df8:	4b06      	ldr	r3, [pc, #24]	; (8002e14 <SysTick_Handler+0x20>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d004      	beq.n	8002e0a <SysTick_Handler+0x16>
	tick_counter--;
 8002e00:	4b04      	ldr	r3, [pc, #16]	; (8002e14 <SysTick_Handler+0x20>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	3b01      	subs	r3, #1
 8002e06:	4a03      	ldr	r2, [pc, #12]	; (8002e14 <SysTick_Handler+0x20>)
 8002e08:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e0a:	f000 f983 	bl	8003114 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e0e:	bf00      	nop
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	20000614 	.word	0x20000614

08002e18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	af00      	add	r7, sp, #0
  return 1;
 8002e1c:	2301      	movs	r3, #1
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <_kill>:

int _kill(int pid, int sig)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002e32:	f002 f8d9 	bl	8004fe8 <__errno>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2216      	movs	r2, #22
 8002e3a:	601a      	str	r2, [r3, #0]
  return -1;
 8002e3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3708      	adds	r7, #8
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <_exit>:

void _exit (int status)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002e50:	f04f 31ff 	mov.w	r1, #4294967295
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f7ff ffe7 	bl	8002e28 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002e5a:	e7fe      	b.n	8002e5a <_exit+0x12>

08002e5c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b086      	sub	sp, #24
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e68:	2300      	movs	r3, #0
 8002e6a:	617b      	str	r3, [r7, #20]
 8002e6c:	e00a      	b.n	8002e84 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002e6e:	f3af 8000 	nop.w
 8002e72:	4601      	mov	r1, r0
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	1c5a      	adds	r2, r3, #1
 8002e78:	60ba      	str	r2, [r7, #8]
 8002e7a:	b2ca      	uxtb	r2, r1
 8002e7c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	3301      	adds	r3, #1
 8002e82:	617b      	str	r3, [r7, #20]
 8002e84:	697a      	ldr	r2, [r7, #20]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	dbf0      	blt.n	8002e6e <_read+0x12>
  }

  return len;
 8002e8c:	687b      	ldr	r3, [r7, #4]
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3718      	adds	r7, #24
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002e96:	b480      	push	{r7}
 8002e98:	b083      	sub	sp, #12
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr

08002eae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002eae:	b480      	push	{r7}
 8002eb0:	b083      	sub	sp, #12
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
 8002eb6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ebe:	605a      	str	r2, [r3, #4]
  return 0;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr

08002ece <_isatty>:

int _isatty(int file)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	b083      	sub	sp, #12
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ed6:	2301      	movs	r3, #1
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b085      	sub	sp, #20
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3714      	adds	r7, #20
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
	...

08002f00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b086      	sub	sp, #24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f08:	4a14      	ldr	r2, [pc, #80]	; (8002f5c <_sbrk+0x5c>)
 8002f0a:	4b15      	ldr	r3, [pc, #84]	; (8002f60 <_sbrk+0x60>)
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f14:	4b13      	ldr	r3, [pc, #76]	; (8002f64 <_sbrk+0x64>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d102      	bne.n	8002f22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f1c:	4b11      	ldr	r3, [pc, #68]	; (8002f64 <_sbrk+0x64>)
 8002f1e:	4a12      	ldr	r2, [pc, #72]	; (8002f68 <_sbrk+0x68>)
 8002f20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f22:	4b10      	ldr	r3, [pc, #64]	; (8002f64 <_sbrk+0x64>)
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4413      	add	r3, r2
 8002f2a:	693a      	ldr	r2, [r7, #16]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d207      	bcs.n	8002f40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f30:	f002 f85a 	bl	8004fe8 <__errno>
 8002f34:	4603      	mov	r3, r0
 8002f36:	220c      	movs	r2, #12
 8002f38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f3e:	e009      	b.n	8002f54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f40:	4b08      	ldr	r3, [pc, #32]	; (8002f64 <_sbrk+0x64>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f46:	4b07      	ldr	r3, [pc, #28]	; (8002f64 <_sbrk+0x64>)
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	4a05      	ldr	r2, [pc, #20]	; (8002f64 <_sbrk+0x64>)
 8002f50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f52:	68fb      	ldr	r3, [r7, #12]
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3718      	adds	r7, #24
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	20020000 	.word	0x20020000
 8002f60:	00000400 	.word	0x00000400
 8002f64:	2000066c 	.word	0x2000066c
 8002f68:	200007c0 	.word	0x200007c0

08002f6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f70:	4b06      	ldr	r3, [pc, #24]	; (8002f8c <SystemInit+0x20>)
 8002f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f76:	4a05      	ldr	r2, [pc, #20]	; (8002f8c <SystemInit+0x20>)
 8002f78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f80:	bf00      	nop
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	e000ed00 	.word	0xe000ed00

08002f90 <delay_us>:
#include "timer_delay.h"


//Задержка в микросекундах
void delay_us(uint32_t us) {
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
    WRITE_REG(TIM5->CNT, 0x00000000);
 8002f98:	4b0d      	ldr	r3, [pc, #52]	; (8002fd0 <delay_us+0x40>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	625a      	str	r2, [r3, #36]	; 0x24
    SET_BIT(TIM5->CR1, TIM_CR1_CEN);
 8002f9e:	4b0c      	ldr	r3, [pc, #48]	; (8002fd0 <delay_us+0x40>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a0b      	ldr	r2, [pc, #44]	; (8002fd0 <delay_us+0x40>)
 8002fa4:	f043 0301 	orr.w	r3, r3, #1
 8002fa8:	6013      	str	r3, [r2, #0]
    while (READ_REG(TIM5->CNT) < us) {}
 8002faa:	bf00      	nop
 8002fac:	4b08      	ldr	r3, [pc, #32]	; (8002fd0 <delay_us+0x40>)
 8002fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d8fa      	bhi.n	8002fac <delay_us+0x1c>
    CLEAR_BIT(TIM5->CR1, TIM_CR1_CEN);
 8002fb6:	4b06      	ldr	r3, [pc, #24]	; (8002fd0 <delay_us+0x40>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a05      	ldr	r2, [pc, #20]	; (8002fd0 <delay_us+0x40>)
 8002fbc:	f023 0301 	bic.w	r3, r3, #1
 8002fc0:	6013      	str	r3, [r2, #0]
}
 8002fc2:	bf00      	nop
 8002fc4:	370c      	adds	r7, #12
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	40000c00 	.word	0x40000c00

08002fd4 <Delay_Init>:

void Delay_Init() {
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
    //Частота 84Мгц / 84 = 1 млн тиков/сек = 1 тик в мкс
    SET_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM5EN);
 8002fd8:	4b0e      	ldr	r3, [pc, #56]	; (8003014 <Delay_Init+0x40>)
 8002fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fdc:	4a0d      	ldr	r2, [pc, #52]	; (8003014 <Delay_Init+0x40>)
 8002fde:	f043 0308 	orr.w	r3, r3, #8
 8002fe2:	6413      	str	r3, [r2, #64]	; 0x40
    CLEAR_BIT(TIM5->CR1, TIM_CR1_CEN);
 8002fe4:	4b0c      	ldr	r3, [pc, #48]	; (8003018 <Delay_Init+0x44>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a0b      	ldr	r2, [pc, #44]	; (8003018 <Delay_Init+0x44>)
 8002fea:	f023 0301 	bic.w	r3, r3, #1
 8002fee:	6013      	str	r3, [r2, #0]
    //NVIC_EnableIRQ(TIM2_IRQn);
    WRITE_REG(TIM5->PSC, 83);
 8002ff0:	4b09      	ldr	r3, [pc, #36]	; (8003018 <Delay_Init+0x44>)
 8002ff2:	2253      	movs	r2, #83	; 0x53
 8002ff4:	629a      	str	r2, [r3, #40]	; 0x28
    WRITE_REG(TIM5->ARR, 0xFFFFFFF);
 8002ff6:	4b08      	ldr	r3, [pc, #32]	; (8003018 <Delay_Init+0x44>)
 8002ff8:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8002ffc:	62da      	str	r2, [r3, #44]	; 0x2c
    SET_BIT(TIM5->EGR, TIM_EGR_UG);
 8002ffe:	4b06      	ldr	r3, [pc, #24]	; (8003018 <Delay_Init+0x44>)
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	4a05      	ldr	r2, [pc, #20]	; (8003018 <Delay_Init+0x44>)
 8003004:	f043 0301 	orr.w	r3, r3, #1
 8003008:	6153      	str	r3, [r2, #20]
}
 800300a:	bf00      	nop
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr
 8003014:	40023800 	.word	0x40023800
 8003018:	40000c00 	.word	0x40000c00

0800301c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800301c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003054 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003020:	f7ff ffa4 	bl	8002f6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003024:	480c      	ldr	r0, [pc, #48]	; (8003058 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003026:	490d      	ldr	r1, [pc, #52]	; (800305c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003028:	4a0d      	ldr	r2, [pc, #52]	; (8003060 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800302a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800302c:	e002      	b.n	8003034 <LoopCopyDataInit>

0800302e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800302e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003030:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003032:	3304      	adds	r3, #4

08003034 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003034:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003036:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003038:	d3f9      	bcc.n	800302e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800303a:	4a0a      	ldr	r2, [pc, #40]	; (8003064 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800303c:	4c0a      	ldr	r4, [pc, #40]	; (8003068 <LoopFillZerobss+0x22>)
  movs r3, #0
 800303e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003040:	e001      	b.n	8003046 <LoopFillZerobss>

08003042 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003042:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003044:	3204      	adds	r2, #4

08003046 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003046:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003048:	d3fb      	bcc.n	8003042 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800304a:	f001 ffd3 	bl	8004ff4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800304e:	f7ff fbb5 	bl	80027bc <main>
  bx  lr    
 8003052:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003054:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003058:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800305c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8003060:	08007fdc 	.word	0x08007fdc
  ldr r2, =_sbss
 8003064:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8003068:	200007c0 	.word	0x200007c0

0800306c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800306c:	e7fe      	b.n	800306c <ADC_IRQHandler>
	...

08003070 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003074:	4b0e      	ldr	r3, [pc, #56]	; (80030b0 <HAL_Init+0x40>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a0d      	ldr	r2, [pc, #52]	; (80030b0 <HAL_Init+0x40>)
 800307a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800307e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003080:	4b0b      	ldr	r3, [pc, #44]	; (80030b0 <HAL_Init+0x40>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a0a      	ldr	r2, [pc, #40]	; (80030b0 <HAL_Init+0x40>)
 8003086:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800308a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800308c:	4b08      	ldr	r3, [pc, #32]	; (80030b0 <HAL_Init+0x40>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a07      	ldr	r2, [pc, #28]	; (80030b0 <HAL_Init+0x40>)
 8003092:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003096:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003098:	2003      	movs	r0, #3
 800309a:	f000 f931 	bl	8003300 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800309e:	2000      	movs	r0, #0
 80030a0:	f000 f808 	bl	80030b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030a4:	f7ff fe12 	bl	8002ccc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	40023c00 	.word	0x40023c00

080030b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030bc:	4b12      	ldr	r3, [pc, #72]	; (8003108 <HAL_InitTick+0x54>)
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	4b12      	ldr	r3, [pc, #72]	; (800310c <HAL_InitTick+0x58>)
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	4619      	mov	r1, r3
 80030c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80030ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d2:	4618      	mov	r0, r3
 80030d4:	f000 f93b 	bl	800334e <HAL_SYSTICK_Config>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d001      	beq.n	80030e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e00e      	b.n	8003100 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2b0f      	cmp	r3, #15
 80030e6:	d80a      	bhi.n	80030fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030e8:	2200      	movs	r2, #0
 80030ea:	6879      	ldr	r1, [r7, #4]
 80030ec:	f04f 30ff 	mov.w	r0, #4294967295
 80030f0:	f000 f911 	bl	8003316 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030f4:	4a06      	ldr	r2, [pc, #24]	; (8003110 <HAL_InitTick+0x5c>)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030fa:	2300      	movs	r3, #0
 80030fc:	e000      	b.n	8003100 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
}
 8003100:	4618      	mov	r0, r3
 8003102:	3708      	adds	r7, #8
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	20000004 	.word	0x20000004
 800310c:	2000000c 	.word	0x2000000c
 8003110:	20000008 	.word	0x20000008

08003114 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003114:	b480      	push	{r7}
 8003116:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003118:	4b06      	ldr	r3, [pc, #24]	; (8003134 <HAL_IncTick+0x20>)
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	461a      	mov	r2, r3
 800311e:	4b06      	ldr	r3, [pc, #24]	; (8003138 <HAL_IncTick+0x24>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4413      	add	r3, r2
 8003124:	4a04      	ldr	r2, [pc, #16]	; (8003138 <HAL_IncTick+0x24>)
 8003126:	6013      	str	r3, [r2, #0]
}
 8003128:	bf00      	nop
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	2000000c 	.word	0x2000000c
 8003138:	20000670 	.word	0x20000670

0800313c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
  return uwTick;
 8003140:	4b03      	ldr	r3, [pc, #12]	; (8003150 <HAL_GetTick+0x14>)
 8003142:	681b      	ldr	r3, [r3, #0]
}
 8003144:	4618      	mov	r0, r3
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	20000670 	.word	0x20000670

08003154 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800315c:	f7ff ffee 	bl	800313c <HAL_GetTick>
 8003160:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800316c:	d005      	beq.n	800317a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800316e:	4b0a      	ldr	r3, [pc, #40]	; (8003198 <HAL_Delay+0x44>)
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	461a      	mov	r2, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	4413      	add	r3, r2
 8003178:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800317a:	bf00      	nop
 800317c:	f7ff ffde 	bl	800313c <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	68fa      	ldr	r2, [r7, #12]
 8003188:	429a      	cmp	r2, r3
 800318a:	d8f7      	bhi.n	800317c <HAL_Delay+0x28>
  {
  }
}
 800318c:	bf00      	nop
 800318e:	bf00      	nop
 8003190:	3710      	adds	r7, #16
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	2000000c 	.word	0x2000000c

0800319c <__NVIC_SetPriorityGrouping>:
{
 800319c:	b480      	push	{r7}
 800319e:	b085      	sub	sp, #20
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f003 0307 	and.w	r3, r3, #7
 80031aa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031ac:	4b0c      	ldr	r3, [pc, #48]	; (80031e0 <__NVIC_SetPriorityGrouping+0x44>)
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031b2:	68ba      	ldr	r2, [r7, #8]
 80031b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031b8:	4013      	ands	r3, r2
 80031ba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031ce:	4a04      	ldr	r2, [pc, #16]	; (80031e0 <__NVIC_SetPriorityGrouping+0x44>)
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	60d3      	str	r3, [r2, #12]
}
 80031d4:	bf00      	nop
 80031d6:	3714      	adds	r7, #20
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr
 80031e0:	e000ed00 	.word	0xe000ed00

080031e4 <__NVIC_GetPriorityGrouping>:
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031e8:	4b04      	ldr	r3, [pc, #16]	; (80031fc <__NVIC_GetPriorityGrouping+0x18>)
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	0a1b      	lsrs	r3, r3, #8
 80031ee:	f003 0307 	and.w	r3, r3, #7
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr
 80031fc:	e000ed00 	.word	0xe000ed00

08003200 <__NVIC_SetPriority>:
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	4603      	mov	r3, r0
 8003208:	6039      	str	r1, [r7, #0]
 800320a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800320c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003210:	2b00      	cmp	r3, #0
 8003212:	db0a      	blt.n	800322a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	b2da      	uxtb	r2, r3
 8003218:	490c      	ldr	r1, [pc, #48]	; (800324c <__NVIC_SetPriority+0x4c>)
 800321a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800321e:	0112      	lsls	r2, r2, #4
 8003220:	b2d2      	uxtb	r2, r2
 8003222:	440b      	add	r3, r1
 8003224:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003228:	e00a      	b.n	8003240 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	b2da      	uxtb	r2, r3
 800322e:	4908      	ldr	r1, [pc, #32]	; (8003250 <__NVIC_SetPriority+0x50>)
 8003230:	79fb      	ldrb	r3, [r7, #7]
 8003232:	f003 030f 	and.w	r3, r3, #15
 8003236:	3b04      	subs	r3, #4
 8003238:	0112      	lsls	r2, r2, #4
 800323a:	b2d2      	uxtb	r2, r2
 800323c:	440b      	add	r3, r1
 800323e:	761a      	strb	r2, [r3, #24]
}
 8003240:	bf00      	nop
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr
 800324c:	e000e100 	.word	0xe000e100
 8003250:	e000ed00 	.word	0xe000ed00

08003254 <NVIC_EncodePriority>:
{
 8003254:	b480      	push	{r7}
 8003256:	b089      	sub	sp, #36	; 0x24
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f003 0307 	and.w	r3, r3, #7
 8003266:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	f1c3 0307 	rsb	r3, r3, #7
 800326e:	2b04      	cmp	r3, #4
 8003270:	bf28      	it	cs
 8003272:	2304      	movcs	r3, #4
 8003274:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	3304      	adds	r3, #4
 800327a:	2b06      	cmp	r3, #6
 800327c:	d902      	bls.n	8003284 <NVIC_EncodePriority+0x30>
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	3b03      	subs	r3, #3
 8003282:	e000      	b.n	8003286 <NVIC_EncodePriority+0x32>
 8003284:	2300      	movs	r3, #0
 8003286:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003288:	f04f 32ff 	mov.w	r2, #4294967295
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	fa02 f303 	lsl.w	r3, r2, r3
 8003292:	43da      	mvns	r2, r3
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	401a      	ands	r2, r3
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800329c:	f04f 31ff 	mov.w	r1, #4294967295
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	fa01 f303 	lsl.w	r3, r1, r3
 80032a6:	43d9      	mvns	r1, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032ac:	4313      	orrs	r3, r2
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3724      	adds	r7, #36	; 0x24
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
	...

080032bc <SysTick_Config>:
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	3b01      	subs	r3, #1
 80032c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032cc:	d301      	bcc.n	80032d2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80032ce:	2301      	movs	r3, #1
 80032d0:	e00f      	b.n	80032f2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032d2:	4a0a      	ldr	r2, [pc, #40]	; (80032fc <SysTick_Config+0x40>)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	3b01      	subs	r3, #1
 80032d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032da:	210f      	movs	r1, #15
 80032dc:	f04f 30ff 	mov.w	r0, #4294967295
 80032e0:	f7ff ff8e 	bl	8003200 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032e4:	4b05      	ldr	r3, [pc, #20]	; (80032fc <SysTick_Config+0x40>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032ea:	4b04      	ldr	r3, [pc, #16]	; (80032fc <SysTick_Config+0x40>)
 80032ec:	2207      	movs	r2, #7
 80032ee:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3708      	adds	r7, #8
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	e000e010 	.word	0xe000e010

08003300 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f7ff ff47 	bl	800319c <__NVIC_SetPriorityGrouping>
}
 800330e:	bf00      	nop
 8003310:	3708      	adds	r7, #8
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}

08003316 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003316:	b580      	push	{r7, lr}
 8003318:	b086      	sub	sp, #24
 800331a:	af00      	add	r7, sp, #0
 800331c:	4603      	mov	r3, r0
 800331e:	60b9      	str	r1, [r7, #8]
 8003320:	607a      	str	r2, [r7, #4]
 8003322:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003324:	2300      	movs	r3, #0
 8003326:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003328:	f7ff ff5c 	bl	80031e4 <__NVIC_GetPriorityGrouping>
 800332c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	68b9      	ldr	r1, [r7, #8]
 8003332:	6978      	ldr	r0, [r7, #20]
 8003334:	f7ff ff8e 	bl	8003254 <NVIC_EncodePriority>
 8003338:	4602      	mov	r2, r0
 800333a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800333e:	4611      	mov	r1, r2
 8003340:	4618      	mov	r0, r3
 8003342:	f7ff ff5d 	bl	8003200 <__NVIC_SetPriority>
}
 8003346:	bf00      	nop
 8003348:	3718      	adds	r7, #24
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800334e:	b580      	push	{r7, lr}
 8003350:	b082      	sub	sp, #8
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f7ff ffb0 	bl	80032bc <SysTick_Config>
 800335c:	4603      	mov	r3, r0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3708      	adds	r7, #8
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
	...

08003368 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003368:	b480      	push	{r7}
 800336a:	b089      	sub	sp, #36	; 0x24
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003372:	2300      	movs	r3, #0
 8003374:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003376:	2300      	movs	r3, #0
 8003378:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800337a:	2300      	movs	r3, #0
 800337c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800337e:	2300      	movs	r3, #0
 8003380:	61fb      	str	r3, [r7, #28]
 8003382:	e159      	b.n	8003638 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003384:	2201      	movs	r2, #1
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	fa02 f303 	lsl.w	r3, r2, r3
 800338c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	4013      	ands	r3, r2
 8003396:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003398:	693a      	ldr	r2, [r7, #16]
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	429a      	cmp	r2, r3
 800339e:	f040 8148 	bne.w	8003632 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f003 0303 	and.w	r3, r3, #3
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d005      	beq.n	80033ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d130      	bne.n	800341c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	005b      	lsls	r3, r3, #1
 80033c4:	2203      	movs	r2, #3
 80033c6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ca:	43db      	mvns	r3, r3
 80033cc:	69ba      	ldr	r2, [r7, #24]
 80033ce:	4013      	ands	r3, r2
 80033d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	68da      	ldr	r2, [r3, #12]
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	005b      	lsls	r3, r3, #1
 80033da:	fa02 f303 	lsl.w	r3, r2, r3
 80033de:	69ba      	ldr	r2, [r7, #24]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	69ba      	ldr	r2, [r7, #24]
 80033e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033f0:	2201      	movs	r2, #1
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	fa02 f303 	lsl.w	r3, r2, r3
 80033f8:	43db      	mvns	r3, r3
 80033fa:	69ba      	ldr	r2, [r7, #24]
 80033fc:	4013      	ands	r3, r2
 80033fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	091b      	lsrs	r3, r3, #4
 8003406:	f003 0201 	and.w	r2, r3, #1
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	69ba      	ldr	r2, [r7, #24]
 8003412:	4313      	orrs	r3, r2
 8003414:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f003 0303 	and.w	r3, r3, #3
 8003424:	2b03      	cmp	r3, #3
 8003426:	d017      	beq.n	8003458 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	2203      	movs	r2, #3
 8003434:	fa02 f303 	lsl.w	r3, r2, r3
 8003438:	43db      	mvns	r3, r3
 800343a:	69ba      	ldr	r2, [r7, #24]
 800343c:	4013      	ands	r3, r2
 800343e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	689a      	ldr	r2, [r3, #8]
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	005b      	lsls	r3, r3, #1
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	4313      	orrs	r3, r2
 8003450:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f003 0303 	and.w	r3, r3, #3
 8003460:	2b02      	cmp	r3, #2
 8003462:	d123      	bne.n	80034ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	08da      	lsrs	r2, r3, #3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	3208      	adds	r2, #8
 800346c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003470:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	f003 0307 	and.w	r3, r3, #7
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	220f      	movs	r2, #15
 800347c:	fa02 f303 	lsl.w	r3, r2, r3
 8003480:	43db      	mvns	r3, r3
 8003482:	69ba      	ldr	r2, [r7, #24]
 8003484:	4013      	ands	r3, r2
 8003486:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	691a      	ldr	r2, [r3, #16]
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	f003 0307 	and.w	r3, r3, #7
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	fa02 f303 	lsl.w	r3, r2, r3
 8003498:	69ba      	ldr	r2, [r7, #24]
 800349a:	4313      	orrs	r3, r2
 800349c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	08da      	lsrs	r2, r3, #3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	3208      	adds	r2, #8
 80034a6:	69b9      	ldr	r1, [r7, #24]
 80034a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	005b      	lsls	r3, r3, #1
 80034b6:	2203      	movs	r2, #3
 80034b8:	fa02 f303 	lsl.w	r3, r2, r3
 80034bc:	43db      	mvns	r3, r3
 80034be:	69ba      	ldr	r2, [r7, #24]
 80034c0:	4013      	ands	r3, r2
 80034c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f003 0203 	and.w	r2, r3, #3
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	005b      	lsls	r3, r3, #1
 80034d0:	fa02 f303 	lsl.w	r3, r2, r3
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	f000 80a2 	beq.w	8003632 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034ee:	2300      	movs	r3, #0
 80034f0:	60fb      	str	r3, [r7, #12]
 80034f2:	4b57      	ldr	r3, [pc, #348]	; (8003650 <HAL_GPIO_Init+0x2e8>)
 80034f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f6:	4a56      	ldr	r2, [pc, #344]	; (8003650 <HAL_GPIO_Init+0x2e8>)
 80034f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034fc:	6453      	str	r3, [r2, #68]	; 0x44
 80034fe:	4b54      	ldr	r3, [pc, #336]	; (8003650 <HAL_GPIO_Init+0x2e8>)
 8003500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003502:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003506:	60fb      	str	r3, [r7, #12]
 8003508:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800350a:	4a52      	ldr	r2, [pc, #328]	; (8003654 <HAL_GPIO_Init+0x2ec>)
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	089b      	lsrs	r3, r3, #2
 8003510:	3302      	adds	r3, #2
 8003512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003516:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	f003 0303 	and.w	r3, r3, #3
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	220f      	movs	r2, #15
 8003522:	fa02 f303 	lsl.w	r3, r2, r3
 8003526:	43db      	mvns	r3, r3
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	4013      	ands	r3, r2
 800352c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a49      	ldr	r2, [pc, #292]	; (8003658 <HAL_GPIO_Init+0x2f0>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d019      	beq.n	800356a <HAL_GPIO_Init+0x202>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a48      	ldr	r2, [pc, #288]	; (800365c <HAL_GPIO_Init+0x2f4>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d013      	beq.n	8003566 <HAL_GPIO_Init+0x1fe>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a47      	ldr	r2, [pc, #284]	; (8003660 <HAL_GPIO_Init+0x2f8>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d00d      	beq.n	8003562 <HAL_GPIO_Init+0x1fa>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a46      	ldr	r2, [pc, #280]	; (8003664 <HAL_GPIO_Init+0x2fc>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d007      	beq.n	800355e <HAL_GPIO_Init+0x1f6>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a45      	ldr	r2, [pc, #276]	; (8003668 <HAL_GPIO_Init+0x300>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d101      	bne.n	800355a <HAL_GPIO_Init+0x1f2>
 8003556:	2304      	movs	r3, #4
 8003558:	e008      	b.n	800356c <HAL_GPIO_Init+0x204>
 800355a:	2307      	movs	r3, #7
 800355c:	e006      	b.n	800356c <HAL_GPIO_Init+0x204>
 800355e:	2303      	movs	r3, #3
 8003560:	e004      	b.n	800356c <HAL_GPIO_Init+0x204>
 8003562:	2302      	movs	r3, #2
 8003564:	e002      	b.n	800356c <HAL_GPIO_Init+0x204>
 8003566:	2301      	movs	r3, #1
 8003568:	e000      	b.n	800356c <HAL_GPIO_Init+0x204>
 800356a:	2300      	movs	r3, #0
 800356c:	69fa      	ldr	r2, [r7, #28]
 800356e:	f002 0203 	and.w	r2, r2, #3
 8003572:	0092      	lsls	r2, r2, #2
 8003574:	4093      	lsls	r3, r2
 8003576:	69ba      	ldr	r2, [r7, #24]
 8003578:	4313      	orrs	r3, r2
 800357a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800357c:	4935      	ldr	r1, [pc, #212]	; (8003654 <HAL_GPIO_Init+0x2ec>)
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	089b      	lsrs	r3, r3, #2
 8003582:	3302      	adds	r3, #2
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800358a:	4b38      	ldr	r3, [pc, #224]	; (800366c <HAL_GPIO_Init+0x304>)
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	43db      	mvns	r3, r3
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	4013      	ands	r3, r2
 8003598:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d003      	beq.n	80035ae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80035a6:	69ba      	ldr	r2, [r7, #24]
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035ae:	4a2f      	ldr	r2, [pc, #188]	; (800366c <HAL_GPIO_Init+0x304>)
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035b4:	4b2d      	ldr	r3, [pc, #180]	; (800366c <HAL_GPIO_Init+0x304>)
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	43db      	mvns	r3, r3
 80035be:	69ba      	ldr	r2, [r7, #24]
 80035c0:	4013      	ands	r3, r2
 80035c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d003      	beq.n	80035d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035d8:	4a24      	ldr	r2, [pc, #144]	; (800366c <HAL_GPIO_Init+0x304>)
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80035de:	4b23      	ldr	r3, [pc, #140]	; (800366c <HAL_GPIO_Init+0x304>)
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	43db      	mvns	r3, r3
 80035e8:	69ba      	ldr	r2, [r7, #24]
 80035ea:	4013      	ands	r3, r2
 80035ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d003      	beq.n	8003602 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80035fa:	69ba      	ldr	r2, [r7, #24]
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	4313      	orrs	r3, r2
 8003600:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003602:	4a1a      	ldr	r2, [pc, #104]	; (800366c <HAL_GPIO_Init+0x304>)
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003608:	4b18      	ldr	r3, [pc, #96]	; (800366c <HAL_GPIO_Init+0x304>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	43db      	mvns	r3, r3
 8003612:	69ba      	ldr	r2, [r7, #24]
 8003614:	4013      	ands	r3, r2
 8003616:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d003      	beq.n	800362c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	4313      	orrs	r3, r2
 800362a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800362c:	4a0f      	ldr	r2, [pc, #60]	; (800366c <HAL_GPIO_Init+0x304>)
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	3301      	adds	r3, #1
 8003636:	61fb      	str	r3, [r7, #28]
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	2b0f      	cmp	r3, #15
 800363c:	f67f aea2 	bls.w	8003384 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003640:	bf00      	nop
 8003642:	bf00      	nop
 8003644:	3724      	adds	r7, #36	; 0x24
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	40023800 	.word	0x40023800
 8003654:	40013800 	.word	0x40013800
 8003658:	40020000 	.word	0x40020000
 800365c:	40020400 	.word	0x40020400
 8003660:	40020800 	.word	0x40020800
 8003664:	40020c00 	.word	0x40020c00
 8003668:	40021000 	.word	0x40021000
 800366c:	40013c00 	.word	0x40013c00

08003670 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d101      	bne.n	8003682 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e12b      	b.n	80038da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d106      	bne.n	800369c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f7ff fb40 	bl	8002d1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2224      	movs	r2, #36	; 0x24
 80036a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f022 0201 	bic.w	r2, r2, #1
 80036b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80036d4:	f000 fd80 	bl	80041d8 <HAL_RCC_GetPCLK1Freq>
 80036d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	4a81      	ldr	r2, [pc, #516]	; (80038e4 <HAL_I2C_Init+0x274>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d807      	bhi.n	80036f4 <HAL_I2C_Init+0x84>
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	4a80      	ldr	r2, [pc, #512]	; (80038e8 <HAL_I2C_Init+0x278>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	bf94      	ite	ls
 80036ec:	2301      	movls	r3, #1
 80036ee:	2300      	movhi	r3, #0
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	e006      	b.n	8003702 <HAL_I2C_Init+0x92>
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	4a7d      	ldr	r2, [pc, #500]	; (80038ec <HAL_I2C_Init+0x27c>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	bf94      	ite	ls
 80036fc:	2301      	movls	r3, #1
 80036fe:	2300      	movhi	r3, #0
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d001      	beq.n	800370a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e0e7      	b.n	80038da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	4a78      	ldr	r2, [pc, #480]	; (80038f0 <HAL_I2C_Init+0x280>)
 800370e:	fba2 2303 	umull	r2, r3, r2, r3
 8003712:	0c9b      	lsrs	r3, r3, #18
 8003714:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68ba      	ldr	r2, [r7, #8]
 8003726:	430a      	orrs	r2, r1
 8003728:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	6a1b      	ldr	r3, [r3, #32]
 8003730:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	4a6a      	ldr	r2, [pc, #424]	; (80038e4 <HAL_I2C_Init+0x274>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d802      	bhi.n	8003744 <HAL_I2C_Init+0xd4>
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	3301      	adds	r3, #1
 8003742:	e009      	b.n	8003758 <HAL_I2C_Init+0xe8>
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800374a:	fb02 f303 	mul.w	r3, r2, r3
 800374e:	4a69      	ldr	r2, [pc, #420]	; (80038f4 <HAL_I2C_Init+0x284>)
 8003750:	fba2 2303 	umull	r2, r3, r2, r3
 8003754:	099b      	lsrs	r3, r3, #6
 8003756:	3301      	adds	r3, #1
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	6812      	ldr	r2, [r2, #0]
 800375c:	430b      	orrs	r3, r1
 800375e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	69db      	ldr	r3, [r3, #28]
 8003766:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800376a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	495c      	ldr	r1, [pc, #368]	; (80038e4 <HAL_I2C_Init+0x274>)
 8003774:	428b      	cmp	r3, r1
 8003776:	d819      	bhi.n	80037ac <HAL_I2C_Init+0x13c>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	1e59      	subs	r1, r3, #1
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	005b      	lsls	r3, r3, #1
 8003782:	fbb1 f3f3 	udiv	r3, r1, r3
 8003786:	1c59      	adds	r1, r3, #1
 8003788:	f640 73fc 	movw	r3, #4092	; 0xffc
 800378c:	400b      	ands	r3, r1
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00a      	beq.n	80037a8 <HAL_I2C_Init+0x138>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	1e59      	subs	r1, r3, #1
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	fbb1 f3f3 	udiv	r3, r1, r3
 80037a0:	3301      	adds	r3, #1
 80037a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037a6:	e051      	b.n	800384c <HAL_I2C_Init+0x1dc>
 80037a8:	2304      	movs	r3, #4
 80037aa:	e04f      	b.n	800384c <HAL_I2C_Init+0x1dc>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d111      	bne.n	80037d8 <HAL_I2C_Init+0x168>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	1e58      	subs	r0, r3, #1
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6859      	ldr	r1, [r3, #4]
 80037bc:	460b      	mov	r3, r1
 80037be:	005b      	lsls	r3, r3, #1
 80037c0:	440b      	add	r3, r1
 80037c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80037c6:	3301      	adds	r3, #1
 80037c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	bf0c      	ite	eq
 80037d0:	2301      	moveq	r3, #1
 80037d2:	2300      	movne	r3, #0
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	e012      	b.n	80037fe <HAL_I2C_Init+0x18e>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	1e58      	subs	r0, r3, #1
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6859      	ldr	r1, [r3, #4]
 80037e0:	460b      	mov	r3, r1
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	440b      	add	r3, r1
 80037e6:	0099      	lsls	r1, r3, #2
 80037e8:	440b      	add	r3, r1
 80037ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80037ee:	3301      	adds	r3, #1
 80037f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	bf0c      	ite	eq
 80037f8:	2301      	moveq	r3, #1
 80037fa:	2300      	movne	r3, #0
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d001      	beq.n	8003806 <HAL_I2C_Init+0x196>
 8003802:	2301      	movs	r3, #1
 8003804:	e022      	b.n	800384c <HAL_I2C_Init+0x1dc>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d10e      	bne.n	800382c <HAL_I2C_Init+0x1bc>
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	1e58      	subs	r0, r3, #1
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6859      	ldr	r1, [r3, #4]
 8003816:	460b      	mov	r3, r1
 8003818:	005b      	lsls	r3, r3, #1
 800381a:	440b      	add	r3, r1
 800381c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003820:	3301      	adds	r3, #1
 8003822:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003826:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800382a:	e00f      	b.n	800384c <HAL_I2C_Init+0x1dc>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	1e58      	subs	r0, r3, #1
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6859      	ldr	r1, [r3, #4]
 8003834:	460b      	mov	r3, r1
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	440b      	add	r3, r1
 800383a:	0099      	lsls	r1, r3, #2
 800383c:	440b      	add	r3, r1
 800383e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003842:	3301      	adds	r3, #1
 8003844:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003848:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800384c:	6879      	ldr	r1, [r7, #4]
 800384e:	6809      	ldr	r1, [r1, #0]
 8003850:	4313      	orrs	r3, r2
 8003852:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	69da      	ldr	r2, [r3, #28]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a1b      	ldr	r3, [r3, #32]
 8003866:	431a      	orrs	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	430a      	orrs	r2, r1
 800386e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800387a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	6911      	ldr	r1, [r2, #16]
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	68d2      	ldr	r2, [r2, #12]
 8003886:	4311      	orrs	r1, r2
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	6812      	ldr	r2, [r2, #0]
 800388c:	430b      	orrs	r3, r1
 800388e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	695a      	ldr	r2, [r3, #20]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	431a      	orrs	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	430a      	orrs	r2, r1
 80038aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f042 0201 	orr.w	r2, r2, #1
 80038ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2220      	movs	r2, #32
 80038c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3710      	adds	r7, #16
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	000186a0 	.word	0x000186a0
 80038e8:	001e847f 	.word	0x001e847f
 80038ec:	003d08ff 	.word	0x003d08ff
 80038f0:	431bde83 	.word	0x431bde83
 80038f4:	10624dd3 	.word	0x10624dd3

080038f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b086      	sub	sp, #24
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d101      	bne.n	800390a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e267      	b.n	8003dda <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	2b00      	cmp	r3, #0
 8003914:	d075      	beq.n	8003a02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003916:	4b88      	ldr	r3, [pc, #544]	; (8003b38 <HAL_RCC_OscConfig+0x240>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f003 030c 	and.w	r3, r3, #12
 800391e:	2b04      	cmp	r3, #4
 8003920:	d00c      	beq.n	800393c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003922:	4b85      	ldr	r3, [pc, #532]	; (8003b38 <HAL_RCC_OscConfig+0x240>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800392a:	2b08      	cmp	r3, #8
 800392c:	d112      	bne.n	8003954 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800392e:	4b82      	ldr	r3, [pc, #520]	; (8003b38 <HAL_RCC_OscConfig+0x240>)
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003936:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800393a:	d10b      	bne.n	8003954 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800393c:	4b7e      	ldr	r3, [pc, #504]	; (8003b38 <HAL_RCC_OscConfig+0x240>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d05b      	beq.n	8003a00 <HAL_RCC_OscConfig+0x108>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d157      	bne.n	8003a00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e242      	b.n	8003dda <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800395c:	d106      	bne.n	800396c <HAL_RCC_OscConfig+0x74>
 800395e:	4b76      	ldr	r3, [pc, #472]	; (8003b38 <HAL_RCC_OscConfig+0x240>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a75      	ldr	r2, [pc, #468]	; (8003b38 <HAL_RCC_OscConfig+0x240>)
 8003964:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003968:	6013      	str	r3, [r2, #0]
 800396a:	e01d      	b.n	80039a8 <HAL_RCC_OscConfig+0xb0>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003974:	d10c      	bne.n	8003990 <HAL_RCC_OscConfig+0x98>
 8003976:	4b70      	ldr	r3, [pc, #448]	; (8003b38 <HAL_RCC_OscConfig+0x240>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a6f      	ldr	r2, [pc, #444]	; (8003b38 <HAL_RCC_OscConfig+0x240>)
 800397c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003980:	6013      	str	r3, [r2, #0]
 8003982:	4b6d      	ldr	r3, [pc, #436]	; (8003b38 <HAL_RCC_OscConfig+0x240>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a6c      	ldr	r2, [pc, #432]	; (8003b38 <HAL_RCC_OscConfig+0x240>)
 8003988:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800398c:	6013      	str	r3, [r2, #0]
 800398e:	e00b      	b.n	80039a8 <HAL_RCC_OscConfig+0xb0>
 8003990:	4b69      	ldr	r3, [pc, #420]	; (8003b38 <HAL_RCC_OscConfig+0x240>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a68      	ldr	r2, [pc, #416]	; (8003b38 <HAL_RCC_OscConfig+0x240>)
 8003996:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800399a:	6013      	str	r3, [r2, #0]
 800399c:	4b66      	ldr	r3, [pc, #408]	; (8003b38 <HAL_RCC_OscConfig+0x240>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a65      	ldr	r2, [pc, #404]	; (8003b38 <HAL_RCC_OscConfig+0x240>)
 80039a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d013      	beq.n	80039d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b0:	f7ff fbc4 	bl	800313c <HAL_GetTick>
 80039b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039b6:	e008      	b.n	80039ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039b8:	f7ff fbc0 	bl	800313c <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b64      	cmp	r3, #100	; 0x64
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e207      	b.n	8003dda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ca:	4b5b      	ldr	r3, [pc, #364]	; (8003b38 <HAL_RCC_OscConfig+0x240>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d0f0      	beq.n	80039b8 <HAL_RCC_OscConfig+0xc0>
 80039d6:	e014      	b.n	8003a02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d8:	f7ff fbb0 	bl	800313c <HAL_GetTick>
 80039dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039de:	e008      	b.n	80039f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039e0:	f7ff fbac 	bl	800313c <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	2b64      	cmp	r3, #100	; 0x64
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e1f3      	b.n	8003dda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039f2:	4b51      	ldr	r3, [pc, #324]	; (8003b38 <HAL_RCC_OscConfig+0x240>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d1f0      	bne.n	80039e0 <HAL_RCC_OscConfig+0xe8>
 80039fe:	e000      	b.n	8003a02 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d063      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a0e:	4b4a      	ldr	r3, [pc, #296]	; (8003b38 <HAL_RCC_OscConfig+0x240>)
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f003 030c 	and.w	r3, r3, #12
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00b      	beq.n	8003a32 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a1a:	4b47      	ldr	r3, [pc, #284]	; (8003b38 <HAL_RCC_OscConfig+0x240>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a22:	2b08      	cmp	r3, #8
 8003a24:	d11c      	bne.n	8003a60 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a26:	4b44      	ldr	r3, [pc, #272]	; (8003b38 <HAL_RCC_OscConfig+0x240>)
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d116      	bne.n	8003a60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a32:	4b41      	ldr	r3, [pc, #260]	; (8003b38 <HAL_RCC_OscConfig+0x240>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d005      	beq.n	8003a4a <HAL_RCC_OscConfig+0x152>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d001      	beq.n	8003a4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e1c7      	b.n	8003dda <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a4a:	4b3b      	ldr	r3, [pc, #236]	; (8003b38 <HAL_RCC_OscConfig+0x240>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	00db      	lsls	r3, r3, #3
 8003a58:	4937      	ldr	r1, [pc, #220]	; (8003b38 <HAL_RCC_OscConfig+0x240>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a5e:	e03a      	b.n	8003ad6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d020      	beq.n	8003aaa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a68:	4b34      	ldr	r3, [pc, #208]	; (8003b3c <HAL_RCC_OscConfig+0x244>)
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a6e:	f7ff fb65 	bl	800313c <HAL_GetTick>
 8003a72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a74:	e008      	b.n	8003a88 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a76:	f7ff fb61 	bl	800313c <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d901      	bls.n	8003a88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e1a8      	b.n	8003dda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a88:	4b2b      	ldr	r3, [pc, #172]	; (8003b38 <HAL_RCC_OscConfig+0x240>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0302 	and.w	r3, r3, #2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d0f0      	beq.n	8003a76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a94:	4b28      	ldr	r3, [pc, #160]	; (8003b38 <HAL_RCC_OscConfig+0x240>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	691b      	ldr	r3, [r3, #16]
 8003aa0:	00db      	lsls	r3, r3, #3
 8003aa2:	4925      	ldr	r1, [pc, #148]	; (8003b38 <HAL_RCC_OscConfig+0x240>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	600b      	str	r3, [r1, #0]
 8003aa8:	e015      	b.n	8003ad6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003aaa:	4b24      	ldr	r3, [pc, #144]	; (8003b3c <HAL_RCC_OscConfig+0x244>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab0:	f7ff fb44 	bl	800313c <HAL_GetTick>
 8003ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ab6:	e008      	b.n	8003aca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ab8:	f7ff fb40 	bl	800313c <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d901      	bls.n	8003aca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e187      	b.n	8003dda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aca:	4b1b      	ldr	r3, [pc, #108]	; (8003b38 <HAL_RCC_OscConfig+0x240>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d1f0      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0308 	and.w	r3, r3, #8
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d036      	beq.n	8003b50 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d016      	beq.n	8003b18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003aea:	4b15      	ldr	r3, [pc, #84]	; (8003b40 <HAL_RCC_OscConfig+0x248>)
 8003aec:	2201      	movs	r2, #1
 8003aee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af0:	f7ff fb24 	bl	800313c <HAL_GetTick>
 8003af4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003af6:	e008      	b.n	8003b0a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003af8:	f7ff fb20 	bl	800313c <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e167      	b.n	8003dda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b0a:	4b0b      	ldr	r3, [pc, #44]	; (8003b38 <HAL_RCC_OscConfig+0x240>)
 8003b0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d0f0      	beq.n	8003af8 <HAL_RCC_OscConfig+0x200>
 8003b16:	e01b      	b.n	8003b50 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b18:	4b09      	ldr	r3, [pc, #36]	; (8003b40 <HAL_RCC_OscConfig+0x248>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b1e:	f7ff fb0d 	bl	800313c <HAL_GetTick>
 8003b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b24:	e00e      	b.n	8003b44 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b26:	f7ff fb09 	bl	800313c <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d907      	bls.n	8003b44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e150      	b.n	8003dda <HAL_RCC_OscConfig+0x4e2>
 8003b38:	40023800 	.word	0x40023800
 8003b3c:	42470000 	.word	0x42470000
 8003b40:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b44:	4b88      	ldr	r3, [pc, #544]	; (8003d68 <HAL_RCC_OscConfig+0x470>)
 8003b46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b48:	f003 0302 	and.w	r3, r3, #2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d1ea      	bne.n	8003b26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0304 	and.w	r3, r3, #4
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	f000 8097 	beq.w	8003c8c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b62:	4b81      	ldr	r3, [pc, #516]	; (8003d68 <HAL_RCC_OscConfig+0x470>)
 8003b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d10f      	bne.n	8003b8e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b6e:	2300      	movs	r3, #0
 8003b70:	60bb      	str	r3, [r7, #8]
 8003b72:	4b7d      	ldr	r3, [pc, #500]	; (8003d68 <HAL_RCC_OscConfig+0x470>)
 8003b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b76:	4a7c      	ldr	r2, [pc, #496]	; (8003d68 <HAL_RCC_OscConfig+0x470>)
 8003b78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8003b7e:	4b7a      	ldr	r3, [pc, #488]	; (8003d68 <HAL_RCC_OscConfig+0x470>)
 8003b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b86:	60bb      	str	r3, [r7, #8]
 8003b88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b8e:	4b77      	ldr	r3, [pc, #476]	; (8003d6c <HAL_RCC_OscConfig+0x474>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d118      	bne.n	8003bcc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b9a:	4b74      	ldr	r3, [pc, #464]	; (8003d6c <HAL_RCC_OscConfig+0x474>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a73      	ldr	r2, [pc, #460]	; (8003d6c <HAL_RCC_OscConfig+0x474>)
 8003ba0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ba4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ba6:	f7ff fac9 	bl	800313c <HAL_GetTick>
 8003baa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bac:	e008      	b.n	8003bc0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bae:	f7ff fac5 	bl	800313c <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d901      	bls.n	8003bc0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e10c      	b.n	8003dda <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bc0:	4b6a      	ldr	r3, [pc, #424]	; (8003d6c <HAL_RCC_OscConfig+0x474>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d0f0      	beq.n	8003bae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d106      	bne.n	8003be2 <HAL_RCC_OscConfig+0x2ea>
 8003bd4:	4b64      	ldr	r3, [pc, #400]	; (8003d68 <HAL_RCC_OscConfig+0x470>)
 8003bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd8:	4a63      	ldr	r2, [pc, #396]	; (8003d68 <HAL_RCC_OscConfig+0x470>)
 8003bda:	f043 0301 	orr.w	r3, r3, #1
 8003bde:	6713      	str	r3, [r2, #112]	; 0x70
 8003be0:	e01c      	b.n	8003c1c <HAL_RCC_OscConfig+0x324>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	2b05      	cmp	r3, #5
 8003be8:	d10c      	bne.n	8003c04 <HAL_RCC_OscConfig+0x30c>
 8003bea:	4b5f      	ldr	r3, [pc, #380]	; (8003d68 <HAL_RCC_OscConfig+0x470>)
 8003bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bee:	4a5e      	ldr	r2, [pc, #376]	; (8003d68 <HAL_RCC_OscConfig+0x470>)
 8003bf0:	f043 0304 	orr.w	r3, r3, #4
 8003bf4:	6713      	str	r3, [r2, #112]	; 0x70
 8003bf6:	4b5c      	ldr	r3, [pc, #368]	; (8003d68 <HAL_RCC_OscConfig+0x470>)
 8003bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bfa:	4a5b      	ldr	r2, [pc, #364]	; (8003d68 <HAL_RCC_OscConfig+0x470>)
 8003bfc:	f043 0301 	orr.w	r3, r3, #1
 8003c00:	6713      	str	r3, [r2, #112]	; 0x70
 8003c02:	e00b      	b.n	8003c1c <HAL_RCC_OscConfig+0x324>
 8003c04:	4b58      	ldr	r3, [pc, #352]	; (8003d68 <HAL_RCC_OscConfig+0x470>)
 8003c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c08:	4a57      	ldr	r2, [pc, #348]	; (8003d68 <HAL_RCC_OscConfig+0x470>)
 8003c0a:	f023 0301 	bic.w	r3, r3, #1
 8003c0e:	6713      	str	r3, [r2, #112]	; 0x70
 8003c10:	4b55      	ldr	r3, [pc, #340]	; (8003d68 <HAL_RCC_OscConfig+0x470>)
 8003c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c14:	4a54      	ldr	r2, [pc, #336]	; (8003d68 <HAL_RCC_OscConfig+0x470>)
 8003c16:	f023 0304 	bic.w	r3, r3, #4
 8003c1a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d015      	beq.n	8003c50 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c24:	f7ff fa8a 	bl	800313c <HAL_GetTick>
 8003c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c2a:	e00a      	b.n	8003c42 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c2c:	f7ff fa86 	bl	800313c <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e0cb      	b.n	8003dda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c42:	4b49      	ldr	r3, [pc, #292]	; (8003d68 <HAL_RCC_OscConfig+0x470>)
 8003c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d0ee      	beq.n	8003c2c <HAL_RCC_OscConfig+0x334>
 8003c4e:	e014      	b.n	8003c7a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c50:	f7ff fa74 	bl	800313c <HAL_GetTick>
 8003c54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c56:	e00a      	b.n	8003c6e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c58:	f7ff fa70 	bl	800313c <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d901      	bls.n	8003c6e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e0b5      	b.n	8003dda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c6e:	4b3e      	ldr	r3, [pc, #248]	; (8003d68 <HAL_RCC_OscConfig+0x470>)
 8003c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c72:	f003 0302 	and.w	r3, r3, #2
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1ee      	bne.n	8003c58 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c7a:	7dfb      	ldrb	r3, [r7, #23]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d105      	bne.n	8003c8c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c80:	4b39      	ldr	r3, [pc, #228]	; (8003d68 <HAL_RCC_OscConfig+0x470>)
 8003c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c84:	4a38      	ldr	r2, [pc, #224]	; (8003d68 <HAL_RCC_OscConfig+0x470>)
 8003c86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c8a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	f000 80a1 	beq.w	8003dd8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c96:	4b34      	ldr	r3, [pc, #208]	; (8003d68 <HAL_RCC_OscConfig+0x470>)
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f003 030c 	and.w	r3, r3, #12
 8003c9e:	2b08      	cmp	r3, #8
 8003ca0:	d05c      	beq.n	8003d5c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d141      	bne.n	8003d2e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003caa:	4b31      	ldr	r3, [pc, #196]	; (8003d70 <HAL_RCC_OscConfig+0x478>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb0:	f7ff fa44 	bl	800313c <HAL_GetTick>
 8003cb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cb6:	e008      	b.n	8003cca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cb8:	f7ff fa40 	bl	800313c <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e087      	b.n	8003dda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cca:	4b27      	ldr	r3, [pc, #156]	; (8003d68 <HAL_RCC_OscConfig+0x470>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1f0      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	69da      	ldr	r2, [r3, #28]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a1b      	ldr	r3, [r3, #32]
 8003cde:	431a      	orrs	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce4:	019b      	lsls	r3, r3, #6
 8003ce6:	431a      	orrs	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cec:	085b      	lsrs	r3, r3, #1
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	041b      	lsls	r3, r3, #16
 8003cf2:	431a      	orrs	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf8:	061b      	lsls	r3, r3, #24
 8003cfa:	491b      	ldr	r1, [pc, #108]	; (8003d68 <HAL_RCC_OscConfig+0x470>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d00:	4b1b      	ldr	r3, [pc, #108]	; (8003d70 <HAL_RCC_OscConfig+0x478>)
 8003d02:	2201      	movs	r2, #1
 8003d04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d06:	f7ff fa19 	bl	800313c <HAL_GetTick>
 8003d0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d0c:	e008      	b.n	8003d20 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d0e:	f7ff fa15 	bl	800313c <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d901      	bls.n	8003d20 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e05c      	b.n	8003dda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d20:	4b11      	ldr	r3, [pc, #68]	; (8003d68 <HAL_RCC_OscConfig+0x470>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d0f0      	beq.n	8003d0e <HAL_RCC_OscConfig+0x416>
 8003d2c:	e054      	b.n	8003dd8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d2e:	4b10      	ldr	r3, [pc, #64]	; (8003d70 <HAL_RCC_OscConfig+0x478>)
 8003d30:	2200      	movs	r2, #0
 8003d32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d34:	f7ff fa02 	bl	800313c <HAL_GetTick>
 8003d38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d3a:	e008      	b.n	8003d4e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d3c:	f7ff f9fe 	bl	800313c <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e045      	b.n	8003dda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d4e:	4b06      	ldr	r3, [pc, #24]	; (8003d68 <HAL_RCC_OscConfig+0x470>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1f0      	bne.n	8003d3c <HAL_RCC_OscConfig+0x444>
 8003d5a:	e03d      	b.n	8003dd8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d107      	bne.n	8003d74 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e038      	b.n	8003dda <HAL_RCC_OscConfig+0x4e2>
 8003d68:	40023800 	.word	0x40023800
 8003d6c:	40007000 	.word	0x40007000
 8003d70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d74:	4b1b      	ldr	r3, [pc, #108]	; (8003de4 <HAL_RCC_OscConfig+0x4ec>)
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	699b      	ldr	r3, [r3, #24]
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d028      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d121      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d11a      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003da4:	4013      	ands	r3, r2
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003daa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d111      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dba:	085b      	lsrs	r3, r3, #1
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d107      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d001      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e000      	b.n	8003dda <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3718      	adds	r7, #24
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	40023800 	.word	0x40023800

08003de8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d101      	bne.n	8003dfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e0cc      	b.n	8003f96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003dfc:	4b68      	ldr	r3, [pc, #416]	; (8003fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0307 	and.w	r3, r3, #7
 8003e04:	683a      	ldr	r2, [r7, #0]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d90c      	bls.n	8003e24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e0a:	4b65      	ldr	r3, [pc, #404]	; (8003fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e0c:	683a      	ldr	r2, [r7, #0]
 8003e0e:	b2d2      	uxtb	r2, r2
 8003e10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e12:	4b63      	ldr	r3, [pc, #396]	; (8003fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0307 	and.w	r3, r3, #7
 8003e1a:	683a      	ldr	r2, [r7, #0]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d001      	beq.n	8003e24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e0b8      	b.n	8003f96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0302 	and.w	r3, r3, #2
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d020      	beq.n	8003e72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0304 	and.w	r3, r3, #4
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d005      	beq.n	8003e48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e3c:	4b59      	ldr	r3, [pc, #356]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	4a58      	ldr	r2, [pc, #352]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0308 	and.w	r3, r3, #8
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d005      	beq.n	8003e60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e54:	4b53      	ldr	r3, [pc, #332]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	4a52      	ldr	r2, [pc, #328]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e60:	4b50      	ldr	r3, [pc, #320]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	494d      	ldr	r1, [pc, #308]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d044      	beq.n	8003f08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d107      	bne.n	8003e96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e86:	4b47      	ldr	r3, [pc, #284]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d119      	bne.n	8003ec6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e07f      	b.n	8003f96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d003      	beq.n	8003ea6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ea2:	2b03      	cmp	r3, #3
 8003ea4:	d107      	bne.n	8003eb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ea6:	4b3f      	ldr	r3, [pc, #252]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d109      	bne.n	8003ec6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e06f      	b.n	8003f96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eb6:	4b3b      	ldr	r3, [pc, #236]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0302 	and.w	r3, r3, #2
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d101      	bne.n	8003ec6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e067      	b.n	8003f96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ec6:	4b37      	ldr	r3, [pc, #220]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f023 0203 	bic.w	r2, r3, #3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	4934      	ldr	r1, [pc, #208]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ed8:	f7ff f930 	bl	800313c <HAL_GetTick>
 8003edc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ede:	e00a      	b.n	8003ef6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ee0:	f7ff f92c 	bl	800313c <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e04f      	b.n	8003f96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ef6:	4b2b      	ldr	r3, [pc, #172]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f003 020c 	and.w	r2, r3, #12
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d1eb      	bne.n	8003ee0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f08:	4b25      	ldr	r3, [pc, #148]	; (8003fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0307 	and.w	r3, r3, #7
 8003f10:	683a      	ldr	r2, [r7, #0]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d20c      	bcs.n	8003f30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f16:	4b22      	ldr	r3, [pc, #136]	; (8003fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f18:	683a      	ldr	r2, [r7, #0]
 8003f1a:	b2d2      	uxtb	r2, r2
 8003f1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f1e:	4b20      	ldr	r3, [pc, #128]	; (8003fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0307 	and.w	r3, r3, #7
 8003f26:	683a      	ldr	r2, [r7, #0]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d001      	beq.n	8003f30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e032      	b.n	8003f96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0304 	and.w	r3, r3, #4
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d008      	beq.n	8003f4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f3c:	4b19      	ldr	r3, [pc, #100]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	4916      	ldr	r1, [pc, #88]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0308 	and.w	r3, r3, #8
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d009      	beq.n	8003f6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f5a:	4b12      	ldr	r3, [pc, #72]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	00db      	lsls	r3, r3, #3
 8003f68:	490e      	ldr	r1, [pc, #56]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f6e:	f000 f821 	bl	8003fb4 <HAL_RCC_GetSysClockFreq>
 8003f72:	4602      	mov	r2, r0
 8003f74:	4b0b      	ldr	r3, [pc, #44]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	091b      	lsrs	r3, r3, #4
 8003f7a:	f003 030f 	and.w	r3, r3, #15
 8003f7e:	490a      	ldr	r1, [pc, #40]	; (8003fa8 <HAL_RCC_ClockConfig+0x1c0>)
 8003f80:	5ccb      	ldrb	r3, [r1, r3]
 8003f82:	fa22 f303 	lsr.w	r3, r2, r3
 8003f86:	4a09      	ldr	r2, [pc, #36]	; (8003fac <HAL_RCC_ClockConfig+0x1c4>)
 8003f88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f8a:	4b09      	ldr	r3, [pc, #36]	; (8003fb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7ff f890 	bl	80030b4 <HAL_InitTick>

  return HAL_OK;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3710      	adds	r7, #16
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	40023c00 	.word	0x40023c00
 8003fa4:	40023800 	.word	0x40023800
 8003fa8:	08007c28 	.word	0x08007c28
 8003fac:	20000004 	.word	0x20000004
 8003fb0:	20000008 	.word	0x20000008

08003fb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fb8:	b094      	sub	sp, #80	; 0x50
 8003fba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	647b      	str	r3, [r7, #68]	; 0x44
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fcc:	4b79      	ldr	r3, [pc, #484]	; (80041b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f003 030c 	and.w	r3, r3, #12
 8003fd4:	2b08      	cmp	r3, #8
 8003fd6:	d00d      	beq.n	8003ff4 <HAL_RCC_GetSysClockFreq+0x40>
 8003fd8:	2b08      	cmp	r3, #8
 8003fda:	f200 80e1 	bhi.w	80041a0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d002      	beq.n	8003fe8 <HAL_RCC_GetSysClockFreq+0x34>
 8003fe2:	2b04      	cmp	r3, #4
 8003fe4:	d003      	beq.n	8003fee <HAL_RCC_GetSysClockFreq+0x3a>
 8003fe6:	e0db      	b.n	80041a0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fe8:	4b73      	ldr	r3, [pc, #460]	; (80041b8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003fea:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003fec:	e0db      	b.n	80041a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fee:	4b73      	ldr	r3, [pc, #460]	; (80041bc <HAL_RCC_GetSysClockFreq+0x208>)
 8003ff0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ff2:	e0d8      	b.n	80041a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ff4:	4b6f      	ldr	r3, [pc, #444]	; (80041b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ffc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ffe:	4b6d      	ldr	r3, [pc, #436]	; (80041b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d063      	beq.n	80040d2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800400a:	4b6a      	ldr	r3, [pc, #424]	; (80041b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	099b      	lsrs	r3, r3, #6
 8004010:	2200      	movs	r2, #0
 8004012:	63bb      	str	r3, [r7, #56]	; 0x38
 8004014:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004018:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800401c:	633b      	str	r3, [r7, #48]	; 0x30
 800401e:	2300      	movs	r3, #0
 8004020:	637b      	str	r3, [r7, #52]	; 0x34
 8004022:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004026:	4622      	mov	r2, r4
 8004028:	462b      	mov	r3, r5
 800402a:	f04f 0000 	mov.w	r0, #0
 800402e:	f04f 0100 	mov.w	r1, #0
 8004032:	0159      	lsls	r1, r3, #5
 8004034:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004038:	0150      	lsls	r0, r2, #5
 800403a:	4602      	mov	r2, r0
 800403c:	460b      	mov	r3, r1
 800403e:	4621      	mov	r1, r4
 8004040:	1a51      	subs	r1, r2, r1
 8004042:	6139      	str	r1, [r7, #16]
 8004044:	4629      	mov	r1, r5
 8004046:	eb63 0301 	sbc.w	r3, r3, r1
 800404a:	617b      	str	r3, [r7, #20]
 800404c:	f04f 0200 	mov.w	r2, #0
 8004050:	f04f 0300 	mov.w	r3, #0
 8004054:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004058:	4659      	mov	r1, fp
 800405a:	018b      	lsls	r3, r1, #6
 800405c:	4651      	mov	r1, sl
 800405e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004062:	4651      	mov	r1, sl
 8004064:	018a      	lsls	r2, r1, #6
 8004066:	4651      	mov	r1, sl
 8004068:	ebb2 0801 	subs.w	r8, r2, r1
 800406c:	4659      	mov	r1, fp
 800406e:	eb63 0901 	sbc.w	r9, r3, r1
 8004072:	f04f 0200 	mov.w	r2, #0
 8004076:	f04f 0300 	mov.w	r3, #0
 800407a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800407e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004082:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004086:	4690      	mov	r8, r2
 8004088:	4699      	mov	r9, r3
 800408a:	4623      	mov	r3, r4
 800408c:	eb18 0303 	adds.w	r3, r8, r3
 8004090:	60bb      	str	r3, [r7, #8]
 8004092:	462b      	mov	r3, r5
 8004094:	eb49 0303 	adc.w	r3, r9, r3
 8004098:	60fb      	str	r3, [r7, #12]
 800409a:	f04f 0200 	mov.w	r2, #0
 800409e:	f04f 0300 	mov.w	r3, #0
 80040a2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80040a6:	4629      	mov	r1, r5
 80040a8:	024b      	lsls	r3, r1, #9
 80040aa:	4621      	mov	r1, r4
 80040ac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80040b0:	4621      	mov	r1, r4
 80040b2:	024a      	lsls	r2, r1, #9
 80040b4:	4610      	mov	r0, r2
 80040b6:	4619      	mov	r1, r3
 80040b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040ba:	2200      	movs	r2, #0
 80040bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80040be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80040c4:	f7fc fde8 	bl	8000c98 <__aeabi_uldivmod>
 80040c8:	4602      	mov	r2, r0
 80040ca:	460b      	mov	r3, r1
 80040cc:	4613      	mov	r3, r2
 80040ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040d0:	e058      	b.n	8004184 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040d2:	4b38      	ldr	r3, [pc, #224]	; (80041b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	099b      	lsrs	r3, r3, #6
 80040d8:	2200      	movs	r2, #0
 80040da:	4618      	mov	r0, r3
 80040dc:	4611      	mov	r1, r2
 80040de:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80040e2:	623b      	str	r3, [r7, #32]
 80040e4:	2300      	movs	r3, #0
 80040e6:	627b      	str	r3, [r7, #36]	; 0x24
 80040e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80040ec:	4642      	mov	r2, r8
 80040ee:	464b      	mov	r3, r9
 80040f0:	f04f 0000 	mov.w	r0, #0
 80040f4:	f04f 0100 	mov.w	r1, #0
 80040f8:	0159      	lsls	r1, r3, #5
 80040fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040fe:	0150      	lsls	r0, r2, #5
 8004100:	4602      	mov	r2, r0
 8004102:	460b      	mov	r3, r1
 8004104:	4641      	mov	r1, r8
 8004106:	ebb2 0a01 	subs.w	sl, r2, r1
 800410a:	4649      	mov	r1, r9
 800410c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004110:	f04f 0200 	mov.w	r2, #0
 8004114:	f04f 0300 	mov.w	r3, #0
 8004118:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800411c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004120:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004124:	ebb2 040a 	subs.w	r4, r2, sl
 8004128:	eb63 050b 	sbc.w	r5, r3, fp
 800412c:	f04f 0200 	mov.w	r2, #0
 8004130:	f04f 0300 	mov.w	r3, #0
 8004134:	00eb      	lsls	r3, r5, #3
 8004136:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800413a:	00e2      	lsls	r2, r4, #3
 800413c:	4614      	mov	r4, r2
 800413e:	461d      	mov	r5, r3
 8004140:	4643      	mov	r3, r8
 8004142:	18e3      	adds	r3, r4, r3
 8004144:	603b      	str	r3, [r7, #0]
 8004146:	464b      	mov	r3, r9
 8004148:	eb45 0303 	adc.w	r3, r5, r3
 800414c:	607b      	str	r3, [r7, #4]
 800414e:	f04f 0200 	mov.w	r2, #0
 8004152:	f04f 0300 	mov.w	r3, #0
 8004156:	e9d7 4500 	ldrd	r4, r5, [r7]
 800415a:	4629      	mov	r1, r5
 800415c:	028b      	lsls	r3, r1, #10
 800415e:	4621      	mov	r1, r4
 8004160:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004164:	4621      	mov	r1, r4
 8004166:	028a      	lsls	r2, r1, #10
 8004168:	4610      	mov	r0, r2
 800416a:	4619      	mov	r1, r3
 800416c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800416e:	2200      	movs	r2, #0
 8004170:	61bb      	str	r3, [r7, #24]
 8004172:	61fa      	str	r2, [r7, #28]
 8004174:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004178:	f7fc fd8e 	bl	8000c98 <__aeabi_uldivmod>
 800417c:	4602      	mov	r2, r0
 800417e:	460b      	mov	r3, r1
 8004180:	4613      	mov	r3, r2
 8004182:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004184:	4b0b      	ldr	r3, [pc, #44]	; (80041b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	0c1b      	lsrs	r3, r3, #16
 800418a:	f003 0303 	and.w	r3, r3, #3
 800418e:	3301      	adds	r3, #1
 8004190:	005b      	lsls	r3, r3, #1
 8004192:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004194:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004196:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004198:	fbb2 f3f3 	udiv	r3, r2, r3
 800419c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800419e:	e002      	b.n	80041a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041a0:	4b05      	ldr	r3, [pc, #20]	; (80041b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80041a2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3750      	adds	r7, #80	; 0x50
 80041ac:	46bd      	mov	sp, r7
 80041ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041b2:	bf00      	nop
 80041b4:	40023800 	.word	0x40023800
 80041b8:	00f42400 	.word	0x00f42400
 80041bc:	007a1200 	.word	0x007a1200

080041c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041c0:	b480      	push	{r7}
 80041c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041c4:	4b03      	ldr	r3, [pc, #12]	; (80041d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80041c6:	681b      	ldr	r3, [r3, #0]
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	20000004 	.word	0x20000004

080041d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80041dc:	f7ff fff0 	bl	80041c0 <HAL_RCC_GetHCLKFreq>
 80041e0:	4602      	mov	r2, r0
 80041e2:	4b05      	ldr	r3, [pc, #20]	; (80041f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	0a9b      	lsrs	r3, r3, #10
 80041e8:	f003 0307 	and.w	r3, r3, #7
 80041ec:	4903      	ldr	r1, [pc, #12]	; (80041fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80041ee:	5ccb      	ldrb	r3, [r1, r3]
 80041f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	40023800 	.word	0x40023800
 80041fc:	08007c38 	.word	0x08007c38

08004200 <__cvt>:
 8004200:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004204:	ec55 4b10 	vmov	r4, r5, d0
 8004208:	2d00      	cmp	r5, #0
 800420a:	460e      	mov	r6, r1
 800420c:	4619      	mov	r1, r3
 800420e:	462b      	mov	r3, r5
 8004210:	bfbb      	ittet	lt
 8004212:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004216:	461d      	movlt	r5, r3
 8004218:	2300      	movge	r3, #0
 800421a:	232d      	movlt	r3, #45	; 0x2d
 800421c:	700b      	strb	r3, [r1, #0]
 800421e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004220:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004224:	4691      	mov	r9, r2
 8004226:	f023 0820 	bic.w	r8, r3, #32
 800422a:	bfbc      	itt	lt
 800422c:	4622      	movlt	r2, r4
 800422e:	4614      	movlt	r4, r2
 8004230:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004234:	d005      	beq.n	8004242 <__cvt+0x42>
 8004236:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800423a:	d100      	bne.n	800423e <__cvt+0x3e>
 800423c:	3601      	adds	r6, #1
 800423e:	2102      	movs	r1, #2
 8004240:	e000      	b.n	8004244 <__cvt+0x44>
 8004242:	2103      	movs	r1, #3
 8004244:	ab03      	add	r3, sp, #12
 8004246:	9301      	str	r3, [sp, #4]
 8004248:	ab02      	add	r3, sp, #8
 800424a:	9300      	str	r3, [sp, #0]
 800424c:	ec45 4b10 	vmov	d0, r4, r5
 8004250:	4653      	mov	r3, sl
 8004252:	4632      	mov	r2, r6
 8004254:	f000 ff80 	bl	8005158 <_dtoa_r>
 8004258:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800425c:	4607      	mov	r7, r0
 800425e:	d102      	bne.n	8004266 <__cvt+0x66>
 8004260:	f019 0f01 	tst.w	r9, #1
 8004264:	d022      	beq.n	80042ac <__cvt+0xac>
 8004266:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800426a:	eb07 0906 	add.w	r9, r7, r6
 800426e:	d110      	bne.n	8004292 <__cvt+0x92>
 8004270:	783b      	ldrb	r3, [r7, #0]
 8004272:	2b30      	cmp	r3, #48	; 0x30
 8004274:	d10a      	bne.n	800428c <__cvt+0x8c>
 8004276:	2200      	movs	r2, #0
 8004278:	2300      	movs	r3, #0
 800427a:	4620      	mov	r0, r4
 800427c:	4629      	mov	r1, r5
 800427e:	f7fc fc2b 	bl	8000ad8 <__aeabi_dcmpeq>
 8004282:	b918      	cbnz	r0, 800428c <__cvt+0x8c>
 8004284:	f1c6 0601 	rsb	r6, r6, #1
 8004288:	f8ca 6000 	str.w	r6, [sl]
 800428c:	f8da 3000 	ldr.w	r3, [sl]
 8004290:	4499      	add	r9, r3
 8004292:	2200      	movs	r2, #0
 8004294:	2300      	movs	r3, #0
 8004296:	4620      	mov	r0, r4
 8004298:	4629      	mov	r1, r5
 800429a:	f7fc fc1d 	bl	8000ad8 <__aeabi_dcmpeq>
 800429e:	b108      	cbz	r0, 80042a4 <__cvt+0xa4>
 80042a0:	f8cd 900c 	str.w	r9, [sp, #12]
 80042a4:	2230      	movs	r2, #48	; 0x30
 80042a6:	9b03      	ldr	r3, [sp, #12]
 80042a8:	454b      	cmp	r3, r9
 80042aa:	d307      	bcc.n	80042bc <__cvt+0xbc>
 80042ac:	9b03      	ldr	r3, [sp, #12]
 80042ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80042b0:	1bdb      	subs	r3, r3, r7
 80042b2:	4638      	mov	r0, r7
 80042b4:	6013      	str	r3, [r2, #0]
 80042b6:	b004      	add	sp, #16
 80042b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042bc:	1c59      	adds	r1, r3, #1
 80042be:	9103      	str	r1, [sp, #12]
 80042c0:	701a      	strb	r2, [r3, #0]
 80042c2:	e7f0      	b.n	80042a6 <__cvt+0xa6>

080042c4 <__exponent>:
 80042c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80042c6:	4603      	mov	r3, r0
 80042c8:	2900      	cmp	r1, #0
 80042ca:	bfb8      	it	lt
 80042cc:	4249      	neglt	r1, r1
 80042ce:	f803 2b02 	strb.w	r2, [r3], #2
 80042d2:	bfb4      	ite	lt
 80042d4:	222d      	movlt	r2, #45	; 0x2d
 80042d6:	222b      	movge	r2, #43	; 0x2b
 80042d8:	2909      	cmp	r1, #9
 80042da:	7042      	strb	r2, [r0, #1]
 80042dc:	dd2a      	ble.n	8004334 <__exponent+0x70>
 80042de:	f10d 0207 	add.w	r2, sp, #7
 80042e2:	4617      	mov	r7, r2
 80042e4:	260a      	movs	r6, #10
 80042e6:	4694      	mov	ip, r2
 80042e8:	fb91 f5f6 	sdiv	r5, r1, r6
 80042ec:	fb06 1415 	mls	r4, r6, r5, r1
 80042f0:	3430      	adds	r4, #48	; 0x30
 80042f2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80042f6:	460c      	mov	r4, r1
 80042f8:	2c63      	cmp	r4, #99	; 0x63
 80042fa:	f102 32ff 	add.w	r2, r2, #4294967295
 80042fe:	4629      	mov	r1, r5
 8004300:	dcf1      	bgt.n	80042e6 <__exponent+0x22>
 8004302:	3130      	adds	r1, #48	; 0x30
 8004304:	f1ac 0402 	sub.w	r4, ip, #2
 8004308:	f802 1c01 	strb.w	r1, [r2, #-1]
 800430c:	1c41      	adds	r1, r0, #1
 800430e:	4622      	mov	r2, r4
 8004310:	42ba      	cmp	r2, r7
 8004312:	d30a      	bcc.n	800432a <__exponent+0x66>
 8004314:	f10d 0209 	add.w	r2, sp, #9
 8004318:	eba2 020c 	sub.w	r2, r2, ip
 800431c:	42bc      	cmp	r4, r7
 800431e:	bf88      	it	hi
 8004320:	2200      	movhi	r2, #0
 8004322:	4413      	add	r3, r2
 8004324:	1a18      	subs	r0, r3, r0
 8004326:	b003      	add	sp, #12
 8004328:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800432a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800432e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004332:	e7ed      	b.n	8004310 <__exponent+0x4c>
 8004334:	2330      	movs	r3, #48	; 0x30
 8004336:	3130      	adds	r1, #48	; 0x30
 8004338:	7083      	strb	r3, [r0, #2]
 800433a:	70c1      	strb	r1, [r0, #3]
 800433c:	1d03      	adds	r3, r0, #4
 800433e:	e7f1      	b.n	8004324 <__exponent+0x60>

08004340 <_printf_float>:
 8004340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004344:	ed2d 8b02 	vpush	{d8}
 8004348:	b08d      	sub	sp, #52	; 0x34
 800434a:	460c      	mov	r4, r1
 800434c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004350:	4616      	mov	r6, r2
 8004352:	461f      	mov	r7, r3
 8004354:	4605      	mov	r5, r0
 8004356:	f000 fdfd 	bl	8004f54 <_localeconv_r>
 800435a:	f8d0 a000 	ldr.w	sl, [r0]
 800435e:	4650      	mov	r0, sl
 8004360:	f7fb ff8e 	bl	8000280 <strlen>
 8004364:	2300      	movs	r3, #0
 8004366:	930a      	str	r3, [sp, #40]	; 0x28
 8004368:	6823      	ldr	r3, [r4, #0]
 800436a:	9305      	str	r3, [sp, #20]
 800436c:	f8d8 3000 	ldr.w	r3, [r8]
 8004370:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004374:	3307      	adds	r3, #7
 8004376:	f023 0307 	bic.w	r3, r3, #7
 800437a:	f103 0208 	add.w	r2, r3, #8
 800437e:	f8c8 2000 	str.w	r2, [r8]
 8004382:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004386:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800438a:	9307      	str	r3, [sp, #28]
 800438c:	f8cd 8018 	str.w	r8, [sp, #24]
 8004390:	ee08 0a10 	vmov	s16, r0
 8004394:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8004398:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800439c:	4b9e      	ldr	r3, [pc, #632]	; (8004618 <_printf_float+0x2d8>)
 800439e:	f04f 32ff 	mov.w	r2, #4294967295
 80043a2:	f7fc fbcb 	bl	8000b3c <__aeabi_dcmpun>
 80043a6:	bb88      	cbnz	r0, 800440c <_printf_float+0xcc>
 80043a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80043ac:	4b9a      	ldr	r3, [pc, #616]	; (8004618 <_printf_float+0x2d8>)
 80043ae:	f04f 32ff 	mov.w	r2, #4294967295
 80043b2:	f7fc fba5 	bl	8000b00 <__aeabi_dcmple>
 80043b6:	bb48      	cbnz	r0, 800440c <_printf_float+0xcc>
 80043b8:	2200      	movs	r2, #0
 80043ba:	2300      	movs	r3, #0
 80043bc:	4640      	mov	r0, r8
 80043be:	4649      	mov	r1, r9
 80043c0:	f7fc fb94 	bl	8000aec <__aeabi_dcmplt>
 80043c4:	b110      	cbz	r0, 80043cc <_printf_float+0x8c>
 80043c6:	232d      	movs	r3, #45	; 0x2d
 80043c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043cc:	4a93      	ldr	r2, [pc, #588]	; (800461c <_printf_float+0x2dc>)
 80043ce:	4b94      	ldr	r3, [pc, #592]	; (8004620 <_printf_float+0x2e0>)
 80043d0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80043d4:	bf94      	ite	ls
 80043d6:	4690      	movls	r8, r2
 80043d8:	4698      	movhi	r8, r3
 80043da:	2303      	movs	r3, #3
 80043dc:	6123      	str	r3, [r4, #16]
 80043de:	9b05      	ldr	r3, [sp, #20]
 80043e0:	f023 0304 	bic.w	r3, r3, #4
 80043e4:	6023      	str	r3, [r4, #0]
 80043e6:	f04f 0900 	mov.w	r9, #0
 80043ea:	9700      	str	r7, [sp, #0]
 80043ec:	4633      	mov	r3, r6
 80043ee:	aa0b      	add	r2, sp, #44	; 0x2c
 80043f0:	4621      	mov	r1, r4
 80043f2:	4628      	mov	r0, r5
 80043f4:	f000 f9da 	bl	80047ac <_printf_common>
 80043f8:	3001      	adds	r0, #1
 80043fa:	f040 8090 	bne.w	800451e <_printf_float+0x1de>
 80043fe:	f04f 30ff 	mov.w	r0, #4294967295
 8004402:	b00d      	add	sp, #52	; 0x34
 8004404:	ecbd 8b02 	vpop	{d8}
 8004408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800440c:	4642      	mov	r2, r8
 800440e:	464b      	mov	r3, r9
 8004410:	4640      	mov	r0, r8
 8004412:	4649      	mov	r1, r9
 8004414:	f7fc fb92 	bl	8000b3c <__aeabi_dcmpun>
 8004418:	b140      	cbz	r0, 800442c <_printf_float+0xec>
 800441a:	464b      	mov	r3, r9
 800441c:	2b00      	cmp	r3, #0
 800441e:	bfbc      	itt	lt
 8004420:	232d      	movlt	r3, #45	; 0x2d
 8004422:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004426:	4a7f      	ldr	r2, [pc, #508]	; (8004624 <_printf_float+0x2e4>)
 8004428:	4b7f      	ldr	r3, [pc, #508]	; (8004628 <_printf_float+0x2e8>)
 800442a:	e7d1      	b.n	80043d0 <_printf_float+0x90>
 800442c:	6863      	ldr	r3, [r4, #4]
 800442e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004432:	9206      	str	r2, [sp, #24]
 8004434:	1c5a      	adds	r2, r3, #1
 8004436:	d13f      	bne.n	80044b8 <_printf_float+0x178>
 8004438:	2306      	movs	r3, #6
 800443a:	6063      	str	r3, [r4, #4]
 800443c:	9b05      	ldr	r3, [sp, #20]
 800443e:	6861      	ldr	r1, [r4, #4]
 8004440:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004444:	2300      	movs	r3, #0
 8004446:	9303      	str	r3, [sp, #12]
 8004448:	ab0a      	add	r3, sp, #40	; 0x28
 800444a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800444e:	ab09      	add	r3, sp, #36	; 0x24
 8004450:	ec49 8b10 	vmov	d0, r8, r9
 8004454:	9300      	str	r3, [sp, #0]
 8004456:	6022      	str	r2, [r4, #0]
 8004458:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800445c:	4628      	mov	r0, r5
 800445e:	f7ff fecf 	bl	8004200 <__cvt>
 8004462:	9b06      	ldr	r3, [sp, #24]
 8004464:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004466:	2b47      	cmp	r3, #71	; 0x47
 8004468:	4680      	mov	r8, r0
 800446a:	d108      	bne.n	800447e <_printf_float+0x13e>
 800446c:	1cc8      	adds	r0, r1, #3
 800446e:	db02      	blt.n	8004476 <_printf_float+0x136>
 8004470:	6863      	ldr	r3, [r4, #4]
 8004472:	4299      	cmp	r1, r3
 8004474:	dd41      	ble.n	80044fa <_printf_float+0x1ba>
 8004476:	f1ab 0302 	sub.w	r3, fp, #2
 800447a:	fa5f fb83 	uxtb.w	fp, r3
 800447e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004482:	d820      	bhi.n	80044c6 <_printf_float+0x186>
 8004484:	3901      	subs	r1, #1
 8004486:	465a      	mov	r2, fp
 8004488:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800448c:	9109      	str	r1, [sp, #36]	; 0x24
 800448e:	f7ff ff19 	bl	80042c4 <__exponent>
 8004492:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004494:	1813      	adds	r3, r2, r0
 8004496:	2a01      	cmp	r2, #1
 8004498:	4681      	mov	r9, r0
 800449a:	6123      	str	r3, [r4, #16]
 800449c:	dc02      	bgt.n	80044a4 <_printf_float+0x164>
 800449e:	6822      	ldr	r2, [r4, #0]
 80044a0:	07d2      	lsls	r2, r2, #31
 80044a2:	d501      	bpl.n	80044a8 <_printf_float+0x168>
 80044a4:	3301      	adds	r3, #1
 80044a6:	6123      	str	r3, [r4, #16]
 80044a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d09c      	beq.n	80043ea <_printf_float+0xaa>
 80044b0:	232d      	movs	r3, #45	; 0x2d
 80044b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044b6:	e798      	b.n	80043ea <_printf_float+0xaa>
 80044b8:	9a06      	ldr	r2, [sp, #24]
 80044ba:	2a47      	cmp	r2, #71	; 0x47
 80044bc:	d1be      	bne.n	800443c <_printf_float+0xfc>
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d1bc      	bne.n	800443c <_printf_float+0xfc>
 80044c2:	2301      	movs	r3, #1
 80044c4:	e7b9      	b.n	800443a <_printf_float+0xfa>
 80044c6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80044ca:	d118      	bne.n	80044fe <_printf_float+0x1be>
 80044cc:	2900      	cmp	r1, #0
 80044ce:	6863      	ldr	r3, [r4, #4]
 80044d0:	dd0b      	ble.n	80044ea <_printf_float+0x1aa>
 80044d2:	6121      	str	r1, [r4, #16]
 80044d4:	b913      	cbnz	r3, 80044dc <_printf_float+0x19c>
 80044d6:	6822      	ldr	r2, [r4, #0]
 80044d8:	07d0      	lsls	r0, r2, #31
 80044da:	d502      	bpl.n	80044e2 <_printf_float+0x1a2>
 80044dc:	3301      	adds	r3, #1
 80044de:	440b      	add	r3, r1
 80044e0:	6123      	str	r3, [r4, #16]
 80044e2:	65a1      	str	r1, [r4, #88]	; 0x58
 80044e4:	f04f 0900 	mov.w	r9, #0
 80044e8:	e7de      	b.n	80044a8 <_printf_float+0x168>
 80044ea:	b913      	cbnz	r3, 80044f2 <_printf_float+0x1b2>
 80044ec:	6822      	ldr	r2, [r4, #0]
 80044ee:	07d2      	lsls	r2, r2, #31
 80044f0:	d501      	bpl.n	80044f6 <_printf_float+0x1b6>
 80044f2:	3302      	adds	r3, #2
 80044f4:	e7f4      	b.n	80044e0 <_printf_float+0x1a0>
 80044f6:	2301      	movs	r3, #1
 80044f8:	e7f2      	b.n	80044e0 <_printf_float+0x1a0>
 80044fa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80044fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004500:	4299      	cmp	r1, r3
 8004502:	db05      	blt.n	8004510 <_printf_float+0x1d0>
 8004504:	6823      	ldr	r3, [r4, #0]
 8004506:	6121      	str	r1, [r4, #16]
 8004508:	07d8      	lsls	r0, r3, #31
 800450a:	d5ea      	bpl.n	80044e2 <_printf_float+0x1a2>
 800450c:	1c4b      	adds	r3, r1, #1
 800450e:	e7e7      	b.n	80044e0 <_printf_float+0x1a0>
 8004510:	2900      	cmp	r1, #0
 8004512:	bfd4      	ite	le
 8004514:	f1c1 0202 	rsble	r2, r1, #2
 8004518:	2201      	movgt	r2, #1
 800451a:	4413      	add	r3, r2
 800451c:	e7e0      	b.n	80044e0 <_printf_float+0x1a0>
 800451e:	6823      	ldr	r3, [r4, #0]
 8004520:	055a      	lsls	r2, r3, #21
 8004522:	d407      	bmi.n	8004534 <_printf_float+0x1f4>
 8004524:	6923      	ldr	r3, [r4, #16]
 8004526:	4642      	mov	r2, r8
 8004528:	4631      	mov	r1, r6
 800452a:	4628      	mov	r0, r5
 800452c:	47b8      	blx	r7
 800452e:	3001      	adds	r0, #1
 8004530:	d12c      	bne.n	800458c <_printf_float+0x24c>
 8004532:	e764      	b.n	80043fe <_printf_float+0xbe>
 8004534:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004538:	f240 80e0 	bls.w	80046fc <_printf_float+0x3bc>
 800453c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004540:	2200      	movs	r2, #0
 8004542:	2300      	movs	r3, #0
 8004544:	f7fc fac8 	bl	8000ad8 <__aeabi_dcmpeq>
 8004548:	2800      	cmp	r0, #0
 800454a:	d034      	beq.n	80045b6 <_printf_float+0x276>
 800454c:	4a37      	ldr	r2, [pc, #220]	; (800462c <_printf_float+0x2ec>)
 800454e:	2301      	movs	r3, #1
 8004550:	4631      	mov	r1, r6
 8004552:	4628      	mov	r0, r5
 8004554:	47b8      	blx	r7
 8004556:	3001      	adds	r0, #1
 8004558:	f43f af51 	beq.w	80043fe <_printf_float+0xbe>
 800455c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004560:	429a      	cmp	r2, r3
 8004562:	db02      	blt.n	800456a <_printf_float+0x22a>
 8004564:	6823      	ldr	r3, [r4, #0]
 8004566:	07d8      	lsls	r0, r3, #31
 8004568:	d510      	bpl.n	800458c <_printf_float+0x24c>
 800456a:	ee18 3a10 	vmov	r3, s16
 800456e:	4652      	mov	r2, sl
 8004570:	4631      	mov	r1, r6
 8004572:	4628      	mov	r0, r5
 8004574:	47b8      	blx	r7
 8004576:	3001      	adds	r0, #1
 8004578:	f43f af41 	beq.w	80043fe <_printf_float+0xbe>
 800457c:	f04f 0800 	mov.w	r8, #0
 8004580:	f104 091a 	add.w	r9, r4, #26
 8004584:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004586:	3b01      	subs	r3, #1
 8004588:	4543      	cmp	r3, r8
 800458a:	dc09      	bgt.n	80045a0 <_printf_float+0x260>
 800458c:	6823      	ldr	r3, [r4, #0]
 800458e:	079b      	lsls	r3, r3, #30
 8004590:	f100 8107 	bmi.w	80047a2 <_printf_float+0x462>
 8004594:	68e0      	ldr	r0, [r4, #12]
 8004596:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004598:	4298      	cmp	r0, r3
 800459a:	bfb8      	it	lt
 800459c:	4618      	movlt	r0, r3
 800459e:	e730      	b.n	8004402 <_printf_float+0xc2>
 80045a0:	2301      	movs	r3, #1
 80045a2:	464a      	mov	r2, r9
 80045a4:	4631      	mov	r1, r6
 80045a6:	4628      	mov	r0, r5
 80045a8:	47b8      	blx	r7
 80045aa:	3001      	adds	r0, #1
 80045ac:	f43f af27 	beq.w	80043fe <_printf_float+0xbe>
 80045b0:	f108 0801 	add.w	r8, r8, #1
 80045b4:	e7e6      	b.n	8004584 <_printf_float+0x244>
 80045b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	dc39      	bgt.n	8004630 <_printf_float+0x2f0>
 80045bc:	4a1b      	ldr	r2, [pc, #108]	; (800462c <_printf_float+0x2ec>)
 80045be:	2301      	movs	r3, #1
 80045c0:	4631      	mov	r1, r6
 80045c2:	4628      	mov	r0, r5
 80045c4:	47b8      	blx	r7
 80045c6:	3001      	adds	r0, #1
 80045c8:	f43f af19 	beq.w	80043fe <_printf_float+0xbe>
 80045cc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80045d0:	4313      	orrs	r3, r2
 80045d2:	d102      	bne.n	80045da <_printf_float+0x29a>
 80045d4:	6823      	ldr	r3, [r4, #0]
 80045d6:	07d9      	lsls	r1, r3, #31
 80045d8:	d5d8      	bpl.n	800458c <_printf_float+0x24c>
 80045da:	ee18 3a10 	vmov	r3, s16
 80045de:	4652      	mov	r2, sl
 80045e0:	4631      	mov	r1, r6
 80045e2:	4628      	mov	r0, r5
 80045e4:	47b8      	blx	r7
 80045e6:	3001      	adds	r0, #1
 80045e8:	f43f af09 	beq.w	80043fe <_printf_float+0xbe>
 80045ec:	f04f 0900 	mov.w	r9, #0
 80045f0:	f104 0a1a 	add.w	sl, r4, #26
 80045f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045f6:	425b      	negs	r3, r3
 80045f8:	454b      	cmp	r3, r9
 80045fa:	dc01      	bgt.n	8004600 <_printf_float+0x2c0>
 80045fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045fe:	e792      	b.n	8004526 <_printf_float+0x1e6>
 8004600:	2301      	movs	r3, #1
 8004602:	4652      	mov	r2, sl
 8004604:	4631      	mov	r1, r6
 8004606:	4628      	mov	r0, r5
 8004608:	47b8      	blx	r7
 800460a:	3001      	adds	r0, #1
 800460c:	f43f aef7 	beq.w	80043fe <_printf_float+0xbe>
 8004610:	f109 0901 	add.w	r9, r9, #1
 8004614:	e7ee      	b.n	80045f4 <_printf_float+0x2b4>
 8004616:	bf00      	nop
 8004618:	7fefffff 	.word	0x7fefffff
 800461c:	08007c40 	.word	0x08007c40
 8004620:	08007c44 	.word	0x08007c44
 8004624:	08007c48 	.word	0x08007c48
 8004628:	08007c4c 	.word	0x08007c4c
 800462c:	08007c50 	.word	0x08007c50
 8004630:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004632:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004634:	429a      	cmp	r2, r3
 8004636:	bfa8      	it	ge
 8004638:	461a      	movge	r2, r3
 800463a:	2a00      	cmp	r2, #0
 800463c:	4691      	mov	r9, r2
 800463e:	dc37      	bgt.n	80046b0 <_printf_float+0x370>
 8004640:	f04f 0b00 	mov.w	fp, #0
 8004644:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004648:	f104 021a 	add.w	r2, r4, #26
 800464c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800464e:	9305      	str	r3, [sp, #20]
 8004650:	eba3 0309 	sub.w	r3, r3, r9
 8004654:	455b      	cmp	r3, fp
 8004656:	dc33      	bgt.n	80046c0 <_printf_float+0x380>
 8004658:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800465c:	429a      	cmp	r2, r3
 800465e:	db3b      	blt.n	80046d8 <_printf_float+0x398>
 8004660:	6823      	ldr	r3, [r4, #0]
 8004662:	07da      	lsls	r2, r3, #31
 8004664:	d438      	bmi.n	80046d8 <_printf_float+0x398>
 8004666:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800466a:	eba2 0903 	sub.w	r9, r2, r3
 800466e:	9b05      	ldr	r3, [sp, #20]
 8004670:	1ad2      	subs	r2, r2, r3
 8004672:	4591      	cmp	r9, r2
 8004674:	bfa8      	it	ge
 8004676:	4691      	movge	r9, r2
 8004678:	f1b9 0f00 	cmp.w	r9, #0
 800467c:	dc35      	bgt.n	80046ea <_printf_float+0x3aa>
 800467e:	f04f 0800 	mov.w	r8, #0
 8004682:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004686:	f104 0a1a 	add.w	sl, r4, #26
 800468a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800468e:	1a9b      	subs	r3, r3, r2
 8004690:	eba3 0309 	sub.w	r3, r3, r9
 8004694:	4543      	cmp	r3, r8
 8004696:	f77f af79 	ble.w	800458c <_printf_float+0x24c>
 800469a:	2301      	movs	r3, #1
 800469c:	4652      	mov	r2, sl
 800469e:	4631      	mov	r1, r6
 80046a0:	4628      	mov	r0, r5
 80046a2:	47b8      	blx	r7
 80046a4:	3001      	adds	r0, #1
 80046a6:	f43f aeaa 	beq.w	80043fe <_printf_float+0xbe>
 80046aa:	f108 0801 	add.w	r8, r8, #1
 80046ae:	e7ec      	b.n	800468a <_printf_float+0x34a>
 80046b0:	4613      	mov	r3, r2
 80046b2:	4631      	mov	r1, r6
 80046b4:	4642      	mov	r2, r8
 80046b6:	4628      	mov	r0, r5
 80046b8:	47b8      	blx	r7
 80046ba:	3001      	adds	r0, #1
 80046bc:	d1c0      	bne.n	8004640 <_printf_float+0x300>
 80046be:	e69e      	b.n	80043fe <_printf_float+0xbe>
 80046c0:	2301      	movs	r3, #1
 80046c2:	4631      	mov	r1, r6
 80046c4:	4628      	mov	r0, r5
 80046c6:	9205      	str	r2, [sp, #20]
 80046c8:	47b8      	blx	r7
 80046ca:	3001      	adds	r0, #1
 80046cc:	f43f ae97 	beq.w	80043fe <_printf_float+0xbe>
 80046d0:	9a05      	ldr	r2, [sp, #20]
 80046d2:	f10b 0b01 	add.w	fp, fp, #1
 80046d6:	e7b9      	b.n	800464c <_printf_float+0x30c>
 80046d8:	ee18 3a10 	vmov	r3, s16
 80046dc:	4652      	mov	r2, sl
 80046de:	4631      	mov	r1, r6
 80046e0:	4628      	mov	r0, r5
 80046e2:	47b8      	blx	r7
 80046e4:	3001      	adds	r0, #1
 80046e6:	d1be      	bne.n	8004666 <_printf_float+0x326>
 80046e8:	e689      	b.n	80043fe <_printf_float+0xbe>
 80046ea:	9a05      	ldr	r2, [sp, #20]
 80046ec:	464b      	mov	r3, r9
 80046ee:	4442      	add	r2, r8
 80046f0:	4631      	mov	r1, r6
 80046f2:	4628      	mov	r0, r5
 80046f4:	47b8      	blx	r7
 80046f6:	3001      	adds	r0, #1
 80046f8:	d1c1      	bne.n	800467e <_printf_float+0x33e>
 80046fa:	e680      	b.n	80043fe <_printf_float+0xbe>
 80046fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80046fe:	2a01      	cmp	r2, #1
 8004700:	dc01      	bgt.n	8004706 <_printf_float+0x3c6>
 8004702:	07db      	lsls	r3, r3, #31
 8004704:	d53a      	bpl.n	800477c <_printf_float+0x43c>
 8004706:	2301      	movs	r3, #1
 8004708:	4642      	mov	r2, r8
 800470a:	4631      	mov	r1, r6
 800470c:	4628      	mov	r0, r5
 800470e:	47b8      	blx	r7
 8004710:	3001      	adds	r0, #1
 8004712:	f43f ae74 	beq.w	80043fe <_printf_float+0xbe>
 8004716:	ee18 3a10 	vmov	r3, s16
 800471a:	4652      	mov	r2, sl
 800471c:	4631      	mov	r1, r6
 800471e:	4628      	mov	r0, r5
 8004720:	47b8      	blx	r7
 8004722:	3001      	adds	r0, #1
 8004724:	f43f ae6b 	beq.w	80043fe <_printf_float+0xbe>
 8004728:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800472c:	2200      	movs	r2, #0
 800472e:	2300      	movs	r3, #0
 8004730:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004734:	f7fc f9d0 	bl	8000ad8 <__aeabi_dcmpeq>
 8004738:	b9d8      	cbnz	r0, 8004772 <_printf_float+0x432>
 800473a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800473e:	f108 0201 	add.w	r2, r8, #1
 8004742:	4631      	mov	r1, r6
 8004744:	4628      	mov	r0, r5
 8004746:	47b8      	blx	r7
 8004748:	3001      	adds	r0, #1
 800474a:	d10e      	bne.n	800476a <_printf_float+0x42a>
 800474c:	e657      	b.n	80043fe <_printf_float+0xbe>
 800474e:	2301      	movs	r3, #1
 8004750:	4652      	mov	r2, sl
 8004752:	4631      	mov	r1, r6
 8004754:	4628      	mov	r0, r5
 8004756:	47b8      	blx	r7
 8004758:	3001      	adds	r0, #1
 800475a:	f43f ae50 	beq.w	80043fe <_printf_float+0xbe>
 800475e:	f108 0801 	add.w	r8, r8, #1
 8004762:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004764:	3b01      	subs	r3, #1
 8004766:	4543      	cmp	r3, r8
 8004768:	dcf1      	bgt.n	800474e <_printf_float+0x40e>
 800476a:	464b      	mov	r3, r9
 800476c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004770:	e6da      	b.n	8004528 <_printf_float+0x1e8>
 8004772:	f04f 0800 	mov.w	r8, #0
 8004776:	f104 0a1a 	add.w	sl, r4, #26
 800477a:	e7f2      	b.n	8004762 <_printf_float+0x422>
 800477c:	2301      	movs	r3, #1
 800477e:	4642      	mov	r2, r8
 8004780:	e7df      	b.n	8004742 <_printf_float+0x402>
 8004782:	2301      	movs	r3, #1
 8004784:	464a      	mov	r2, r9
 8004786:	4631      	mov	r1, r6
 8004788:	4628      	mov	r0, r5
 800478a:	47b8      	blx	r7
 800478c:	3001      	adds	r0, #1
 800478e:	f43f ae36 	beq.w	80043fe <_printf_float+0xbe>
 8004792:	f108 0801 	add.w	r8, r8, #1
 8004796:	68e3      	ldr	r3, [r4, #12]
 8004798:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800479a:	1a5b      	subs	r3, r3, r1
 800479c:	4543      	cmp	r3, r8
 800479e:	dcf0      	bgt.n	8004782 <_printf_float+0x442>
 80047a0:	e6f8      	b.n	8004594 <_printf_float+0x254>
 80047a2:	f04f 0800 	mov.w	r8, #0
 80047a6:	f104 0919 	add.w	r9, r4, #25
 80047aa:	e7f4      	b.n	8004796 <_printf_float+0x456>

080047ac <_printf_common>:
 80047ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047b0:	4616      	mov	r6, r2
 80047b2:	4699      	mov	r9, r3
 80047b4:	688a      	ldr	r2, [r1, #8]
 80047b6:	690b      	ldr	r3, [r1, #16]
 80047b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80047bc:	4293      	cmp	r3, r2
 80047be:	bfb8      	it	lt
 80047c0:	4613      	movlt	r3, r2
 80047c2:	6033      	str	r3, [r6, #0]
 80047c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80047c8:	4607      	mov	r7, r0
 80047ca:	460c      	mov	r4, r1
 80047cc:	b10a      	cbz	r2, 80047d2 <_printf_common+0x26>
 80047ce:	3301      	adds	r3, #1
 80047d0:	6033      	str	r3, [r6, #0]
 80047d2:	6823      	ldr	r3, [r4, #0]
 80047d4:	0699      	lsls	r1, r3, #26
 80047d6:	bf42      	ittt	mi
 80047d8:	6833      	ldrmi	r3, [r6, #0]
 80047da:	3302      	addmi	r3, #2
 80047dc:	6033      	strmi	r3, [r6, #0]
 80047de:	6825      	ldr	r5, [r4, #0]
 80047e0:	f015 0506 	ands.w	r5, r5, #6
 80047e4:	d106      	bne.n	80047f4 <_printf_common+0x48>
 80047e6:	f104 0a19 	add.w	sl, r4, #25
 80047ea:	68e3      	ldr	r3, [r4, #12]
 80047ec:	6832      	ldr	r2, [r6, #0]
 80047ee:	1a9b      	subs	r3, r3, r2
 80047f0:	42ab      	cmp	r3, r5
 80047f2:	dc26      	bgt.n	8004842 <_printf_common+0x96>
 80047f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80047f8:	1e13      	subs	r3, r2, #0
 80047fa:	6822      	ldr	r2, [r4, #0]
 80047fc:	bf18      	it	ne
 80047fe:	2301      	movne	r3, #1
 8004800:	0692      	lsls	r2, r2, #26
 8004802:	d42b      	bmi.n	800485c <_printf_common+0xb0>
 8004804:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004808:	4649      	mov	r1, r9
 800480a:	4638      	mov	r0, r7
 800480c:	47c0      	blx	r8
 800480e:	3001      	adds	r0, #1
 8004810:	d01e      	beq.n	8004850 <_printf_common+0xa4>
 8004812:	6823      	ldr	r3, [r4, #0]
 8004814:	6922      	ldr	r2, [r4, #16]
 8004816:	f003 0306 	and.w	r3, r3, #6
 800481a:	2b04      	cmp	r3, #4
 800481c:	bf02      	ittt	eq
 800481e:	68e5      	ldreq	r5, [r4, #12]
 8004820:	6833      	ldreq	r3, [r6, #0]
 8004822:	1aed      	subeq	r5, r5, r3
 8004824:	68a3      	ldr	r3, [r4, #8]
 8004826:	bf0c      	ite	eq
 8004828:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800482c:	2500      	movne	r5, #0
 800482e:	4293      	cmp	r3, r2
 8004830:	bfc4      	itt	gt
 8004832:	1a9b      	subgt	r3, r3, r2
 8004834:	18ed      	addgt	r5, r5, r3
 8004836:	2600      	movs	r6, #0
 8004838:	341a      	adds	r4, #26
 800483a:	42b5      	cmp	r5, r6
 800483c:	d11a      	bne.n	8004874 <_printf_common+0xc8>
 800483e:	2000      	movs	r0, #0
 8004840:	e008      	b.n	8004854 <_printf_common+0xa8>
 8004842:	2301      	movs	r3, #1
 8004844:	4652      	mov	r2, sl
 8004846:	4649      	mov	r1, r9
 8004848:	4638      	mov	r0, r7
 800484a:	47c0      	blx	r8
 800484c:	3001      	adds	r0, #1
 800484e:	d103      	bne.n	8004858 <_printf_common+0xac>
 8004850:	f04f 30ff 	mov.w	r0, #4294967295
 8004854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004858:	3501      	adds	r5, #1
 800485a:	e7c6      	b.n	80047ea <_printf_common+0x3e>
 800485c:	18e1      	adds	r1, r4, r3
 800485e:	1c5a      	adds	r2, r3, #1
 8004860:	2030      	movs	r0, #48	; 0x30
 8004862:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004866:	4422      	add	r2, r4
 8004868:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800486c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004870:	3302      	adds	r3, #2
 8004872:	e7c7      	b.n	8004804 <_printf_common+0x58>
 8004874:	2301      	movs	r3, #1
 8004876:	4622      	mov	r2, r4
 8004878:	4649      	mov	r1, r9
 800487a:	4638      	mov	r0, r7
 800487c:	47c0      	blx	r8
 800487e:	3001      	adds	r0, #1
 8004880:	d0e6      	beq.n	8004850 <_printf_common+0xa4>
 8004882:	3601      	adds	r6, #1
 8004884:	e7d9      	b.n	800483a <_printf_common+0x8e>
	...

08004888 <_printf_i>:
 8004888:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800488c:	7e0f      	ldrb	r7, [r1, #24]
 800488e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004890:	2f78      	cmp	r7, #120	; 0x78
 8004892:	4691      	mov	r9, r2
 8004894:	4680      	mov	r8, r0
 8004896:	460c      	mov	r4, r1
 8004898:	469a      	mov	sl, r3
 800489a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800489e:	d807      	bhi.n	80048b0 <_printf_i+0x28>
 80048a0:	2f62      	cmp	r7, #98	; 0x62
 80048a2:	d80a      	bhi.n	80048ba <_printf_i+0x32>
 80048a4:	2f00      	cmp	r7, #0
 80048a6:	f000 80d4 	beq.w	8004a52 <_printf_i+0x1ca>
 80048aa:	2f58      	cmp	r7, #88	; 0x58
 80048ac:	f000 80c0 	beq.w	8004a30 <_printf_i+0x1a8>
 80048b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80048b8:	e03a      	b.n	8004930 <_printf_i+0xa8>
 80048ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80048be:	2b15      	cmp	r3, #21
 80048c0:	d8f6      	bhi.n	80048b0 <_printf_i+0x28>
 80048c2:	a101      	add	r1, pc, #4	; (adr r1, 80048c8 <_printf_i+0x40>)
 80048c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80048c8:	08004921 	.word	0x08004921
 80048cc:	08004935 	.word	0x08004935
 80048d0:	080048b1 	.word	0x080048b1
 80048d4:	080048b1 	.word	0x080048b1
 80048d8:	080048b1 	.word	0x080048b1
 80048dc:	080048b1 	.word	0x080048b1
 80048e0:	08004935 	.word	0x08004935
 80048e4:	080048b1 	.word	0x080048b1
 80048e8:	080048b1 	.word	0x080048b1
 80048ec:	080048b1 	.word	0x080048b1
 80048f0:	080048b1 	.word	0x080048b1
 80048f4:	08004a39 	.word	0x08004a39
 80048f8:	08004961 	.word	0x08004961
 80048fc:	080049f3 	.word	0x080049f3
 8004900:	080048b1 	.word	0x080048b1
 8004904:	080048b1 	.word	0x080048b1
 8004908:	08004a5b 	.word	0x08004a5b
 800490c:	080048b1 	.word	0x080048b1
 8004910:	08004961 	.word	0x08004961
 8004914:	080048b1 	.word	0x080048b1
 8004918:	080048b1 	.word	0x080048b1
 800491c:	080049fb 	.word	0x080049fb
 8004920:	682b      	ldr	r3, [r5, #0]
 8004922:	1d1a      	adds	r2, r3, #4
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	602a      	str	r2, [r5, #0]
 8004928:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800492c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004930:	2301      	movs	r3, #1
 8004932:	e09f      	b.n	8004a74 <_printf_i+0x1ec>
 8004934:	6820      	ldr	r0, [r4, #0]
 8004936:	682b      	ldr	r3, [r5, #0]
 8004938:	0607      	lsls	r7, r0, #24
 800493a:	f103 0104 	add.w	r1, r3, #4
 800493e:	6029      	str	r1, [r5, #0]
 8004940:	d501      	bpl.n	8004946 <_printf_i+0xbe>
 8004942:	681e      	ldr	r6, [r3, #0]
 8004944:	e003      	b.n	800494e <_printf_i+0xc6>
 8004946:	0646      	lsls	r6, r0, #25
 8004948:	d5fb      	bpl.n	8004942 <_printf_i+0xba>
 800494a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800494e:	2e00      	cmp	r6, #0
 8004950:	da03      	bge.n	800495a <_printf_i+0xd2>
 8004952:	232d      	movs	r3, #45	; 0x2d
 8004954:	4276      	negs	r6, r6
 8004956:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800495a:	485a      	ldr	r0, [pc, #360]	; (8004ac4 <_printf_i+0x23c>)
 800495c:	230a      	movs	r3, #10
 800495e:	e012      	b.n	8004986 <_printf_i+0xfe>
 8004960:	682b      	ldr	r3, [r5, #0]
 8004962:	6820      	ldr	r0, [r4, #0]
 8004964:	1d19      	adds	r1, r3, #4
 8004966:	6029      	str	r1, [r5, #0]
 8004968:	0605      	lsls	r5, r0, #24
 800496a:	d501      	bpl.n	8004970 <_printf_i+0xe8>
 800496c:	681e      	ldr	r6, [r3, #0]
 800496e:	e002      	b.n	8004976 <_printf_i+0xee>
 8004970:	0641      	lsls	r1, r0, #25
 8004972:	d5fb      	bpl.n	800496c <_printf_i+0xe4>
 8004974:	881e      	ldrh	r6, [r3, #0]
 8004976:	4853      	ldr	r0, [pc, #332]	; (8004ac4 <_printf_i+0x23c>)
 8004978:	2f6f      	cmp	r7, #111	; 0x6f
 800497a:	bf0c      	ite	eq
 800497c:	2308      	moveq	r3, #8
 800497e:	230a      	movne	r3, #10
 8004980:	2100      	movs	r1, #0
 8004982:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004986:	6865      	ldr	r5, [r4, #4]
 8004988:	60a5      	str	r5, [r4, #8]
 800498a:	2d00      	cmp	r5, #0
 800498c:	bfa2      	ittt	ge
 800498e:	6821      	ldrge	r1, [r4, #0]
 8004990:	f021 0104 	bicge.w	r1, r1, #4
 8004994:	6021      	strge	r1, [r4, #0]
 8004996:	b90e      	cbnz	r6, 800499c <_printf_i+0x114>
 8004998:	2d00      	cmp	r5, #0
 800499a:	d04b      	beq.n	8004a34 <_printf_i+0x1ac>
 800499c:	4615      	mov	r5, r2
 800499e:	fbb6 f1f3 	udiv	r1, r6, r3
 80049a2:	fb03 6711 	mls	r7, r3, r1, r6
 80049a6:	5dc7      	ldrb	r7, [r0, r7]
 80049a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80049ac:	4637      	mov	r7, r6
 80049ae:	42bb      	cmp	r3, r7
 80049b0:	460e      	mov	r6, r1
 80049b2:	d9f4      	bls.n	800499e <_printf_i+0x116>
 80049b4:	2b08      	cmp	r3, #8
 80049b6:	d10b      	bne.n	80049d0 <_printf_i+0x148>
 80049b8:	6823      	ldr	r3, [r4, #0]
 80049ba:	07de      	lsls	r6, r3, #31
 80049bc:	d508      	bpl.n	80049d0 <_printf_i+0x148>
 80049be:	6923      	ldr	r3, [r4, #16]
 80049c0:	6861      	ldr	r1, [r4, #4]
 80049c2:	4299      	cmp	r1, r3
 80049c4:	bfde      	ittt	le
 80049c6:	2330      	movle	r3, #48	; 0x30
 80049c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80049cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80049d0:	1b52      	subs	r2, r2, r5
 80049d2:	6122      	str	r2, [r4, #16]
 80049d4:	f8cd a000 	str.w	sl, [sp]
 80049d8:	464b      	mov	r3, r9
 80049da:	aa03      	add	r2, sp, #12
 80049dc:	4621      	mov	r1, r4
 80049de:	4640      	mov	r0, r8
 80049e0:	f7ff fee4 	bl	80047ac <_printf_common>
 80049e4:	3001      	adds	r0, #1
 80049e6:	d14a      	bne.n	8004a7e <_printf_i+0x1f6>
 80049e8:	f04f 30ff 	mov.w	r0, #4294967295
 80049ec:	b004      	add	sp, #16
 80049ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049f2:	6823      	ldr	r3, [r4, #0]
 80049f4:	f043 0320 	orr.w	r3, r3, #32
 80049f8:	6023      	str	r3, [r4, #0]
 80049fa:	4833      	ldr	r0, [pc, #204]	; (8004ac8 <_printf_i+0x240>)
 80049fc:	2778      	movs	r7, #120	; 0x78
 80049fe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004a02:	6823      	ldr	r3, [r4, #0]
 8004a04:	6829      	ldr	r1, [r5, #0]
 8004a06:	061f      	lsls	r7, r3, #24
 8004a08:	f851 6b04 	ldr.w	r6, [r1], #4
 8004a0c:	d402      	bmi.n	8004a14 <_printf_i+0x18c>
 8004a0e:	065f      	lsls	r7, r3, #25
 8004a10:	bf48      	it	mi
 8004a12:	b2b6      	uxthmi	r6, r6
 8004a14:	07df      	lsls	r7, r3, #31
 8004a16:	bf48      	it	mi
 8004a18:	f043 0320 	orrmi.w	r3, r3, #32
 8004a1c:	6029      	str	r1, [r5, #0]
 8004a1e:	bf48      	it	mi
 8004a20:	6023      	strmi	r3, [r4, #0]
 8004a22:	b91e      	cbnz	r6, 8004a2c <_printf_i+0x1a4>
 8004a24:	6823      	ldr	r3, [r4, #0]
 8004a26:	f023 0320 	bic.w	r3, r3, #32
 8004a2a:	6023      	str	r3, [r4, #0]
 8004a2c:	2310      	movs	r3, #16
 8004a2e:	e7a7      	b.n	8004980 <_printf_i+0xf8>
 8004a30:	4824      	ldr	r0, [pc, #144]	; (8004ac4 <_printf_i+0x23c>)
 8004a32:	e7e4      	b.n	80049fe <_printf_i+0x176>
 8004a34:	4615      	mov	r5, r2
 8004a36:	e7bd      	b.n	80049b4 <_printf_i+0x12c>
 8004a38:	682b      	ldr	r3, [r5, #0]
 8004a3a:	6826      	ldr	r6, [r4, #0]
 8004a3c:	6961      	ldr	r1, [r4, #20]
 8004a3e:	1d18      	adds	r0, r3, #4
 8004a40:	6028      	str	r0, [r5, #0]
 8004a42:	0635      	lsls	r5, r6, #24
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	d501      	bpl.n	8004a4c <_printf_i+0x1c4>
 8004a48:	6019      	str	r1, [r3, #0]
 8004a4a:	e002      	b.n	8004a52 <_printf_i+0x1ca>
 8004a4c:	0670      	lsls	r0, r6, #25
 8004a4e:	d5fb      	bpl.n	8004a48 <_printf_i+0x1c0>
 8004a50:	8019      	strh	r1, [r3, #0]
 8004a52:	2300      	movs	r3, #0
 8004a54:	6123      	str	r3, [r4, #16]
 8004a56:	4615      	mov	r5, r2
 8004a58:	e7bc      	b.n	80049d4 <_printf_i+0x14c>
 8004a5a:	682b      	ldr	r3, [r5, #0]
 8004a5c:	1d1a      	adds	r2, r3, #4
 8004a5e:	602a      	str	r2, [r5, #0]
 8004a60:	681d      	ldr	r5, [r3, #0]
 8004a62:	6862      	ldr	r2, [r4, #4]
 8004a64:	2100      	movs	r1, #0
 8004a66:	4628      	mov	r0, r5
 8004a68:	f7fb fbba 	bl	80001e0 <memchr>
 8004a6c:	b108      	cbz	r0, 8004a72 <_printf_i+0x1ea>
 8004a6e:	1b40      	subs	r0, r0, r5
 8004a70:	6060      	str	r0, [r4, #4]
 8004a72:	6863      	ldr	r3, [r4, #4]
 8004a74:	6123      	str	r3, [r4, #16]
 8004a76:	2300      	movs	r3, #0
 8004a78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a7c:	e7aa      	b.n	80049d4 <_printf_i+0x14c>
 8004a7e:	6923      	ldr	r3, [r4, #16]
 8004a80:	462a      	mov	r2, r5
 8004a82:	4649      	mov	r1, r9
 8004a84:	4640      	mov	r0, r8
 8004a86:	47d0      	blx	sl
 8004a88:	3001      	adds	r0, #1
 8004a8a:	d0ad      	beq.n	80049e8 <_printf_i+0x160>
 8004a8c:	6823      	ldr	r3, [r4, #0]
 8004a8e:	079b      	lsls	r3, r3, #30
 8004a90:	d413      	bmi.n	8004aba <_printf_i+0x232>
 8004a92:	68e0      	ldr	r0, [r4, #12]
 8004a94:	9b03      	ldr	r3, [sp, #12]
 8004a96:	4298      	cmp	r0, r3
 8004a98:	bfb8      	it	lt
 8004a9a:	4618      	movlt	r0, r3
 8004a9c:	e7a6      	b.n	80049ec <_printf_i+0x164>
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	4632      	mov	r2, r6
 8004aa2:	4649      	mov	r1, r9
 8004aa4:	4640      	mov	r0, r8
 8004aa6:	47d0      	blx	sl
 8004aa8:	3001      	adds	r0, #1
 8004aaa:	d09d      	beq.n	80049e8 <_printf_i+0x160>
 8004aac:	3501      	adds	r5, #1
 8004aae:	68e3      	ldr	r3, [r4, #12]
 8004ab0:	9903      	ldr	r1, [sp, #12]
 8004ab2:	1a5b      	subs	r3, r3, r1
 8004ab4:	42ab      	cmp	r3, r5
 8004ab6:	dcf2      	bgt.n	8004a9e <_printf_i+0x216>
 8004ab8:	e7eb      	b.n	8004a92 <_printf_i+0x20a>
 8004aba:	2500      	movs	r5, #0
 8004abc:	f104 0619 	add.w	r6, r4, #25
 8004ac0:	e7f5      	b.n	8004aae <_printf_i+0x226>
 8004ac2:	bf00      	nop
 8004ac4:	08007c52 	.word	0x08007c52
 8004ac8:	08007c63 	.word	0x08007c63

08004acc <std>:
 8004acc:	2300      	movs	r3, #0
 8004ace:	b510      	push	{r4, lr}
 8004ad0:	4604      	mov	r4, r0
 8004ad2:	e9c0 3300 	strd	r3, r3, [r0]
 8004ad6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004ada:	6083      	str	r3, [r0, #8]
 8004adc:	8181      	strh	r1, [r0, #12]
 8004ade:	6643      	str	r3, [r0, #100]	; 0x64
 8004ae0:	81c2      	strh	r2, [r0, #14]
 8004ae2:	6183      	str	r3, [r0, #24]
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	2208      	movs	r2, #8
 8004ae8:	305c      	adds	r0, #92	; 0x5c
 8004aea:	f000 fa2b 	bl	8004f44 <memset>
 8004aee:	4b0d      	ldr	r3, [pc, #52]	; (8004b24 <std+0x58>)
 8004af0:	6263      	str	r3, [r4, #36]	; 0x24
 8004af2:	4b0d      	ldr	r3, [pc, #52]	; (8004b28 <std+0x5c>)
 8004af4:	62a3      	str	r3, [r4, #40]	; 0x28
 8004af6:	4b0d      	ldr	r3, [pc, #52]	; (8004b2c <std+0x60>)
 8004af8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004afa:	4b0d      	ldr	r3, [pc, #52]	; (8004b30 <std+0x64>)
 8004afc:	6323      	str	r3, [r4, #48]	; 0x30
 8004afe:	4b0d      	ldr	r3, [pc, #52]	; (8004b34 <std+0x68>)
 8004b00:	6224      	str	r4, [r4, #32]
 8004b02:	429c      	cmp	r4, r3
 8004b04:	d006      	beq.n	8004b14 <std+0x48>
 8004b06:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004b0a:	4294      	cmp	r4, r2
 8004b0c:	d002      	beq.n	8004b14 <std+0x48>
 8004b0e:	33d0      	adds	r3, #208	; 0xd0
 8004b10:	429c      	cmp	r4, r3
 8004b12:	d105      	bne.n	8004b20 <std+0x54>
 8004b14:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004b18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b1c:	f000 ba8e 	b.w	800503c <__retarget_lock_init_recursive>
 8004b20:	bd10      	pop	{r4, pc}
 8004b22:	bf00      	nop
 8004b24:	08004d95 	.word	0x08004d95
 8004b28:	08004db7 	.word	0x08004db7
 8004b2c:	08004def 	.word	0x08004def
 8004b30:	08004e13 	.word	0x08004e13
 8004b34:	20000674 	.word	0x20000674

08004b38 <stdio_exit_handler>:
 8004b38:	4a02      	ldr	r2, [pc, #8]	; (8004b44 <stdio_exit_handler+0xc>)
 8004b3a:	4903      	ldr	r1, [pc, #12]	; (8004b48 <stdio_exit_handler+0x10>)
 8004b3c:	4803      	ldr	r0, [pc, #12]	; (8004b4c <stdio_exit_handler+0x14>)
 8004b3e:	f000 b869 	b.w	8004c14 <_fwalk_sglue>
 8004b42:	bf00      	nop
 8004b44:	20000010 	.word	0x20000010
 8004b48:	08006c79 	.word	0x08006c79
 8004b4c:	2000001c 	.word	0x2000001c

08004b50 <cleanup_stdio>:
 8004b50:	6841      	ldr	r1, [r0, #4]
 8004b52:	4b0c      	ldr	r3, [pc, #48]	; (8004b84 <cleanup_stdio+0x34>)
 8004b54:	4299      	cmp	r1, r3
 8004b56:	b510      	push	{r4, lr}
 8004b58:	4604      	mov	r4, r0
 8004b5a:	d001      	beq.n	8004b60 <cleanup_stdio+0x10>
 8004b5c:	f002 f88c 	bl	8006c78 <_fflush_r>
 8004b60:	68a1      	ldr	r1, [r4, #8]
 8004b62:	4b09      	ldr	r3, [pc, #36]	; (8004b88 <cleanup_stdio+0x38>)
 8004b64:	4299      	cmp	r1, r3
 8004b66:	d002      	beq.n	8004b6e <cleanup_stdio+0x1e>
 8004b68:	4620      	mov	r0, r4
 8004b6a:	f002 f885 	bl	8006c78 <_fflush_r>
 8004b6e:	68e1      	ldr	r1, [r4, #12]
 8004b70:	4b06      	ldr	r3, [pc, #24]	; (8004b8c <cleanup_stdio+0x3c>)
 8004b72:	4299      	cmp	r1, r3
 8004b74:	d004      	beq.n	8004b80 <cleanup_stdio+0x30>
 8004b76:	4620      	mov	r0, r4
 8004b78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b7c:	f002 b87c 	b.w	8006c78 <_fflush_r>
 8004b80:	bd10      	pop	{r4, pc}
 8004b82:	bf00      	nop
 8004b84:	20000674 	.word	0x20000674
 8004b88:	200006dc 	.word	0x200006dc
 8004b8c:	20000744 	.word	0x20000744

08004b90 <global_stdio_init.part.0>:
 8004b90:	b510      	push	{r4, lr}
 8004b92:	4b0b      	ldr	r3, [pc, #44]	; (8004bc0 <global_stdio_init.part.0+0x30>)
 8004b94:	4c0b      	ldr	r4, [pc, #44]	; (8004bc4 <global_stdio_init.part.0+0x34>)
 8004b96:	4a0c      	ldr	r2, [pc, #48]	; (8004bc8 <global_stdio_init.part.0+0x38>)
 8004b98:	601a      	str	r2, [r3, #0]
 8004b9a:	4620      	mov	r0, r4
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	2104      	movs	r1, #4
 8004ba0:	f7ff ff94 	bl	8004acc <std>
 8004ba4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004ba8:	2201      	movs	r2, #1
 8004baa:	2109      	movs	r1, #9
 8004bac:	f7ff ff8e 	bl	8004acc <std>
 8004bb0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004bb4:	2202      	movs	r2, #2
 8004bb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bba:	2112      	movs	r1, #18
 8004bbc:	f7ff bf86 	b.w	8004acc <std>
 8004bc0:	200007ac 	.word	0x200007ac
 8004bc4:	20000674 	.word	0x20000674
 8004bc8:	08004b39 	.word	0x08004b39

08004bcc <__sfp_lock_acquire>:
 8004bcc:	4801      	ldr	r0, [pc, #4]	; (8004bd4 <__sfp_lock_acquire+0x8>)
 8004bce:	f000 ba36 	b.w	800503e <__retarget_lock_acquire_recursive>
 8004bd2:	bf00      	nop
 8004bd4:	200007b5 	.word	0x200007b5

08004bd8 <__sfp_lock_release>:
 8004bd8:	4801      	ldr	r0, [pc, #4]	; (8004be0 <__sfp_lock_release+0x8>)
 8004bda:	f000 ba31 	b.w	8005040 <__retarget_lock_release_recursive>
 8004bde:	bf00      	nop
 8004be0:	200007b5 	.word	0x200007b5

08004be4 <__sinit>:
 8004be4:	b510      	push	{r4, lr}
 8004be6:	4604      	mov	r4, r0
 8004be8:	f7ff fff0 	bl	8004bcc <__sfp_lock_acquire>
 8004bec:	6a23      	ldr	r3, [r4, #32]
 8004bee:	b11b      	cbz	r3, 8004bf8 <__sinit+0x14>
 8004bf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bf4:	f7ff bff0 	b.w	8004bd8 <__sfp_lock_release>
 8004bf8:	4b04      	ldr	r3, [pc, #16]	; (8004c0c <__sinit+0x28>)
 8004bfa:	6223      	str	r3, [r4, #32]
 8004bfc:	4b04      	ldr	r3, [pc, #16]	; (8004c10 <__sinit+0x2c>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d1f5      	bne.n	8004bf0 <__sinit+0xc>
 8004c04:	f7ff ffc4 	bl	8004b90 <global_stdio_init.part.0>
 8004c08:	e7f2      	b.n	8004bf0 <__sinit+0xc>
 8004c0a:	bf00      	nop
 8004c0c:	08004b51 	.word	0x08004b51
 8004c10:	200007ac 	.word	0x200007ac

08004c14 <_fwalk_sglue>:
 8004c14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c18:	4607      	mov	r7, r0
 8004c1a:	4688      	mov	r8, r1
 8004c1c:	4614      	mov	r4, r2
 8004c1e:	2600      	movs	r6, #0
 8004c20:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004c24:	f1b9 0901 	subs.w	r9, r9, #1
 8004c28:	d505      	bpl.n	8004c36 <_fwalk_sglue+0x22>
 8004c2a:	6824      	ldr	r4, [r4, #0]
 8004c2c:	2c00      	cmp	r4, #0
 8004c2e:	d1f7      	bne.n	8004c20 <_fwalk_sglue+0xc>
 8004c30:	4630      	mov	r0, r6
 8004c32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c36:	89ab      	ldrh	r3, [r5, #12]
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d907      	bls.n	8004c4c <_fwalk_sglue+0x38>
 8004c3c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c40:	3301      	adds	r3, #1
 8004c42:	d003      	beq.n	8004c4c <_fwalk_sglue+0x38>
 8004c44:	4629      	mov	r1, r5
 8004c46:	4638      	mov	r0, r7
 8004c48:	47c0      	blx	r8
 8004c4a:	4306      	orrs	r6, r0
 8004c4c:	3568      	adds	r5, #104	; 0x68
 8004c4e:	e7e9      	b.n	8004c24 <_fwalk_sglue+0x10>

08004c50 <iprintf>:
 8004c50:	b40f      	push	{r0, r1, r2, r3}
 8004c52:	b507      	push	{r0, r1, r2, lr}
 8004c54:	4906      	ldr	r1, [pc, #24]	; (8004c70 <iprintf+0x20>)
 8004c56:	ab04      	add	r3, sp, #16
 8004c58:	6808      	ldr	r0, [r1, #0]
 8004c5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c5e:	6881      	ldr	r1, [r0, #8]
 8004c60:	9301      	str	r3, [sp, #4]
 8004c62:	f001 fe69 	bl	8006938 <_vfiprintf_r>
 8004c66:	b003      	add	sp, #12
 8004c68:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c6c:	b004      	add	sp, #16
 8004c6e:	4770      	bx	lr
 8004c70:	20000068 	.word	0x20000068

08004c74 <_puts_r>:
 8004c74:	6a03      	ldr	r3, [r0, #32]
 8004c76:	b570      	push	{r4, r5, r6, lr}
 8004c78:	6884      	ldr	r4, [r0, #8]
 8004c7a:	4605      	mov	r5, r0
 8004c7c:	460e      	mov	r6, r1
 8004c7e:	b90b      	cbnz	r3, 8004c84 <_puts_r+0x10>
 8004c80:	f7ff ffb0 	bl	8004be4 <__sinit>
 8004c84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c86:	07db      	lsls	r3, r3, #31
 8004c88:	d405      	bmi.n	8004c96 <_puts_r+0x22>
 8004c8a:	89a3      	ldrh	r3, [r4, #12]
 8004c8c:	0598      	lsls	r0, r3, #22
 8004c8e:	d402      	bmi.n	8004c96 <_puts_r+0x22>
 8004c90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c92:	f000 f9d4 	bl	800503e <__retarget_lock_acquire_recursive>
 8004c96:	89a3      	ldrh	r3, [r4, #12]
 8004c98:	0719      	lsls	r1, r3, #28
 8004c9a:	d513      	bpl.n	8004cc4 <_puts_r+0x50>
 8004c9c:	6923      	ldr	r3, [r4, #16]
 8004c9e:	b18b      	cbz	r3, 8004cc4 <_puts_r+0x50>
 8004ca0:	3e01      	subs	r6, #1
 8004ca2:	68a3      	ldr	r3, [r4, #8]
 8004ca4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	60a3      	str	r3, [r4, #8]
 8004cac:	b9e9      	cbnz	r1, 8004cea <_puts_r+0x76>
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	da2e      	bge.n	8004d10 <_puts_r+0x9c>
 8004cb2:	4622      	mov	r2, r4
 8004cb4:	210a      	movs	r1, #10
 8004cb6:	4628      	mov	r0, r5
 8004cb8:	f000 f8af 	bl	8004e1a <__swbuf_r>
 8004cbc:	3001      	adds	r0, #1
 8004cbe:	d007      	beq.n	8004cd0 <_puts_r+0x5c>
 8004cc0:	250a      	movs	r5, #10
 8004cc2:	e007      	b.n	8004cd4 <_puts_r+0x60>
 8004cc4:	4621      	mov	r1, r4
 8004cc6:	4628      	mov	r0, r5
 8004cc8:	f000 f8e4 	bl	8004e94 <__swsetup_r>
 8004ccc:	2800      	cmp	r0, #0
 8004cce:	d0e7      	beq.n	8004ca0 <_puts_r+0x2c>
 8004cd0:	f04f 35ff 	mov.w	r5, #4294967295
 8004cd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004cd6:	07da      	lsls	r2, r3, #31
 8004cd8:	d405      	bmi.n	8004ce6 <_puts_r+0x72>
 8004cda:	89a3      	ldrh	r3, [r4, #12]
 8004cdc:	059b      	lsls	r3, r3, #22
 8004cde:	d402      	bmi.n	8004ce6 <_puts_r+0x72>
 8004ce0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ce2:	f000 f9ad 	bl	8005040 <__retarget_lock_release_recursive>
 8004ce6:	4628      	mov	r0, r5
 8004ce8:	bd70      	pop	{r4, r5, r6, pc}
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	da04      	bge.n	8004cf8 <_puts_r+0x84>
 8004cee:	69a2      	ldr	r2, [r4, #24]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	dc06      	bgt.n	8004d02 <_puts_r+0x8e>
 8004cf4:	290a      	cmp	r1, #10
 8004cf6:	d004      	beq.n	8004d02 <_puts_r+0x8e>
 8004cf8:	6823      	ldr	r3, [r4, #0]
 8004cfa:	1c5a      	adds	r2, r3, #1
 8004cfc:	6022      	str	r2, [r4, #0]
 8004cfe:	7019      	strb	r1, [r3, #0]
 8004d00:	e7cf      	b.n	8004ca2 <_puts_r+0x2e>
 8004d02:	4622      	mov	r2, r4
 8004d04:	4628      	mov	r0, r5
 8004d06:	f000 f888 	bl	8004e1a <__swbuf_r>
 8004d0a:	3001      	adds	r0, #1
 8004d0c:	d1c9      	bne.n	8004ca2 <_puts_r+0x2e>
 8004d0e:	e7df      	b.n	8004cd0 <_puts_r+0x5c>
 8004d10:	6823      	ldr	r3, [r4, #0]
 8004d12:	250a      	movs	r5, #10
 8004d14:	1c5a      	adds	r2, r3, #1
 8004d16:	6022      	str	r2, [r4, #0]
 8004d18:	701d      	strb	r5, [r3, #0]
 8004d1a:	e7db      	b.n	8004cd4 <_puts_r+0x60>

08004d1c <puts>:
 8004d1c:	4b02      	ldr	r3, [pc, #8]	; (8004d28 <puts+0xc>)
 8004d1e:	4601      	mov	r1, r0
 8004d20:	6818      	ldr	r0, [r3, #0]
 8004d22:	f7ff bfa7 	b.w	8004c74 <_puts_r>
 8004d26:	bf00      	nop
 8004d28:	20000068 	.word	0x20000068

08004d2c <sniprintf>:
 8004d2c:	b40c      	push	{r2, r3}
 8004d2e:	b530      	push	{r4, r5, lr}
 8004d30:	4b17      	ldr	r3, [pc, #92]	; (8004d90 <sniprintf+0x64>)
 8004d32:	1e0c      	subs	r4, r1, #0
 8004d34:	681d      	ldr	r5, [r3, #0]
 8004d36:	b09d      	sub	sp, #116	; 0x74
 8004d38:	da08      	bge.n	8004d4c <sniprintf+0x20>
 8004d3a:	238b      	movs	r3, #139	; 0x8b
 8004d3c:	602b      	str	r3, [r5, #0]
 8004d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8004d42:	b01d      	add	sp, #116	; 0x74
 8004d44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d48:	b002      	add	sp, #8
 8004d4a:	4770      	bx	lr
 8004d4c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004d50:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004d54:	bf14      	ite	ne
 8004d56:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004d5a:	4623      	moveq	r3, r4
 8004d5c:	9304      	str	r3, [sp, #16]
 8004d5e:	9307      	str	r3, [sp, #28]
 8004d60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004d64:	9002      	str	r0, [sp, #8]
 8004d66:	9006      	str	r0, [sp, #24]
 8004d68:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004d6c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004d6e:	ab21      	add	r3, sp, #132	; 0x84
 8004d70:	a902      	add	r1, sp, #8
 8004d72:	4628      	mov	r0, r5
 8004d74:	9301      	str	r3, [sp, #4]
 8004d76:	f001 fcb7 	bl	80066e8 <_svfiprintf_r>
 8004d7a:	1c43      	adds	r3, r0, #1
 8004d7c:	bfbc      	itt	lt
 8004d7e:	238b      	movlt	r3, #139	; 0x8b
 8004d80:	602b      	strlt	r3, [r5, #0]
 8004d82:	2c00      	cmp	r4, #0
 8004d84:	d0dd      	beq.n	8004d42 <sniprintf+0x16>
 8004d86:	9b02      	ldr	r3, [sp, #8]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	701a      	strb	r2, [r3, #0]
 8004d8c:	e7d9      	b.n	8004d42 <sniprintf+0x16>
 8004d8e:	bf00      	nop
 8004d90:	20000068 	.word	0x20000068

08004d94 <__sread>:
 8004d94:	b510      	push	{r4, lr}
 8004d96:	460c      	mov	r4, r1
 8004d98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d9c:	f000 f900 	bl	8004fa0 <_read_r>
 8004da0:	2800      	cmp	r0, #0
 8004da2:	bfab      	itete	ge
 8004da4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004da6:	89a3      	ldrhlt	r3, [r4, #12]
 8004da8:	181b      	addge	r3, r3, r0
 8004daa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004dae:	bfac      	ite	ge
 8004db0:	6563      	strge	r3, [r4, #84]	; 0x54
 8004db2:	81a3      	strhlt	r3, [r4, #12]
 8004db4:	bd10      	pop	{r4, pc}

08004db6 <__swrite>:
 8004db6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dba:	461f      	mov	r7, r3
 8004dbc:	898b      	ldrh	r3, [r1, #12]
 8004dbe:	05db      	lsls	r3, r3, #23
 8004dc0:	4605      	mov	r5, r0
 8004dc2:	460c      	mov	r4, r1
 8004dc4:	4616      	mov	r6, r2
 8004dc6:	d505      	bpl.n	8004dd4 <__swrite+0x1e>
 8004dc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dcc:	2302      	movs	r3, #2
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f000 f8d4 	bl	8004f7c <_lseek_r>
 8004dd4:	89a3      	ldrh	r3, [r4, #12]
 8004dd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004dda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004dde:	81a3      	strh	r3, [r4, #12]
 8004de0:	4632      	mov	r2, r6
 8004de2:	463b      	mov	r3, r7
 8004de4:	4628      	mov	r0, r5
 8004de6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004dea:	f000 b8eb 	b.w	8004fc4 <_write_r>

08004dee <__sseek>:
 8004dee:	b510      	push	{r4, lr}
 8004df0:	460c      	mov	r4, r1
 8004df2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004df6:	f000 f8c1 	bl	8004f7c <_lseek_r>
 8004dfa:	1c43      	adds	r3, r0, #1
 8004dfc:	89a3      	ldrh	r3, [r4, #12]
 8004dfe:	bf15      	itete	ne
 8004e00:	6560      	strne	r0, [r4, #84]	; 0x54
 8004e02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004e06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004e0a:	81a3      	strheq	r3, [r4, #12]
 8004e0c:	bf18      	it	ne
 8004e0e:	81a3      	strhne	r3, [r4, #12]
 8004e10:	bd10      	pop	{r4, pc}

08004e12 <__sclose>:
 8004e12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e16:	f000 b8a1 	b.w	8004f5c <_close_r>

08004e1a <__swbuf_r>:
 8004e1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e1c:	460e      	mov	r6, r1
 8004e1e:	4614      	mov	r4, r2
 8004e20:	4605      	mov	r5, r0
 8004e22:	b118      	cbz	r0, 8004e2c <__swbuf_r+0x12>
 8004e24:	6a03      	ldr	r3, [r0, #32]
 8004e26:	b90b      	cbnz	r3, 8004e2c <__swbuf_r+0x12>
 8004e28:	f7ff fedc 	bl	8004be4 <__sinit>
 8004e2c:	69a3      	ldr	r3, [r4, #24]
 8004e2e:	60a3      	str	r3, [r4, #8]
 8004e30:	89a3      	ldrh	r3, [r4, #12]
 8004e32:	071a      	lsls	r2, r3, #28
 8004e34:	d525      	bpl.n	8004e82 <__swbuf_r+0x68>
 8004e36:	6923      	ldr	r3, [r4, #16]
 8004e38:	b31b      	cbz	r3, 8004e82 <__swbuf_r+0x68>
 8004e3a:	6823      	ldr	r3, [r4, #0]
 8004e3c:	6922      	ldr	r2, [r4, #16]
 8004e3e:	1a98      	subs	r0, r3, r2
 8004e40:	6963      	ldr	r3, [r4, #20]
 8004e42:	b2f6      	uxtb	r6, r6
 8004e44:	4283      	cmp	r3, r0
 8004e46:	4637      	mov	r7, r6
 8004e48:	dc04      	bgt.n	8004e54 <__swbuf_r+0x3a>
 8004e4a:	4621      	mov	r1, r4
 8004e4c:	4628      	mov	r0, r5
 8004e4e:	f001 ff13 	bl	8006c78 <_fflush_r>
 8004e52:	b9e0      	cbnz	r0, 8004e8e <__swbuf_r+0x74>
 8004e54:	68a3      	ldr	r3, [r4, #8]
 8004e56:	3b01      	subs	r3, #1
 8004e58:	60a3      	str	r3, [r4, #8]
 8004e5a:	6823      	ldr	r3, [r4, #0]
 8004e5c:	1c5a      	adds	r2, r3, #1
 8004e5e:	6022      	str	r2, [r4, #0]
 8004e60:	701e      	strb	r6, [r3, #0]
 8004e62:	6962      	ldr	r2, [r4, #20]
 8004e64:	1c43      	adds	r3, r0, #1
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d004      	beq.n	8004e74 <__swbuf_r+0x5a>
 8004e6a:	89a3      	ldrh	r3, [r4, #12]
 8004e6c:	07db      	lsls	r3, r3, #31
 8004e6e:	d506      	bpl.n	8004e7e <__swbuf_r+0x64>
 8004e70:	2e0a      	cmp	r6, #10
 8004e72:	d104      	bne.n	8004e7e <__swbuf_r+0x64>
 8004e74:	4621      	mov	r1, r4
 8004e76:	4628      	mov	r0, r5
 8004e78:	f001 fefe 	bl	8006c78 <_fflush_r>
 8004e7c:	b938      	cbnz	r0, 8004e8e <__swbuf_r+0x74>
 8004e7e:	4638      	mov	r0, r7
 8004e80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e82:	4621      	mov	r1, r4
 8004e84:	4628      	mov	r0, r5
 8004e86:	f000 f805 	bl	8004e94 <__swsetup_r>
 8004e8a:	2800      	cmp	r0, #0
 8004e8c:	d0d5      	beq.n	8004e3a <__swbuf_r+0x20>
 8004e8e:	f04f 37ff 	mov.w	r7, #4294967295
 8004e92:	e7f4      	b.n	8004e7e <__swbuf_r+0x64>

08004e94 <__swsetup_r>:
 8004e94:	b538      	push	{r3, r4, r5, lr}
 8004e96:	4b2a      	ldr	r3, [pc, #168]	; (8004f40 <__swsetup_r+0xac>)
 8004e98:	4605      	mov	r5, r0
 8004e9a:	6818      	ldr	r0, [r3, #0]
 8004e9c:	460c      	mov	r4, r1
 8004e9e:	b118      	cbz	r0, 8004ea8 <__swsetup_r+0x14>
 8004ea0:	6a03      	ldr	r3, [r0, #32]
 8004ea2:	b90b      	cbnz	r3, 8004ea8 <__swsetup_r+0x14>
 8004ea4:	f7ff fe9e 	bl	8004be4 <__sinit>
 8004ea8:	89a3      	ldrh	r3, [r4, #12]
 8004eaa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004eae:	0718      	lsls	r0, r3, #28
 8004eb0:	d422      	bmi.n	8004ef8 <__swsetup_r+0x64>
 8004eb2:	06d9      	lsls	r1, r3, #27
 8004eb4:	d407      	bmi.n	8004ec6 <__swsetup_r+0x32>
 8004eb6:	2309      	movs	r3, #9
 8004eb8:	602b      	str	r3, [r5, #0]
 8004eba:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004ebe:	81a3      	strh	r3, [r4, #12]
 8004ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ec4:	e034      	b.n	8004f30 <__swsetup_r+0x9c>
 8004ec6:	0758      	lsls	r0, r3, #29
 8004ec8:	d512      	bpl.n	8004ef0 <__swsetup_r+0x5c>
 8004eca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ecc:	b141      	cbz	r1, 8004ee0 <__swsetup_r+0x4c>
 8004ece:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ed2:	4299      	cmp	r1, r3
 8004ed4:	d002      	beq.n	8004edc <__swsetup_r+0x48>
 8004ed6:	4628      	mov	r0, r5
 8004ed8:	f000 ff30 	bl	8005d3c <_free_r>
 8004edc:	2300      	movs	r3, #0
 8004ede:	6363      	str	r3, [r4, #52]	; 0x34
 8004ee0:	89a3      	ldrh	r3, [r4, #12]
 8004ee2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004ee6:	81a3      	strh	r3, [r4, #12]
 8004ee8:	2300      	movs	r3, #0
 8004eea:	6063      	str	r3, [r4, #4]
 8004eec:	6923      	ldr	r3, [r4, #16]
 8004eee:	6023      	str	r3, [r4, #0]
 8004ef0:	89a3      	ldrh	r3, [r4, #12]
 8004ef2:	f043 0308 	orr.w	r3, r3, #8
 8004ef6:	81a3      	strh	r3, [r4, #12]
 8004ef8:	6923      	ldr	r3, [r4, #16]
 8004efa:	b94b      	cbnz	r3, 8004f10 <__swsetup_r+0x7c>
 8004efc:	89a3      	ldrh	r3, [r4, #12]
 8004efe:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004f02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f06:	d003      	beq.n	8004f10 <__swsetup_r+0x7c>
 8004f08:	4621      	mov	r1, r4
 8004f0a:	4628      	mov	r0, r5
 8004f0c:	f001 ff02 	bl	8006d14 <__smakebuf_r>
 8004f10:	89a0      	ldrh	r0, [r4, #12]
 8004f12:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f16:	f010 0301 	ands.w	r3, r0, #1
 8004f1a:	d00a      	beq.n	8004f32 <__swsetup_r+0x9e>
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	60a3      	str	r3, [r4, #8]
 8004f20:	6963      	ldr	r3, [r4, #20]
 8004f22:	425b      	negs	r3, r3
 8004f24:	61a3      	str	r3, [r4, #24]
 8004f26:	6923      	ldr	r3, [r4, #16]
 8004f28:	b943      	cbnz	r3, 8004f3c <__swsetup_r+0xa8>
 8004f2a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004f2e:	d1c4      	bne.n	8004eba <__swsetup_r+0x26>
 8004f30:	bd38      	pop	{r3, r4, r5, pc}
 8004f32:	0781      	lsls	r1, r0, #30
 8004f34:	bf58      	it	pl
 8004f36:	6963      	ldrpl	r3, [r4, #20]
 8004f38:	60a3      	str	r3, [r4, #8]
 8004f3a:	e7f4      	b.n	8004f26 <__swsetup_r+0x92>
 8004f3c:	2000      	movs	r0, #0
 8004f3e:	e7f7      	b.n	8004f30 <__swsetup_r+0x9c>
 8004f40:	20000068 	.word	0x20000068

08004f44 <memset>:
 8004f44:	4402      	add	r2, r0
 8004f46:	4603      	mov	r3, r0
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d100      	bne.n	8004f4e <memset+0xa>
 8004f4c:	4770      	bx	lr
 8004f4e:	f803 1b01 	strb.w	r1, [r3], #1
 8004f52:	e7f9      	b.n	8004f48 <memset+0x4>

08004f54 <_localeconv_r>:
 8004f54:	4800      	ldr	r0, [pc, #0]	; (8004f58 <_localeconv_r+0x4>)
 8004f56:	4770      	bx	lr
 8004f58:	2000015c 	.word	0x2000015c

08004f5c <_close_r>:
 8004f5c:	b538      	push	{r3, r4, r5, lr}
 8004f5e:	4d06      	ldr	r5, [pc, #24]	; (8004f78 <_close_r+0x1c>)
 8004f60:	2300      	movs	r3, #0
 8004f62:	4604      	mov	r4, r0
 8004f64:	4608      	mov	r0, r1
 8004f66:	602b      	str	r3, [r5, #0]
 8004f68:	f7fd ff95 	bl	8002e96 <_close>
 8004f6c:	1c43      	adds	r3, r0, #1
 8004f6e:	d102      	bne.n	8004f76 <_close_r+0x1a>
 8004f70:	682b      	ldr	r3, [r5, #0]
 8004f72:	b103      	cbz	r3, 8004f76 <_close_r+0x1a>
 8004f74:	6023      	str	r3, [r4, #0]
 8004f76:	bd38      	pop	{r3, r4, r5, pc}
 8004f78:	200007b0 	.word	0x200007b0

08004f7c <_lseek_r>:
 8004f7c:	b538      	push	{r3, r4, r5, lr}
 8004f7e:	4d07      	ldr	r5, [pc, #28]	; (8004f9c <_lseek_r+0x20>)
 8004f80:	4604      	mov	r4, r0
 8004f82:	4608      	mov	r0, r1
 8004f84:	4611      	mov	r1, r2
 8004f86:	2200      	movs	r2, #0
 8004f88:	602a      	str	r2, [r5, #0]
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	f7fd ffaa 	bl	8002ee4 <_lseek>
 8004f90:	1c43      	adds	r3, r0, #1
 8004f92:	d102      	bne.n	8004f9a <_lseek_r+0x1e>
 8004f94:	682b      	ldr	r3, [r5, #0]
 8004f96:	b103      	cbz	r3, 8004f9a <_lseek_r+0x1e>
 8004f98:	6023      	str	r3, [r4, #0]
 8004f9a:	bd38      	pop	{r3, r4, r5, pc}
 8004f9c:	200007b0 	.word	0x200007b0

08004fa0 <_read_r>:
 8004fa0:	b538      	push	{r3, r4, r5, lr}
 8004fa2:	4d07      	ldr	r5, [pc, #28]	; (8004fc0 <_read_r+0x20>)
 8004fa4:	4604      	mov	r4, r0
 8004fa6:	4608      	mov	r0, r1
 8004fa8:	4611      	mov	r1, r2
 8004faa:	2200      	movs	r2, #0
 8004fac:	602a      	str	r2, [r5, #0]
 8004fae:	461a      	mov	r2, r3
 8004fb0:	f7fd ff54 	bl	8002e5c <_read>
 8004fb4:	1c43      	adds	r3, r0, #1
 8004fb6:	d102      	bne.n	8004fbe <_read_r+0x1e>
 8004fb8:	682b      	ldr	r3, [r5, #0]
 8004fba:	b103      	cbz	r3, 8004fbe <_read_r+0x1e>
 8004fbc:	6023      	str	r3, [r4, #0]
 8004fbe:	bd38      	pop	{r3, r4, r5, pc}
 8004fc0:	200007b0 	.word	0x200007b0

08004fc4 <_write_r>:
 8004fc4:	b538      	push	{r3, r4, r5, lr}
 8004fc6:	4d07      	ldr	r5, [pc, #28]	; (8004fe4 <_write_r+0x20>)
 8004fc8:	4604      	mov	r4, r0
 8004fca:	4608      	mov	r0, r1
 8004fcc:	4611      	mov	r1, r2
 8004fce:	2200      	movs	r2, #0
 8004fd0:	602a      	str	r2, [r5, #0]
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	f7fd fbd3 	bl	800277e <_write>
 8004fd8:	1c43      	adds	r3, r0, #1
 8004fda:	d102      	bne.n	8004fe2 <_write_r+0x1e>
 8004fdc:	682b      	ldr	r3, [r5, #0]
 8004fde:	b103      	cbz	r3, 8004fe2 <_write_r+0x1e>
 8004fe0:	6023      	str	r3, [r4, #0]
 8004fe2:	bd38      	pop	{r3, r4, r5, pc}
 8004fe4:	200007b0 	.word	0x200007b0

08004fe8 <__errno>:
 8004fe8:	4b01      	ldr	r3, [pc, #4]	; (8004ff0 <__errno+0x8>)
 8004fea:	6818      	ldr	r0, [r3, #0]
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	20000068 	.word	0x20000068

08004ff4 <__libc_init_array>:
 8004ff4:	b570      	push	{r4, r5, r6, lr}
 8004ff6:	4d0d      	ldr	r5, [pc, #52]	; (800502c <__libc_init_array+0x38>)
 8004ff8:	4c0d      	ldr	r4, [pc, #52]	; (8005030 <__libc_init_array+0x3c>)
 8004ffa:	1b64      	subs	r4, r4, r5
 8004ffc:	10a4      	asrs	r4, r4, #2
 8004ffe:	2600      	movs	r6, #0
 8005000:	42a6      	cmp	r6, r4
 8005002:	d109      	bne.n	8005018 <__libc_init_array+0x24>
 8005004:	4d0b      	ldr	r5, [pc, #44]	; (8005034 <__libc_init_array+0x40>)
 8005006:	4c0c      	ldr	r4, [pc, #48]	; (8005038 <__libc_init_array+0x44>)
 8005008:	f002 fbc4 	bl	8007794 <_init>
 800500c:	1b64      	subs	r4, r4, r5
 800500e:	10a4      	asrs	r4, r4, #2
 8005010:	2600      	movs	r6, #0
 8005012:	42a6      	cmp	r6, r4
 8005014:	d105      	bne.n	8005022 <__libc_init_array+0x2e>
 8005016:	bd70      	pop	{r4, r5, r6, pc}
 8005018:	f855 3b04 	ldr.w	r3, [r5], #4
 800501c:	4798      	blx	r3
 800501e:	3601      	adds	r6, #1
 8005020:	e7ee      	b.n	8005000 <__libc_init_array+0xc>
 8005022:	f855 3b04 	ldr.w	r3, [r5], #4
 8005026:	4798      	blx	r3
 8005028:	3601      	adds	r6, #1
 800502a:	e7f2      	b.n	8005012 <__libc_init_array+0x1e>
 800502c:	08007fd4 	.word	0x08007fd4
 8005030:	08007fd4 	.word	0x08007fd4
 8005034:	08007fd4 	.word	0x08007fd4
 8005038:	08007fd8 	.word	0x08007fd8

0800503c <__retarget_lock_init_recursive>:
 800503c:	4770      	bx	lr

0800503e <__retarget_lock_acquire_recursive>:
 800503e:	4770      	bx	lr

08005040 <__retarget_lock_release_recursive>:
 8005040:	4770      	bx	lr

08005042 <quorem>:
 8005042:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005046:	6903      	ldr	r3, [r0, #16]
 8005048:	690c      	ldr	r4, [r1, #16]
 800504a:	42a3      	cmp	r3, r4
 800504c:	4607      	mov	r7, r0
 800504e:	db7e      	blt.n	800514e <quorem+0x10c>
 8005050:	3c01      	subs	r4, #1
 8005052:	f101 0814 	add.w	r8, r1, #20
 8005056:	f100 0514 	add.w	r5, r0, #20
 800505a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800505e:	9301      	str	r3, [sp, #4]
 8005060:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005064:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005068:	3301      	adds	r3, #1
 800506a:	429a      	cmp	r2, r3
 800506c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005070:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005074:	fbb2 f6f3 	udiv	r6, r2, r3
 8005078:	d331      	bcc.n	80050de <quorem+0x9c>
 800507a:	f04f 0e00 	mov.w	lr, #0
 800507e:	4640      	mov	r0, r8
 8005080:	46ac      	mov	ip, r5
 8005082:	46f2      	mov	sl, lr
 8005084:	f850 2b04 	ldr.w	r2, [r0], #4
 8005088:	b293      	uxth	r3, r2
 800508a:	fb06 e303 	mla	r3, r6, r3, lr
 800508e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005092:	0c1a      	lsrs	r2, r3, #16
 8005094:	b29b      	uxth	r3, r3
 8005096:	ebaa 0303 	sub.w	r3, sl, r3
 800509a:	f8dc a000 	ldr.w	sl, [ip]
 800509e:	fa13 f38a 	uxtah	r3, r3, sl
 80050a2:	fb06 220e 	mla	r2, r6, lr, r2
 80050a6:	9300      	str	r3, [sp, #0]
 80050a8:	9b00      	ldr	r3, [sp, #0]
 80050aa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80050ae:	b292      	uxth	r2, r2
 80050b0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80050b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80050b8:	f8bd 3000 	ldrh.w	r3, [sp]
 80050bc:	4581      	cmp	r9, r0
 80050be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80050c2:	f84c 3b04 	str.w	r3, [ip], #4
 80050c6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80050ca:	d2db      	bcs.n	8005084 <quorem+0x42>
 80050cc:	f855 300b 	ldr.w	r3, [r5, fp]
 80050d0:	b92b      	cbnz	r3, 80050de <quorem+0x9c>
 80050d2:	9b01      	ldr	r3, [sp, #4]
 80050d4:	3b04      	subs	r3, #4
 80050d6:	429d      	cmp	r5, r3
 80050d8:	461a      	mov	r2, r3
 80050da:	d32c      	bcc.n	8005136 <quorem+0xf4>
 80050dc:	613c      	str	r4, [r7, #16]
 80050de:	4638      	mov	r0, r7
 80050e0:	f001 f9a8 	bl	8006434 <__mcmp>
 80050e4:	2800      	cmp	r0, #0
 80050e6:	db22      	blt.n	800512e <quorem+0xec>
 80050e8:	3601      	adds	r6, #1
 80050ea:	4629      	mov	r1, r5
 80050ec:	2000      	movs	r0, #0
 80050ee:	f858 2b04 	ldr.w	r2, [r8], #4
 80050f2:	f8d1 c000 	ldr.w	ip, [r1]
 80050f6:	b293      	uxth	r3, r2
 80050f8:	1ac3      	subs	r3, r0, r3
 80050fa:	0c12      	lsrs	r2, r2, #16
 80050fc:	fa13 f38c 	uxtah	r3, r3, ip
 8005100:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005104:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005108:	b29b      	uxth	r3, r3
 800510a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800510e:	45c1      	cmp	r9, r8
 8005110:	f841 3b04 	str.w	r3, [r1], #4
 8005114:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005118:	d2e9      	bcs.n	80050ee <quorem+0xac>
 800511a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800511e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005122:	b922      	cbnz	r2, 800512e <quorem+0xec>
 8005124:	3b04      	subs	r3, #4
 8005126:	429d      	cmp	r5, r3
 8005128:	461a      	mov	r2, r3
 800512a:	d30a      	bcc.n	8005142 <quorem+0x100>
 800512c:	613c      	str	r4, [r7, #16]
 800512e:	4630      	mov	r0, r6
 8005130:	b003      	add	sp, #12
 8005132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005136:	6812      	ldr	r2, [r2, #0]
 8005138:	3b04      	subs	r3, #4
 800513a:	2a00      	cmp	r2, #0
 800513c:	d1ce      	bne.n	80050dc <quorem+0x9a>
 800513e:	3c01      	subs	r4, #1
 8005140:	e7c9      	b.n	80050d6 <quorem+0x94>
 8005142:	6812      	ldr	r2, [r2, #0]
 8005144:	3b04      	subs	r3, #4
 8005146:	2a00      	cmp	r2, #0
 8005148:	d1f0      	bne.n	800512c <quorem+0xea>
 800514a:	3c01      	subs	r4, #1
 800514c:	e7eb      	b.n	8005126 <quorem+0xe4>
 800514e:	2000      	movs	r0, #0
 8005150:	e7ee      	b.n	8005130 <quorem+0xee>
 8005152:	0000      	movs	r0, r0
 8005154:	0000      	movs	r0, r0
	...

08005158 <_dtoa_r>:
 8005158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800515c:	ed2d 8b04 	vpush	{d8-d9}
 8005160:	69c5      	ldr	r5, [r0, #28]
 8005162:	b093      	sub	sp, #76	; 0x4c
 8005164:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005168:	ec57 6b10 	vmov	r6, r7, d0
 800516c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005170:	9107      	str	r1, [sp, #28]
 8005172:	4604      	mov	r4, r0
 8005174:	920a      	str	r2, [sp, #40]	; 0x28
 8005176:	930d      	str	r3, [sp, #52]	; 0x34
 8005178:	b975      	cbnz	r5, 8005198 <_dtoa_r+0x40>
 800517a:	2010      	movs	r0, #16
 800517c:	f000 fe2a 	bl	8005dd4 <malloc>
 8005180:	4602      	mov	r2, r0
 8005182:	61e0      	str	r0, [r4, #28]
 8005184:	b920      	cbnz	r0, 8005190 <_dtoa_r+0x38>
 8005186:	4bae      	ldr	r3, [pc, #696]	; (8005440 <_dtoa_r+0x2e8>)
 8005188:	21ef      	movs	r1, #239	; 0xef
 800518a:	48ae      	ldr	r0, [pc, #696]	; (8005444 <_dtoa_r+0x2ec>)
 800518c:	f001 fe58 	bl	8006e40 <__assert_func>
 8005190:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005194:	6005      	str	r5, [r0, #0]
 8005196:	60c5      	str	r5, [r0, #12]
 8005198:	69e3      	ldr	r3, [r4, #28]
 800519a:	6819      	ldr	r1, [r3, #0]
 800519c:	b151      	cbz	r1, 80051b4 <_dtoa_r+0x5c>
 800519e:	685a      	ldr	r2, [r3, #4]
 80051a0:	604a      	str	r2, [r1, #4]
 80051a2:	2301      	movs	r3, #1
 80051a4:	4093      	lsls	r3, r2
 80051a6:	608b      	str	r3, [r1, #8]
 80051a8:	4620      	mov	r0, r4
 80051aa:	f000 ff07 	bl	8005fbc <_Bfree>
 80051ae:	69e3      	ldr	r3, [r4, #28]
 80051b0:	2200      	movs	r2, #0
 80051b2:	601a      	str	r2, [r3, #0]
 80051b4:	1e3b      	subs	r3, r7, #0
 80051b6:	bfbb      	ittet	lt
 80051b8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80051bc:	9303      	strlt	r3, [sp, #12]
 80051be:	2300      	movge	r3, #0
 80051c0:	2201      	movlt	r2, #1
 80051c2:	bfac      	ite	ge
 80051c4:	f8c8 3000 	strge.w	r3, [r8]
 80051c8:	f8c8 2000 	strlt.w	r2, [r8]
 80051cc:	4b9e      	ldr	r3, [pc, #632]	; (8005448 <_dtoa_r+0x2f0>)
 80051ce:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80051d2:	ea33 0308 	bics.w	r3, r3, r8
 80051d6:	d11b      	bne.n	8005210 <_dtoa_r+0xb8>
 80051d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80051da:	f242 730f 	movw	r3, #9999	; 0x270f
 80051de:	6013      	str	r3, [r2, #0]
 80051e0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80051e4:	4333      	orrs	r3, r6
 80051e6:	f000 8593 	beq.w	8005d10 <_dtoa_r+0xbb8>
 80051ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80051ec:	b963      	cbnz	r3, 8005208 <_dtoa_r+0xb0>
 80051ee:	4b97      	ldr	r3, [pc, #604]	; (800544c <_dtoa_r+0x2f4>)
 80051f0:	e027      	b.n	8005242 <_dtoa_r+0xea>
 80051f2:	4b97      	ldr	r3, [pc, #604]	; (8005450 <_dtoa_r+0x2f8>)
 80051f4:	9300      	str	r3, [sp, #0]
 80051f6:	3308      	adds	r3, #8
 80051f8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80051fa:	6013      	str	r3, [r2, #0]
 80051fc:	9800      	ldr	r0, [sp, #0]
 80051fe:	b013      	add	sp, #76	; 0x4c
 8005200:	ecbd 8b04 	vpop	{d8-d9}
 8005204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005208:	4b90      	ldr	r3, [pc, #576]	; (800544c <_dtoa_r+0x2f4>)
 800520a:	9300      	str	r3, [sp, #0]
 800520c:	3303      	adds	r3, #3
 800520e:	e7f3      	b.n	80051f8 <_dtoa_r+0xa0>
 8005210:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005214:	2200      	movs	r2, #0
 8005216:	ec51 0b17 	vmov	r0, r1, d7
 800521a:	eeb0 8a47 	vmov.f32	s16, s14
 800521e:	eef0 8a67 	vmov.f32	s17, s15
 8005222:	2300      	movs	r3, #0
 8005224:	f7fb fc58 	bl	8000ad8 <__aeabi_dcmpeq>
 8005228:	4681      	mov	r9, r0
 800522a:	b160      	cbz	r0, 8005246 <_dtoa_r+0xee>
 800522c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800522e:	2301      	movs	r3, #1
 8005230:	6013      	str	r3, [r2, #0]
 8005232:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005234:	2b00      	cmp	r3, #0
 8005236:	f000 8568 	beq.w	8005d0a <_dtoa_r+0xbb2>
 800523a:	4b86      	ldr	r3, [pc, #536]	; (8005454 <_dtoa_r+0x2fc>)
 800523c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800523e:	6013      	str	r3, [r2, #0]
 8005240:	3b01      	subs	r3, #1
 8005242:	9300      	str	r3, [sp, #0]
 8005244:	e7da      	b.n	80051fc <_dtoa_r+0xa4>
 8005246:	aa10      	add	r2, sp, #64	; 0x40
 8005248:	a911      	add	r1, sp, #68	; 0x44
 800524a:	4620      	mov	r0, r4
 800524c:	eeb0 0a48 	vmov.f32	s0, s16
 8005250:	eef0 0a68 	vmov.f32	s1, s17
 8005254:	f001 f994 	bl	8006580 <__d2b>
 8005258:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800525c:	4682      	mov	sl, r0
 800525e:	2d00      	cmp	r5, #0
 8005260:	d07f      	beq.n	8005362 <_dtoa_r+0x20a>
 8005262:	ee18 3a90 	vmov	r3, s17
 8005266:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800526a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800526e:	ec51 0b18 	vmov	r0, r1, d8
 8005272:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005276:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800527a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800527e:	4619      	mov	r1, r3
 8005280:	2200      	movs	r2, #0
 8005282:	4b75      	ldr	r3, [pc, #468]	; (8005458 <_dtoa_r+0x300>)
 8005284:	f7fb f808 	bl	8000298 <__aeabi_dsub>
 8005288:	a367      	add	r3, pc, #412	; (adr r3, 8005428 <_dtoa_r+0x2d0>)
 800528a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800528e:	f7fb f9bb 	bl	8000608 <__aeabi_dmul>
 8005292:	a367      	add	r3, pc, #412	; (adr r3, 8005430 <_dtoa_r+0x2d8>)
 8005294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005298:	f7fb f800 	bl	800029c <__adddf3>
 800529c:	4606      	mov	r6, r0
 800529e:	4628      	mov	r0, r5
 80052a0:	460f      	mov	r7, r1
 80052a2:	f7fb f947 	bl	8000534 <__aeabi_i2d>
 80052a6:	a364      	add	r3, pc, #400	; (adr r3, 8005438 <_dtoa_r+0x2e0>)
 80052a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ac:	f7fb f9ac 	bl	8000608 <__aeabi_dmul>
 80052b0:	4602      	mov	r2, r0
 80052b2:	460b      	mov	r3, r1
 80052b4:	4630      	mov	r0, r6
 80052b6:	4639      	mov	r1, r7
 80052b8:	f7fa fff0 	bl	800029c <__adddf3>
 80052bc:	4606      	mov	r6, r0
 80052be:	460f      	mov	r7, r1
 80052c0:	f7fb fc52 	bl	8000b68 <__aeabi_d2iz>
 80052c4:	2200      	movs	r2, #0
 80052c6:	4683      	mov	fp, r0
 80052c8:	2300      	movs	r3, #0
 80052ca:	4630      	mov	r0, r6
 80052cc:	4639      	mov	r1, r7
 80052ce:	f7fb fc0d 	bl	8000aec <__aeabi_dcmplt>
 80052d2:	b148      	cbz	r0, 80052e8 <_dtoa_r+0x190>
 80052d4:	4658      	mov	r0, fp
 80052d6:	f7fb f92d 	bl	8000534 <__aeabi_i2d>
 80052da:	4632      	mov	r2, r6
 80052dc:	463b      	mov	r3, r7
 80052de:	f7fb fbfb 	bl	8000ad8 <__aeabi_dcmpeq>
 80052e2:	b908      	cbnz	r0, 80052e8 <_dtoa_r+0x190>
 80052e4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80052e8:	f1bb 0f16 	cmp.w	fp, #22
 80052ec:	d857      	bhi.n	800539e <_dtoa_r+0x246>
 80052ee:	4b5b      	ldr	r3, [pc, #364]	; (800545c <_dtoa_r+0x304>)
 80052f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80052f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052f8:	ec51 0b18 	vmov	r0, r1, d8
 80052fc:	f7fb fbf6 	bl	8000aec <__aeabi_dcmplt>
 8005300:	2800      	cmp	r0, #0
 8005302:	d04e      	beq.n	80053a2 <_dtoa_r+0x24a>
 8005304:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005308:	2300      	movs	r3, #0
 800530a:	930c      	str	r3, [sp, #48]	; 0x30
 800530c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800530e:	1b5b      	subs	r3, r3, r5
 8005310:	1e5a      	subs	r2, r3, #1
 8005312:	bf45      	ittet	mi
 8005314:	f1c3 0301 	rsbmi	r3, r3, #1
 8005318:	9305      	strmi	r3, [sp, #20]
 800531a:	2300      	movpl	r3, #0
 800531c:	2300      	movmi	r3, #0
 800531e:	9206      	str	r2, [sp, #24]
 8005320:	bf54      	ite	pl
 8005322:	9305      	strpl	r3, [sp, #20]
 8005324:	9306      	strmi	r3, [sp, #24]
 8005326:	f1bb 0f00 	cmp.w	fp, #0
 800532a:	db3c      	blt.n	80053a6 <_dtoa_r+0x24e>
 800532c:	9b06      	ldr	r3, [sp, #24]
 800532e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8005332:	445b      	add	r3, fp
 8005334:	9306      	str	r3, [sp, #24]
 8005336:	2300      	movs	r3, #0
 8005338:	9308      	str	r3, [sp, #32]
 800533a:	9b07      	ldr	r3, [sp, #28]
 800533c:	2b09      	cmp	r3, #9
 800533e:	d868      	bhi.n	8005412 <_dtoa_r+0x2ba>
 8005340:	2b05      	cmp	r3, #5
 8005342:	bfc4      	itt	gt
 8005344:	3b04      	subgt	r3, #4
 8005346:	9307      	strgt	r3, [sp, #28]
 8005348:	9b07      	ldr	r3, [sp, #28]
 800534a:	f1a3 0302 	sub.w	r3, r3, #2
 800534e:	bfcc      	ite	gt
 8005350:	2500      	movgt	r5, #0
 8005352:	2501      	movle	r5, #1
 8005354:	2b03      	cmp	r3, #3
 8005356:	f200 8085 	bhi.w	8005464 <_dtoa_r+0x30c>
 800535a:	e8df f003 	tbb	[pc, r3]
 800535e:	3b2e      	.short	0x3b2e
 8005360:	5839      	.short	0x5839
 8005362:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005366:	441d      	add	r5, r3
 8005368:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800536c:	2b20      	cmp	r3, #32
 800536e:	bfc1      	itttt	gt
 8005370:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005374:	fa08 f803 	lslgt.w	r8, r8, r3
 8005378:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800537c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005380:	bfd6      	itet	le
 8005382:	f1c3 0320 	rsble	r3, r3, #32
 8005386:	ea48 0003 	orrgt.w	r0, r8, r3
 800538a:	fa06 f003 	lslle.w	r0, r6, r3
 800538e:	f7fb f8c1 	bl	8000514 <__aeabi_ui2d>
 8005392:	2201      	movs	r2, #1
 8005394:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005398:	3d01      	subs	r5, #1
 800539a:	920e      	str	r2, [sp, #56]	; 0x38
 800539c:	e76f      	b.n	800527e <_dtoa_r+0x126>
 800539e:	2301      	movs	r3, #1
 80053a0:	e7b3      	b.n	800530a <_dtoa_r+0x1b2>
 80053a2:	900c      	str	r0, [sp, #48]	; 0x30
 80053a4:	e7b2      	b.n	800530c <_dtoa_r+0x1b4>
 80053a6:	9b05      	ldr	r3, [sp, #20]
 80053a8:	eba3 030b 	sub.w	r3, r3, fp
 80053ac:	9305      	str	r3, [sp, #20]
 80053ae:	f1cb 0300 	rsb	r3, fp, #0
 80053b2:	9308      	str	r3, [sp, #32]
 80053b4:	2300      	movs	r3, #0
 80053b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80053b8:	e7bf      	b.n	800533a <_dtoa_r+0x1e2>
 80053ba:	2300      	movs	r3, #0
 80053bc:	9309      	str	r3, [sp, #36]	; 0x24
 80053be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	dc52      	bgt.n	800546a <_dtoa_r+0x312>
 80053c4:	2301      	movs	r3, #1
 80053c6:	9301      	str	r3, [sp, #4]
 80053c8:	9304      	str	r3, [sp, #16]
 80053ca:	461a      	mov	r2, r3
 80053cc:	920a      	str	r2, [sp, #40]	; 0x28
 80053ce:	e00b      	b.n	80053e8 <_dtoa_r+0x290>
 80053d0:	2301      	movs	r3, #1
 80053d2:	e7f3      	b.n	80053bc <_dtoa_r+0x264>
 80053d4:	2300      	movs	r3, #0
 80053d6:	9309      	str	r3, [sp, #36]	; 0x24
 80053d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053da:	445b      	add	r3, fp
 80053dc:	9301      	str	r3, [sp, #4]
 80053de:	3301      	adds	r3, #1
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	9304      	str	r3, [sp, #16]
 80053e4:	bfb8      	it	lt
 80053e6:	2301      	movlt	r3, #1
 80053e8:	69e0      	ldr	r0, [r4, #28]
 80053ea:	2100      	movs	r1, #0
 80053ec:	2204      	movs	r2, #4
 80053ee:	f102 0614 	add.w	r6, r2, #20
 80053f2:	429e      	cmp	r6, r3
 80053f4:	d93d      	bls.n	8005472 <_dtoa_r+0x31a>
 80053f6:	6041      	str	r1, [r0, #4]
 80053f8:	4620      	mov	r0, r4
 80053fa:	f000 fd9f 	bl	8005f3c <_Balloc>
 80053fe:	9000      	str	r0, [sp, #0]
 8005400:	2800      	cmp	r0, #0
 8005402:	d139      	bne.n	8005478 <_dtoa_r+0x320>
 8005404:	4b16      	ldr	r3, [pc, #88]	; (8005460 <_dtoa_r+0x308>)
 8005406:	4602      	mov	r2, r0
 8005408:	f240 11af 	movw	r1, #431	; 0x1af
 800540c:	e6bd      	b.n	800518a <_dtoa_r+0x32>
 800540e:	2301      	movs	r3, #1
 8005410:	e7e1      	b.n	80053d6 <_dtoa_r+0x27e>
 8005412:	2501      	movs	r5, #1
 8005414:	2300      	movs	r3, #0
 8005416:	9307      	str	r3, [sp, #28]
 8005418:	9509      	str	r5, [sp, #36]	; 0x24
 800541a:	f04f 33ff 	mov.w	r3, #4294967295
 800541e:	9301      	str	r3, [sp, #4]
 8005420:	9304      	str	r3, [sp, #16]
 8005422:	2200      	movs	r2, #0
 8005424:	2312      	movs	r3, #18
 8005426:	e7d1      	b.n	80053cc <_dtoa_r+0x274>
 8005428:	636f4361 	.word	0x636f4361
 800542c:	3fd287a7 	.word	0x3fd287a7
 8005430:	8b60c8b3 	.word	0x8b60c8b3
 8005434:	3fc68a28 	.word	0x3fc68a28
 8005438:	509f79fb 	.word	0x509f79fb
 800543c:	3fd34413 	.word	0x3fd34413
 8005440:	08007c81 	.word	0x08007c81
 8005444:	08007c98 	.word	0x08007c98
 8005448:	7ff00000 	.word	0x7ff00000
 800544c:	08007c7d 	.word	0x08007c7d
 8005450:	08007c74 	.word	0x08007c74
 8005454:	08007c51 	.word	0x08007c51
 8005458:	3ff80000 	.word	0x3ff80000
 800545c:	08007d88 	.word	0x08007d88
 8005460:	08007cf0 	.word	0x08007cf0
 8005464:	2301      	movs	r3, #1
 8005466:	9309      	str	r3, [sp, #36]	; 0x24
 8005468:	e7d7      	b.n	800541a <_dtoa_r+0x2c2>
 800546a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800546c:	9301      	str	r3, [sp, #4]
 800546e:	9304      	str	r3, [sp, #16]
 8005470:	e7ba      	b.n	80053e8 <_dtoa_r+0x290>
 8005472:	3101      	adds	r1, #1
 8005474:	0052      	lsls	r2, r2, #1
 8005476:	e7ba      	b.n	80053ee <_dtoa_r+0x296>
 8005478:	69e3      	ldr	r3, [r4, #28]
 800547a:	9a00      	ldr	r2, [sp, #0]
 800547c:	601a      	str	r2, [r3, #0]
 800547e:	9b04      	ldr	r3, [sp, #16]
 8005480:	2b0e      	cmp	r3, #14
 8005482:	f200 80a8 	bhi.w	80055d6 <_dtoa_r+0x47e>
 8005486:	2d00      	cmp	r5, #0
 8005488:	f000 80a5 	beq.w	80055d6 <_dtoa_r+0x47e>
 800548c:	f1bb 0f00 	cmp.w	fp, #0
 8005490:	dd38      	ble.n	8005504 <_dtoa_r+0x3ac>
 8005492:	4bc0      	ldr	r3, [pc, #768]	; (8005794 <_dtoa_r+0x63c>)
 8005494:	f00b 020f 	and.w	r2, fp, #15
 8005498:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800549c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80054a0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80054a4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80054a8:	d019      	beq.n	80054de <_dtoa_r+0x386>
 80054aa:	4bbb      	ldr	r3, [pc, #748]	; (8005798 <_dtoa_r+0x640>)
 80054ac:	ec51 0b18 	vmov	r0, r1, d8
 80054b0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80054b4:	f7fb f9d2 	bl	800085c <__aeabi_ddiv>
 80054b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054bc:	f008 080f 	and.w	r8, r8, #15
 80054c0:	2503      	movs	r5, #3
 80054c2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8005798 <_dtoa_r+0x640>
 80054c6:	f1b8 0f00 	cmp.w	r8, #0
 80054ca:	d10a      	bne.n	80054e2 <_dtoa_r+0x38a>
 80054cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054d0:	4632      	mov	r2, r6
 80054d2:	463b      	mov	r3, r7
 80054d4:	f7fb f9c2 	bl	800085c <__aeabi_ddiv>
 80054d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054dc:	e02b      	b.n	8005536 <_dtoa_r+0x3de>
 80054de:	2502      	movs	r5, #2
 80054e0:	e7ef      	b.n	80054c2 <_dtoa_r+0x36a>
 80054e2:	f018 0f01 	tst.w	r8, #1
 80054e6:	d008      	beq.n	80054fa <_dtoa_r+0x3a2>
 80054e8:	4630      	mov	r0, r6
 80054ea:	4639      	mov	r1, r7
 80054ec:	e9d9 2300 	ldrd	r2, r3, [r9]
 80054f0:	f7fb f88a 	bl	8000608 <__aeabi_dmul>
 80054f4:	3501      	adds	r5, #1
 80054f6:	4606      	mov	r6, r0
 80054f8:	460f      	mov	r7, r1
 80054fa:	ea4f 0868 	mov.w	r8, r8, asr #1
 80054fe:	f109 0908 	add.w	r9, r9, #8
 8005502:	e7e0      	b.n	80054c6 <_dtoa_r+0x36e>
 8005504:	f000 809f 	beq.w	8005646 <_dtoa_r+0x4ee>
 8005508:	f1cb 0600 	rsb	r6, fp, #0
 800550c:	4ba1      	ldr	r3, [pc, #644]	; (8005794 <_dtoa_r+0x63c>)
 800550e:	4fa2      	ldr	r7, [pc, #648]	; (8005798 <_dtoa_r+0x640>)
 8005510:	f006 020f 	and.w	r2, r6, #15
 8005514:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800551c:	ec51 0b18 	vmov	r0, r1, d8
 8005520:	f7fb f872 	bl	8000608 <__aeabi_dmul>
 8005524:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005528:	1136      	asrs	r6, r6, #4
 800552a:	2300      	movs	r3, #0
 800552c:	2502      	movs	r5, #2
 800552e:	2e00      	cmp	r6, #0
 8005530:	d17e      	bne.n	8005630 <_dtoa_r+0x4d8>
 8005532:	2b00      	cmp	r3, #0
 8005534:	d1d0      	bne.n	80054d8 <_dtoa_r+0x380>
 8005536:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005538:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800553c:	2b00      	cmp	r3, #0
 800553e:	f000 8084 	beq.w	800564a <_dtoa_r+0x4f2>
 8005542:	4b96      	ldr	r3, [pc, #600]	; (800579c <_dtoa_r+0x644>)
 8005544:	2200      	movs	r2, #0
 8005546:	4640      	mov	r0, r8
 8005548:	4649      	mov	r1, r9
 800554a:	f7fb facf 	bl	8000aec <__aeabi_dcmplt>
 800554e:	2800      	cmp	r0, #0
 8005550:	d07b      	beq.n	800564a <_dtoa_r+0x4f2>
 8005552:	9b04      	ldr	r3, [sp, #16]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d078      	beq.n	800564a <_dtoa_r+0x4f2>
 8005558:	9b01      	ldr	r3, [sp, #4]
 800555a:	2b00      	cmp	r3, #0
 800555c:	dd39      	ble.n	80055d2 <_dtoa_r+0x47a>
 800555e:	4b90      	ldr	r3, [pc, #576]	; (80057a0 <_dtoa_r+0x648>)
 8005560:	2200      	movs	r2, #0
 8005562:	4640      	mov	r0, r8
 8005564:	4649      	mov	r1, r9
 8005566:	f7fb f84f 	bl	8000608 <__aeabi_dmul>
 800556a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800556e:	9e01      	ldr	r6, [sp, #4]
 8005570:	f10b 37ff 	add.w	r7, fp, #4294967295
 8005574:	3501      	adds	r5, #1
 8005576:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800557a:	4628      	mov	r0, r5
 800557c:	f7fa ffda 	bl	8000534 <__aeabi_i2d>
 8005580:	4642      	mov	r2, r8
 8005582:	464b      	mov	r3, r9
 8005584:	f7fb f840 	bl	8000608 <__aeabi_dmul>
 8005588:	4b86      	ldr	r3, [pc, #536]	; (80057a4 <_dtoa_r+0x64c>)
 800558a:	2200      	movs	r2, #0
 800558c:	f7fa fe86 	bl	800029c <__adddf3>
 8005590:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005594:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005598:	9303      	str	r3, [sp, #12]
 800559a:	2e00      	cmp	r6, #0
 800559c:	d158      	bne.n	8005650 <_dtoa_r+0x4f8>
 800559e:	4b82      	ldr	r3, [pc, #520]	; (80057a8 <_dtoa_r+0x650>)
 80055a0:	2200      	movs	r2, #0
 80055a2:	4640      	mov	r0, r8
 80055a4:	4649      	mov	r1, r9
 80055a6:	f7fa fe77 	bl	8000298 <__aeabi_dsub>
 80055aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80055ae:	4680      	mov	r8, r0
 80055b0:	4689      	mov	r9, r1
 80055b2:	f7fb fab9 	bl	8000b28 <__aeabi_dcmpgt>
 80055b6:	2800      	cmp	r0, #0
 80055b8:	f040 8296 	bne.w	8005ae8 <_dtoa_r+0x990>
 80055bc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80055c0:	4640      	mov	r0, r8
 80055c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80055c6:	4649      	mov	r1, r9
 80055c8:	f7fb fa90 	bl	8000aec <__aeabi_dcmplt>
 80055cc:	2800      	cmp	r0, #0
 80055ce:	f040 8289 	bne.w	8005ae4 <_dtoa_r+0x98c>
 80055d2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80055d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80055d8:	2b00      	cmp	r3, #0
 80055da:	f2c0 814e 	blt.w	800587a <_dtoa_r+0x722>
 80055de:	f1bb 0f0e 	cmp.w	fp, #14
 80055e2:	f300 814a 	bgt.w	800587a <_dtoa_r+0x722>
 80055e6:	4b6b      	ldr	r3, [pc, #428]	; (8005794 <_dtoa_r+0x63c>)
 80055e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80055ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80055f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	f280 80dc 	bge.w	80057b0 <_dtoa_r+0x658>
 80055f8:	9b04      	ldr	r3, [sp, #16]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	f300 80d8 	bgt.w	80057b0 <_dtoa_r+0x658>
 8005600:	f040 826f 	bne.w	8005ae2 <_dtoa_r+0x98a>
 8005604:	4b68      	ldr	r3, [pc, #416]	; (80057a8 <_dtoa_r+0x650>)
 8005606:	2200      	movs	r2, #0
 8005608:	4640      	mov	r0, r8
 800560a:	4649      	mov	r1, r9
 800560c:	f7fa fffc 	bl	8000608 <__aeabi_dmul>
 8005610:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005614:	f7fb fa7e 	bl	8000b14 <__aeabi_dcmpge>
 8005618:	9e04      	ldr	r6, [sp, #16]
 800561a:	4637      	mov	r7, r6
 800561c:	2800      	cmp	r0, #0
 800561e:	f040 8245 	bne.w	8005aac <_dtoa_r+0x954>
 8005622:	9d00      	ldr	r5, [sp, #0]
 8005624:	2331      	movs	r3, #49	; 0x31
 8005626:	f805 3b01 	strb.w	r3, [r5], #1
 800562a:	f10b 0b01 	add.w	fp, fp, #1
 800562e:	e241      	b.n	8005ab4 <_dtoa_r+0x95c>
 8005630:	07f2      	lsls	r2, r6, #31
 8005632:	d505      	bpl.n	8005640 <_dtoa_r+0x4e8>
 8005634:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005638:	f7fa ffe6 	bl	8000608 <__aeabi_dmul>
 800563c:	3501      	adds	r5, #1
 800563e:	2301      	movs	r3, #1
 8005640:	1076      	asrs	r6, r6, #1
 8005642:	3708      	adds	r7, #8
 8005644:	e773      	b.n	800552e <_dtoa_r+0x3d6>
 8005646:	2502      	movs	r5, #2
 8005648:	e775      	b.n	8005536 <_dtoa_r+0x3de>
 800564a:	9e04      	ldr	r6, [sp, #16]
 800564c:	465f      	mov	r7, fp
 800564e:	e792      	b.n	8005576 <_dtoa_r+0x41e>
 8005650:	9900      	ldr	r1, [sp, #0]
 8005652:	4b50      	ldr	r3, [pc, #320]	; (8005794 <_dtoa_r+0x63c>)
 8005654:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005658:	4431      	add	r1, r6
 800565a:	9102      	str	r1, [sp, #8]
 800565c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800565e:	eeb0 9a47 	vmov.f32	s18, s14
 8005662:	eef0 9a67 	vmov.f32	s19, s15
 8005666:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800566a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800566e:	2900      	cmp	r1, #0
 8005670:	d044      	beq.n	80056fc <_dtoa_r+0x5a4>
 8005672:	494e      	ldr	r1, [pc, #312]	; (80057ac <_dtoa_r+0x654>)
 8005674:	2000      	movs	r0, #0
 8005676:	f7fb f8f1 	bl	800085c <__aeabi_ddiv>
 800567a:	ec53 2b19 	vmov	r2, r3, d9
 800567e:	f7fa fe0b 	bl	8000298 <__aeabi_dsub>
 8005682:	9d00      	ldr	r5, [sp, #0]
 8005684:	ec41 0b19 	vmov	d9, r0, r1
 8005688:	4649      	mov	r1, r9
 800568a:	4640      	mov	r0, r8
 800568c:	f7fb fa6c 	bl	8000b68 <__aeabi_d2iz>
 8005690:	4606      	mov	r6, r0
 8005692:	f7fa ff4f 	bl	8000534 <__aeabi_i2d>
 8005696:	4602      	mov	r2, r0
 8005698:	460b      	mov	r3, r1
 800569a:	4640      	mov	r0, r8
 800569c:	4649      	mov	r1, r9
 800569e:	f7fa fdfb 	bl	8000298 <__aeabi_dsub>
 80056a2:	3630      	adds	r6, #48	; 0x30
 80056a4:	f805 6b01 	strb.w	r6, [r5], #1
 80056a8:	ec53 2b19 	vmov	r2, r3, d9
 80056ac:	4680      	mov	r8, r0
 80056ae:	4689      	mov	r9, r1
 80056b0:	f7fb fa1c 	bl	8000aec <__aeabi_dcmplt>
 80056b4:	2800      	cmp	r0, #0
 80056b6:	d164      	bne.n	8005782 <_dtoa_r+0x62a>
 80056b8:	4642      	mov	r2, r8
 80056ba:	464b      	mov	r3, r9
 80056bc:	4937      	ldr	r1, [pc, #220]	; (800579c <_dtoa_r+0x644>)
 80056be:	2000      	movs	r0, #0
 80056c0:	f7fa fdea 	bl	8000298 <__aeabi_dsub>
 80056c4:	ec53 2b19 	vmov	r2, r3, d9
 80056c8:	f7fb fa10 	bl	8000aec <__aeabi_dcmplt>
 80056cc:	2800      	cmp	r0, #0
 80056ce:	f040 80b6 	bne.w	800583e <_dtoa_r+0x6e6>
 80056d2:	9b02      	ldr	r3, [sp, #8]
 80056d4:	429d      	cmp	r5, r3
 80056d6:	f43f af7c 	beq.w	80055d2 <_dtoa_r+0x47a>
 80056da:	4b31      	ldr	r3, [pc, #196]	; (80057a0 <_dtoa_r+0x648>)
 80056dc:	ec51 0b19 	vmov	r0, r1, d9
 80056e0:	2200      	movs	r2, #0
 80056e2:	f7fa ff91 	bl	8000608 <__aeabi_dmul>
 80056e6:	4b2e      	ldr	r3, [pc, #184]	; (80057a0 <_dtoa_r+0x648>)
 80056e8:	ec41 0b19 	vmov	d9, r0, r1
 80056ec:	2200      	movs	r2, #0
 80056ee:	4640      	mov	r0, r8
 80056f0:	4649      	mov	r1, r9
 80056f2:	f7fa ff89 	bl	8000608 <__aeabi_dmul>
 80056f6:	4680      	mov	r8, r0
 80056f8:	4689      	mov	r9, r1
 80056fa:	e7c5      	b.n	8005688 <_dtoa_r+0x530>
 80056fc:	ec51 0b17 	vmov	r0, r1, d7
 8005700:	f7fa ff82 	bl	8000608 <__aeabi_dmul>
 8005704:	9b02      	ldr	r3, [sp, #8]
 8005706:	9d00      	ldr	r5, [sp, #0]
 8005708:	930f      	str	r3, [sp, #60]	; 0x3c
 800570a:	ec41 0b19 	vmov	d9, r0, r1
 800570e:	4649      	mov	r1, r9
 8005710:	4640      	mov	r0, r8
 8005712:	f7fb fa29 	bl	8000b68 <__aeabi_d2iz>
 8005716:	4606      	mov	r6, r0
 8005718:	f7fa ff0c 	bl	8000534 <__aeabi_i2d>
 800571c:	3630      	adds	r6, #48	; 0x30
 800571e:	4602      	mov	r2, r0
 8005720:	460b      	mov	r3, r1
 8005722:	4640      	mov	r0, r8
 8005724:	4649      	mov	r1, r9
 8005726:	f7fa fdb7 	bl	8000298 <__aeabi_dsub>
 800572a:	f805 6b01 	strb.w	r6, [r5], #1
 800572e:	9b02      	ldr	r3, [sp, #8]
 8005730:	429d      	cmp	r5, r3
 8005732:	4680      	mov	r8, r0
 8005734:	4689      	mov	r9, r1
 8005736:	f04f 0200 	mov.w	r2, #0
 800573a:	d124      	bne.n	8005786 <_dtoa_r+0x62e>
 800573c:	4b1b      	ldr	r3, [pc, #108]	; (80057ac <_dtoa_r+0x654>)
 800573e:	ec51 0b19 	vmov	r0, r1, d9
 8005742:	f7fa fdab 	bl	800029c <__adddf3>
 8005746:	4602      	mov	r2, r0
 8005748:	460b      	mov	r3, r1
 800574a:	4640      	mov	r0, r8
 800574c:	4649      	mov	r1, r9
 800574e:	f7fb f9eb 	bl	8000b28 <__aeabi_dcmpgt>
 8005752:	2800      	cmp	r0, #0
 8005754:	d173      	bne.n	800583e <_dtoa_r+0x6e6>
 8005756:	ec53 2b19 	vmov	r2, r3, d9
 800575a:	4914      	ldr	r1, [pc, #80]	; (80057ac <_dtoa_r+0x654>)
 800575c:	2000      	movs	r0, #0
 800575e:	f7fa fd9b 	bl	8000298 <__aeabi_dsub>
 8005762:	4602      	mov	r2, r0
 8005764:	460b      	mov	r3, r1
 8005766:	4640      	mov	r0, r8
 8005768:	4649      	mov	r1, r9
 800576a:	f7fb f9bf 	bl	8000aec <__aeabi_dcmplt>
 800576e:	2800      	cmp	r0, #0
 8005770:	f43f af2f 	beq.w	80055d2 <_dtoa_r+0x47a>
 8005774:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005776:	1e6b      	subs	r3, r5, #1
 8005778:	930f      	str	r3, [sp, #60]	; 0x3c
 800577a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800577e:	2b30      	cmp	r3, #48	; 0x30
 8005780:	d0f8      	beq.n	8005774 <_dtoa_r+0x61c>
 8005782:	46bb      	mov	fp, r7
 8005784:	e04a      	b.n	800581c <_dtoa_r+0x6c4>
 8005786:	4b06      	ldr	r3, [pc, #24]	; (80057a0 <_dtoa_r+0x648>)
 8005788:	f7fa ff3e 	bl	8000608 <__aeabi_dmul>
 800578c:	4680      	mov	r8, r0
 800578e:	4689      	mov	r9, r1
 8005790:	e7bd      	b.n	800570e <_dtoa_r+0x5b6>
 8005792:	bf00      	nop
 8005794:	08007d88 	.word	0x08007d88
 8005798:	08007d60 	.word	0x08007d60
 800579c:	3ff00000 	.word	0x3ff00000
 80057a0:	40240000 	.word	0x40240000
 80057a4:	401c0000 	.word	0x401c0000
 80057a8:	40140000 	.word	0x40140000
 80057ac:	3fe00000 	.word	0x3fe00000
 80057b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80057b4:	9d00      	ldr	r5, [sp, #0]
 80057b6:	4642      	mov	r2, r8
 80057b8:	464b      	mov	r3, r9
 80057ba:	4630      	mov	r0, r6
 80057bc:	4639      	mov	r1, r7
 80057be:	f7fb f84d 	bl	800085c <__aeabi_ddiv>
 80057c2:	f7fb f9d1 	bl	8000b68 <__aeabi_d2iz>
 80057c6:	9001      	str	r0, [sp, #4]
 80057c8:	f7fa feb4 	bl	8000534 <__aeabi_i2d>
 80057cc:	4642      	mov	r2, r8
 80057ce:	464b      	mov	r3, r9
 80057d0:	f7fa ff1a 	bl	8000608 <__aeabi_dmul>
 80057d4:	4602      	mov	r2, r0
 80057d6:	460b      	mov	r3, r1
 80057d8:	4630      	mov	r0, r6
 80057da:	4639      	mov	r1, r7
 80057dc:	f7fa fd5c 	bl	8000298 <__aeabi_dsub>
 80057e0:	9e01      	ldr	r6, [sp, #4]
 80057e2:	9f04      	ldr	r7, [sp, #16]
 80057e4:	3630      	adds	r6, #48	; 0x30
 80057e6:	f805 6b01 	strb.w	r6, [r5], #1
 80057ea:	9e00      	ldr	r6, [sp, #0]
 80057ec:	1bae      	subs	r6, r5, r6
 80057ee:	42b7      	cmp	r7, r6
 80057f0:	4602      	mov	r2, r0
 80057f2:	460b      	mov	r3, r1
 80057f4:	d134      	bne.n	8005860 <_dtoa_r+0x708>
 80057f6:	f7fa fd51 	bl	800029c <__adddf3>
 80057fa:	4642      	mov	r2, r8
 80057fc:	464b      	mov	r3, r9
 80057fe:	4606      	mov	r6, r0
 8005800:	460f      	mov	r7, r1
 8005802:	f7fb f991 	bl	8000b28 <__aeabi_dcmpgt>
 8005806:	b9c8      	cbnz	r0, 800583c <_dtoa_r+0x6e4>
 8005808:	4642      	mov	r2, r8
 800580a:	464b      	mov	r3, r9
 800580c:	4630      	mov	r0, r6
 800580e:	4639      	mov	r1, r7
 8005810:	f7fb f962 	bl	8000ad8 <__aeabi_dcmpeq>
 8005814:	b110      	cbz	r0, 800581c <_dtoa_r+0x6c4>
 8005816:	9b01      	ldr	r3, [sp, #4]
 8005818:	07db      	lsls	r3, r3, #31
 800581a:	d40f      	bmi.n	800583c <_dtoa_r+0x6e4>
 800581c:	4651      	mov	r1, sl
 800581e:	4620      	mov	r0, r4
 8005820:	f000 fbcc 	bl	8005fbc <_Bfree>
 8005824:	2300      	movs	r3, #0
 8005826:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005828:	702b      	strb	r3, [r5, #0]
 800582a:	f10b 0301 	add.w	r3, fp, #1
 800582e:	6013      	str	r3, [r2, #0]
 8005830:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005832:	2b00      	cmp	r3, #0
 8005834:	f43f ace2 	beq.w	80051fc <_dtoa_r+0xa4>
 8005838:	601d      	str	r5, [r3, #0]
 800583a:	e4df      	b.n	80051fc <_dtoa_r+0xa4>
 800583c:	465f      	mov	r7, fp
 800583e:	462b      	mov	r3, r5
 8005840:	461d      	mov	r5, r3
 8005842:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005846:	2a39      	cmp	r2, #57	; 0x39
 8005848:	d106      	bne.n	8005858 <_dtoa_r+0x700>
 800584a:	9a00      	ldr	r2, [sp, #0]
 800584c:	429a      	cmp	r2, r3
 800584e:	d1f7      	bne.n	8005840 <_dtoa_r+0x6e8>
 8005850:	9900      	ldr	r1, [sp, #0]
 8005852:	2230      	movs	r2, #48	; 0x30
 8005854:	3701      	adds	r7, #1
 8005856:	700a      	strb	r2, [r1, #0]
 8005858:	781a      	ldrb	r2, [r3, #0]
 800585a:	3201      	adds	r2, #1
 800585c:	701a      	strb	r2, [r3, #0]
 800585e:	e790      	b.n	8005782 <_dtoa_r+0x62a>
 8005860:	4ba3      	ldr	r3, [pc, #652]	; (8005af0 <_dtoa_r+0x998>)
 8005862:	2200      	movs	r2, #0
 8005864:	f7fa fed0 	bl	8000608 <__aeabi_dmul>
 8005868:	2200      	movs	r2, #0
 800586a:	2300      	movs	r3, #0
 800586c:	4606      	mov	r6, r0
 800586e:	460f      	mov	r7, r1
 8005870:	f7fb f932 	bl	8000ad8 <__aeabi_dcmpeq>
 8005874:	2800      	cmp	r0, #0
 8005876:	d09e      	beq.n	80057b6 <_dtoa_r+0x65e>
 8005878:	e7d0      	b.n	800581c <_dtoa_r+0x6c4>
 800587a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800587c:	2a00      	cmp	r2, #0
 800587e:	f000 80ca 	beq.w	8005a16 <_dtoa_r+0x8be>
 8005882:	9a07      	ldr	r2, [sp, #28]
 8005884:	2a01      	cmp	r2, #1
 8005886:	f300 80ad 	bgt.w	80059e4 <_dtoa_r+0x88c>
 800588a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800588c:	2a00      	cmp	r2, #0
 800588e:	f000 80a5 	beq.w	80059dc <_dtoa_r+0x884>
 8005892:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005896:	9e08      	ldr	r6, [sp, #32]
 8005898:	9d05      	ldr	r5, [sp, #20]
 800589a:	9a05      	ldr	r2, [sp, #20]
 800589c:	441a      	add	r2, r3
 800589e:	9205      	str	r2, [sp, #20]
 80058a0:	9a06      	ldr	r2, [sp, #24]
 80058a2:	2101      	movs	r1, #1
 80058a4:	441a      	add	r2, r3
 80058a6:	4620      	mov	r0, r4
 80058a8:	9206      	str	r2, [sp, #24]
 80058aa:	f000 fc3d 	bl	8006128 <__i2b>
 80058ae:	4607      	mov	r7, r0
 80058b0:	b165      	cbz	r5, 80058cc <_dtoa_r+0x774>
 80058b2:	9b06      	ldr	r3, [sp, #24]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	dd09      	ble.n	80058cc <_dtoa_r+0x774>
 80058b8:	42ab      	cmp	r3, r5
 80058ba:	9a05      	ldr	r2, [sp, #20]
 80058bc:	bfa8      	it	ge
 80058be:	462b      	movge	r3, r5
 80058c0:	1ad2      	subs	r2, r2, r3
 80058c2:	9205      	str	r2, [sp, #20]
 80058c4:	9a06      	ldr	r2, [sp, #24]
 80058c6:	1aed      	subs	r5, r5, r3
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	9306      	str	r3, [sp, #24]
 80058cc:	9b08      	ldr	r3, [sp, #32]
 80058ce:	b1f3      	cbz	r3, 800590e <_dtoa_r+0x7b6>
 80058d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	f000 80a3 	beq.w	8005a1e <_dtoa_r+0x8c6>
 80058d8:	2e00      	cmp	r6, #0
 80058da:	dd10      	ble.n	80058fe <_dtoa_r+0x7a6>
 80058dc:	4639      	mov	r1, r7
 80058de:	4632      	mov	r2, r6
 80058e0:	4620      	mov	r0, r4
 80058e2:	f000 fce1 	bl	80062a8 <__pow5mult>
 80058e6:	4652      	mov	r2, sl
 80058e8:	4601      	mov	r1, r0
 80058ea:	4607      	mov	r7, r0
 80058ec:	4620      	mov	r0, r4
 80058ee:	f000 fc31 	bl	8006154 <__multiply>
 80058f2:	4651      	mov	r1, sl
 80058f4:	4680      	mov	r8, r0
 80058f6:	4620      	mov	r0, r4
 80058f8:	f000 fb60 	bl	8005fbc <_Bfree>
 80058fc:	46c2      	mov	sl, r8
 80058fe:	9b08      	ldr	r3, [sp, #32]
 8005900:	1b9a      	subs	r2, r3, r6
 8005902:	d004      	beq.n	800590e <_dtoa_r+0x7b6>
 8005904:	4651      	mov	r1, sl
 8005906:	4620      	mov	r0, r4
 8005908:	f000 fcce 	bl	80062a8 <__pow5mult>
 800590c:	4682      	mov	sl, r0
 800590e:	2101      	movs	r1, #1
 8005910:	4620      	mov	r0, r4
 8005912:	f000 fc09 	bl	8006128 <__i2b>
 8005916:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005918:	2b00      	cmp	r3, #0
 800591a:	4606      	mov	r6, r0
 800591c:	f340 8081 	ble.w	8005a22 <_dtoa_r+0x8ca>
 8005920:	461a      	mov	r2, r3
 8005922:	4601      	mov	r1, r0
 8005924:	4620      	mov	r0, r4
 8005926:	f000 fcbf 	bl	80062a8 <__pow5mult>
 800592a:	9b07      	ldr	r3, [sp, #28]
 800592c:	2b01      	cmp	r3, #1
 800592e:	4606      	mov	r6, r0
 8005930:	dd7a      	ble.n	8005a28 <_dtoa_r+0x8d0>
 8005932:	f04f 0800 	mov.w	r8, #0
 8005936:	6933      	ldr	r3, [r6, #16]
 8005938:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800593c:	6918      	ldr	r0, [r3, #16]
 800593e:	f000 fba5 	bl	800608c <__hi0bits>
 8005942:	f1c0 0020 	rsb	r0, r0, #32
 8005946:	9b06      	ldr	r3, [sp, #24]
 8005948:	4418      	add	r0, r3
 800594a:	f010 001f 	ands.w	r0, r0, #31
 800594e:	f000 8094 	beq.w	8005a7a <_dtoa_r+0x922>
 8005952:	f1c0 0320 	rsb	r3, r0, #32
 8005956:	2b04      	cmp	r3, #4
 8005958:	f340 8085 	ble.w	8005a66 <_dtoa_r+0x90e>
 800595c:	9b05      	ldr	r3, [sp, #20]
 800595e:	f1c0 001c 	rsb	r0, r0, #28
 8005962:	4403      	add	r3, r0
 8005964:	9305      	str	r3, [sp, #20]
 8005966:	9b06      	ldr	r3, [sp, #24]
 8005968:	4403      	add	r3, r0
 800596a:	4405      	add	r5, r0
 800596c:	9306      	str	r3, [sp, #24]
 800596e:	9b05      	ldr	r3, [sp, #20]
 8005970:	2b00      	cmp	r3, #0
 8005972:	dd05      	ble.n	8005980 <_dtoa_r+0x828>
 8005974:	4651      	mov	r1, sl
 8005976:	461a      	mov	r2, r3
 8005978:	4620      	mov	r0, r4
 800597a:	f000 fcef 	bl	800635c <__lshift>
 800597e:	4682      	mov	sl, r0
 8005980:	9b06      	ldr	r3, [sp, #24]
 8005982:	2b00      	cmp	r3, #0
 8005984:	dd05      	ble.n	8005992 <_dtoa_r+0x83a>
 8005986:	4631      	mov	r1, r6
 8005988:	461a      	mov	r2, r3
 800598a:	4620      	mov	r0, r4
 800598c:	f000 fce6 	bl	800635c <__lshift>
 8005990:	4606      	mov	r6, r0
 8005992:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005994:	2b00      	cmp	r3, #0
 8005996:	d072      	beq.n	8005a7e <_dtoa_r+0x926>
 8005998:	4631      	mov	r1, r6
 800599a:	4650      	mov	r0, sl
 800599c:	f000 fd4a 	bl	8006434 <__mcmp>
 80059a0:	2800      	cmp	r0, #0
 80059a2:	da6c      	bge.n	8005a7e <_dtoa_r+0x926>
 80059a4:	2300      	movs	r3, #0
 80059a6:	4651      	mov	r1, sl
 80059a8:	220a      	movs	r2, #10
 80059aa:	4620      	mov	r0, r4
 80059ac:	f000 fb28 	bl	8006000 <__multadd>
 80059b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80059b6:	4682      	mov	sl, r0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	f000 81b0 	beq.w	8005d1e <_dtoa_r+0xbc6>
 80059be:	2300      	movs	r3, #0
 80059c0:	4639      	mov	r1, r7
 80059c2:	220a      	movs	r2, #10
 80059c4:	4620      	mov	r0, r4
 80059c6:	f000 fb1b 	bl	8006000 <__multadd>
 80059ca:	9b01      	ldr	r3, [sp, #4]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	4607      	mov	r7, r0
 80059d0:	f300 8096 	bgt.w	8005b00 <_dtoa_r+0x9a8>
 80059d4:	9b07      	ldr	r3, [sp, #28]
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	dc59      	bgt.n	8005a8e <_dtoa_r+0x936>
 80059da:	e091      	b.n	8005b00 <_dtoa_r+0x9a8>
 80059dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80059de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80059e2:	e758      	b.n	8005896 <_dtoa_r+0x73e>
 80059e4:	9b04      	ldr	r3, [sp, #16]
 80059e6:	1e5e      	subs	r6, r3, #1
 80059e8:	9b08      	ldr	r3, [sp, #32]
 80059ea:	42b3      	cmp	r3, r6
 80059ec:	bfbf      	itttt	lt
 80059ee:	9b08      	ldrlt	r3, [sp, #32]
 80059f0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80059f2:	9608      	strlt	r6, [sp, #32]
 80059f4:	1af3      	sublt	r3, r6, r3
 80059f6:	bfb4      	ite	lt
 80059f8:	18d2      	addlt	r2, r2, r3
 80059fa:	1b9e      	subge	r6, r3, r6
 80059fc:	9b04      	ldr	r3, [sp, #16]
 80059fe:	bfbc      	itt	lt
 8005a00:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8005a02:	2600      	movlt	r6, #0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	bfb7      	itett	lt
 8005a08:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8005a0c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8005a10:	1a9d      	sublt	r5, r3, r2
 8005a12:	2300      	movlt	r3, #0
 8005a14:	e741      	b.n	800589a <_dtoa_r+0x742>
 8005a16:	9e08      	ldr	r6, [sp, #32]
 8005a18:	9d05      	ldr	r5, [sp, #20]
 8005a1a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005a1c:	e748      	b.n	80058b0 <_dtoa_r+0x758>
 8005a1e:	9a08      	ldr	r2, [sp, #32]
 8005a20:	e770      	b.n	8005904 <_dtoa_r+0x7ac>
 8005a22:	9b07      	ldr	r3, [sp, #28]
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	dc19      	bgt.n	8005a5c <_dtoa_r+0x904>
 8005a28:	9b02      	ldr	r3, [sp, #8]
 8005a2a:	b9bb      	cbnz	r3, 8005a5c <_dtoa_r+0x904>
 8005a2c:	9b03      	ldr	r3, [sp, #12]
 8005a2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a32:	b99b      	cbnz	r3, 8005a5c <_dtoa_r+0x904>
 8005a34:	9b03      	ldr	r3, [sp, #12]
 8005a36:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a3a:	0d1b      	lsrs	r3, r3, #20
 8005a3c:	051b      	lsls	r3, r3, #20
 8005a3e:	b183      	cbz	r3, 8005a62 <_dtoa_r+0x90a>
 8005a40:	9b05      	ldr	r3, [sp, #20]
 8005a42:	3301      	adds	r3, #1
 8005a44:	9305      	str	r3, [sp, #20]
 8005a46:	9b06      	ldr	r3, [sp, #24]
 8005a48:	3301      	adds	r3, #1
 8005a4a:	9306      	str	r3, [sp, #24]
 8005a4c:	f04f 0801 	mov.w	r8, #1
 8005a50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	f47f af6f 	bne.w	8005936 <_dtoa_r+0x7de>
 8005a58:	2001      	movs	r0, #1
 8005a5a:	e774      	b.n	8005946 <_dtoa_r+0x7ee>
 8005a5c:	f04f 0800 	mov.w	r8, #0
 8005a60:	e7f6      	b.n	8005a50 <_dtoa_r+0x8f8>
 8005a62:	4698      	mov	r8, r3
 8005a64:	e7f4      	b.n	8005a50 <_dtoa_r+0x8f8>
 8005a66:	d082      	beq.n	800596e <_dtoa_r+0x816>
 8005a68:	9a05      	ldr	r2, [sp, #20]
 8005a6a:	331c      	adds	r3, #28
 8005a6c:	441a      	add	r2, r3
 8005a6e:	9205      	str	r2, [sp, #20]
 8005a70:	9a06      	ldr	r2, [sp, #24]
 8005a72:	441a      	add	r2, r3
 8005a74:	441d      	add	r5, r3
 8005a76:	9206      	str	r2, [sp, #24]
 8005a78:	e779      	b.n	800596e <_dtoa_r+0x816>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	e7f4      	b.n	8005a68 <_dtoa_r+0x910>
 8005a7e:	9b04      	ldr	r3, [sp, #16]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	dc37      	bgt.n	8005af4 <_dtoa_r+0x99c>
 8005a84:	9b07      	ldr	r3, [sp, #28]
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	dd34      	ble.n	8005af4 <_dtoa_r+0x99c>
 8005a8a:	9b04      	ldr	r3, [sp, #16]
 8005a8c:	9301      	str	r3, [sp, #4]
 8005a8e:	9b01      	ldr	r3, [sp, #4]
 8005a90:	b963      	cbnz	r3, 8005aac <_dtoa_r+0x954>
 8005a92:	4631      	mov	r1, r6
 8005a94:	2205      	movs	r2, #5
 8005a96:	4620      	mov	r0, r4
 8005a98:	f000 fab2 	bl	8006000 <__multadd>
 8005a9c:	4601      	mov	r1, r0
 8005a9e:	4606      	mov	r6, r0
 8005aa0:	4650      	mov	r0, sl
 8005aa2:	f000 fcc7 	bl	8006434 <__mcmp>
 8005aa6:	2800      	cmp	r0, #0
 8005aa8:	f73f adbb 	bgt.w	8005622 <_dtoa_r+0x4ca>
 8005aac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005aae:	9d00      	ldr	r5, [sp, #0]
 8005ab0:	ea6f 0b03 	mvn.w	fp, r3
 8005ab4:	f04f 0800 	mov.w	r8, #0
 8005ab8:	4631      	mov	r1, r6
 8005aba:	4620      	mov	r0, r4
 8005abc:	f000 fa7e 	bl	8005fbc <_Bfree>
 8005ac0:	2f00      	cmp	r7, #0
 8005ac2:	f43f aeab 	beq.w	800581c <_dtoa_r+0x6c4>
 8005ac6:	f1b8 0f00 	cmp.w	r8, #0
 8005aca:	d005      	beq.n	8005ad8 <_dtoa_r+0x980>
 8005acc:	45b8      	cmp	r8, r7
 8005ace:	d003      	beq.n	8005ad8 <_dtoa_r+0x980>
 8005ad0:	4641      	mov	r1, r8
 8005ad2:	4620      	mov	r0, r4
 8005ad4:	f000 fa72 	bl	8005fbc <_Bfree>
 8005ad8:	4639      	mov	r1, r7
 8005ada:	4620      	mov	r0, r4
 8005adc:	f000 fa6e 	bl	8005fbc <_Bfree>
 8005ae0:	e69c      	b.n	800581c <_dtoa_r+0x6c4>
 8005ae2:	2600      	movs	r6, #0
 8005ae4:	4637      	mov	r7, r6
 8005ae6:	e7e1      	b.n	8005aac <_dtoa_r+0x954>
 8005ae8:	46bb      	mov	fp, r7
 8005aea:	4637      	mov	r7, r6
 8005aec:	e599      	b.n	8005622 <_dtoa_r+0x4ca>
 8005aee:	bf00      	nop
 8005af0:	40240000 	.word	0x40240000
 8005af4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	f000 80c8 	beq.w	8005c8c <_dtoa_r+0xb34>
 8005afc:	9b04      	ldr	r3, [sp, #16]
 8005afe:	9301      	str	r3, [sp, #4]
 8005b00:	2d00      	cmp	r5, #0
 8005b02:	dd05      	ble.n	8005b10 <_dtoa_r+0x9b8>
 8005b04:	4639      	mov	r1, r7
 8005b06:	462a      	mov	r2, r5
 8005b08:	4620      	mov	r0, r4
 8005b0a:	f000 fc27 	bl	800635c <__lshift>
 8005b0e:	4607      	mov	r7, r0
 8005b10:	f1b8 0f00 	cmp.w	r8, #0
 8005b14:	d05b      	beq.n	8005bce <_dtoa_r+0xa76>
 8005b16:	6879      	ldr	r1, [r7, #4]
 8005b18:	4620      	mov	r0, r4
 8005b1a:	f000 fa0f 	bl	8005f3c <_Balloc>
 8005b1e:	4605      	mov	r5, r0
 8005b20:	b928      	cbnz	r0, 8005b2e <_dtoa_r+0x9d6>
 8005b22:	4b83      	ldr	r3, [pc, #524]	; (8005d30 <_dtoa_r+0xbd8>)
 8005b24:	4602      	mov	r2, r0
 8005b26:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005b2a:	f7ff bb2e 	b.w	800518a <_dtoa_r+0x32>
 8005b2e:	693a      	ldr	r2, [r7, #16]
 8005b30:	3202      	adds	r2, #2
 8005b32:	0092      	lsls	r2, r2, #2
 8005b34:	f107 010c 	add.w	r1, r7, #12
 8005b38:	300c      	adds	r0, #12
 8005b3a:	f001 f973 	bl	8006e24 <memcpy>
 8005b3e:	2201      	movs	r2, #1
 8005b40:	4629      	mov	r1, r5
 8005b42:	4620      	mov	r0, r4
 8005b44:	f000 fc0a 	bl	800635c <__lshift>
 8005b48:	9b00      	ldr	r3, [sp, #0]
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	9304      	str	r3, [sp, #16]
 8005b4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b52:	4413      	add	r3, r2
 8005b54:	9308      	str	r3, [sp, #32]
 8005b56:	9b02      	ldr	r3, [sp, #8]
 8005b58:	f003 0301 	and.w	r3, r3, #1
 8005b5c:	46b8      	mov	r8, r7
 8005b5e:	9306      	str	r3, [sp, #24]
 8005b60:	4607      	mov	r7, r0
 8005b62:	9b04      	ldr	r3, [sp, #16]
 8005b64:	4631      	mov	r1, r6
 8005b66:	3b01      	subs	r3, #1
 8005b68:	4650      	mov	r0, sl
 8005b6a:	9301      	str	r3, [sp, #4]
 8005b6c:	f7ff fa69 	bl	8005042 <quorem>
 8005b70:	4641      	mov	r1, r8
 8005b72:	9002      	str	r0, [sp, #8]
 8005b74:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005b78:	4650      	mov	r0, sl
 8005b7a:	f000 fc5b 	bl	8006434 <__mcmp>
 8005b7e:	463a      	mov	r2, r7
 8005b80:	9005      	str	r0, [sp, #20]
 8005b82:	4631      	mov	r1, r6
 8005b84:	4620      	mov	r0, r4
 8005b86:	f000 fc71 	bl	800646c <__mdiff>
 8005b8a:	68c2      	ldr	r2, [r0, #12]
 8005b8c:	4605      	mov	r5, r0
 8005b8e:	bb02      	cbnz	r2, 8005bd2 <_dtoa_r+0xa7a>
 8005b90:	4601      	mov	r1, r0
 8005b92:	4650      	mov	r0, sl
 8005b94:	f000 fc4e 	bl	8006434 <__mcmp>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	4629      	mov	r1, r5
 8005b9c:	4620      	mov	r0, r4
 8005b9e:	9209      	str	r2, [sp, #36]	; 0x24
 8005ba0:	f000 fa0c 	bl	8005fbc <_Bfree>
 8005ba4:	9b07      	ldr	r3, [sp, #28]
 8005ba6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ba8:	9d04      	ldr	r5, [sp, #16]
 8005baa:	ea43 0102 	orr.w	r1, r3, r2
 8005bae:	9b06      	ldr	r3, [sp, #24]
 8005bb0:	4319      	orrs	r1, r3
 8005bb2:	d110      	bne.n	8005bd6 <_dtoa_r+0xa7e>
 8005bb4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005bb8:	d029      	beq.n	8005c0e <_dtoa_r+0xab6>
 8005bba:	9b05      	ldr	r3, [sp, #20]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	dd02      	ble.n	8005bc6 <_dtoa_r+0xa6e>
 8005bc0:	9b02      	ldr	r3, [sp, #8]
 8005bc2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8005bc6:	9b01      	ldr	r3, [sp, #4]
 8005bc8:	f883 9000 	strb.w	r9, [r3]
 8005bcc:	e774      	b.n	8005ab8 <_dtoa_r+0x960>
 8005bce:	4638      	mov	r0, r7
 8005bd0:	e7ba      	b.n	8005b48 <_dtoa_r+0x9f0>
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	e7e1      	b.n	8005b9a <_dtoa_r+0xa42>
 8005bd6:	9b05      	ldr	r3, [sp, #20]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	db04      	blt.n	8005be6 <_dtoa_r+0xa8e>
 8005bdc:	9907      	ldr	r1, [sp, #28]
 8005bde:	430b      	orrs	r3, r1
 8005be0:	9906      	ldr	r1, [sp, #24]
 8005be2:	430b      	orrs	r3, r1
 8005be4:	d120      	bne.n	8005c28 <_dtoa_r+0xad0>
 8005be6:	2a00      	cmp	r2, #0
 8005be8:	dded      	ble.n	8005bc6 <_dtoa_r+0xa6e>
 8005bea:	4651      	mov	r1, sl
 8005bec:	2201      	movs	r2, #1
 8005bee:	4620      	mov	r0, r4
 8005bf0:	f000 fbb4 	bl	800635c <__lshift>
 8005bf4:	4631      	mov	r1, r6
 8005bf6:	4682      	mov	sl, r0
 8005bf8:	f000 fc1c 	bl	8006434 <__mcmp>
 8005bfc:	2800      	cmp	r0, #0
 8005bfe:	dc03      	bgt.n	8005c08 <_dtoa_r+0xab0>
 8005c00:	d1e1      	bne.n	8005bc6 <_dtoa_r+0xa6e>
 8005c02:	f019 0f01 	tst.w	r9, #1
 8005c06:	d0de      	beq.n	8005bc6 <_dtoa_r+0xa6e>
 8005c08:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005c0c:	d1d8      	bne.n	8005bc0 <_dtoa_r+0xa68>
 8005c0e:	9a01      	ldr	r2, [sp, #4]
 8005c10:	2339      	movs	r3, #57	; 0x39
 8005c12:	7013      	strb	r3, [r2, #0]
 8005c14:	462b      	mov	r3, r5
 8005c16:	461d      	mov	r5, r3
 8005c18:	3b01      	subs	r3, #1
 8005c1a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005c1e:	2a39      	cmp	r2, #57	; 0x39
 8005c20:	d06c      	beq.n	8005cfc <_dtoa_r+0xba4>
 8005c22:	3201      	adds	r2, #1
 8005c24:	701a      	strb	r2, [r3, #0]
 8005c26:	e747      	b.n	8005ab8 <_dtoa_r+0x960>
 8005c28:	2a00      	cmp	r2, #0
 8005c2a:	dd07      	ble.n	8005c3c <_dtoa_r+0xae4>
 8005c2c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005c30:	d0ed      	beq.n	8005c0e <_dtoa_r+0xab6>
 8005c32:	9a01      	ldr	r2, [sp, #4]
 8005c34:	f109 0301 	add.w	r3, r9, #1
 8005c38:	7013      	strb	r3, [r2, #0]
 8005c3a:	e73d      	b.n	8005ab8 <_dtoa_r+0x960>
 8005c3c:	9b04      	ldr	r3, [sp, #16]
 8005c3e:	9a08      	ldr	r2, [sp, #32]
 8005c40:	f803 9c01 	strb.w	r9, [r3, #-1]
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d043      	beq.n	8005cd0 <_dtoa_r+0xb78>
 8005c48:	4651      	mov	r1, sl
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	220a      	movs	r2, #10
 8005c4e:	4620      	mov	r0, r4
 8005c50:	f000 f9d6 	bl	8006000 <__multadd>
 8005c54:	45b8      	cmp	r8, r7
 8005c56:	4682      	mov	sl, r0
 8005c58:	f04f 0300 	mov.w	r3, #0
 8005c5c:	f04f 020a 	mov.w	r2, #10
 8005c60:	4641      	mov	r1, r8
 8005c62:	4620      	mov	r0, r4
 8005c64:	d107      	bne.n	8005c76 <_dtoa_r+0xb1e>
 8005c66:	f000 f9cb 	bl	8006000 <__multadd>
 8005c6a:	4680      	mov	r8, r0
 8005c6c:	4607      	mov	r7, r0
 8005c6e:	9b04      	ldr	r3, [sp, #16]
 8005c70:	3301      	adds	r3, #1
 8005c72:	9304      	str	r3, [sp, #16]
 8005c74:	e775      	b.n	8005b62 <_dtoa_r+0xa0a>
 8005c76:	f000 f9c3 	bl	8006000 <__multadd>
 8005c7a:	4639      	mov	r1, r7
 8005c7c:	4680      	mov	r8, r0
 8005c7e:	2300      	movs	r3, #0
 8005c80:	220a      	movs	r2, #10
 8005c82:	4620      	mov	r0, r4
 8005c84:	f000 f9bc 	bl	8006000 <__multadd>
 8005c88:	4607      	mov	r7, r0
 8005c8a:	e7f0      	b.n	8005c6e <_dtoa_r+0xb16>
 8005c8c:	9b04      	ldr	r3, [sp, #16]
 8005c8e:	9301      	str	r3, [sp, #4]
 8005c90:	9d00      	ldr	r5, [sp, #0]
 8005c92:	4631      	mov	r1, r6
 8005c94:	4650      	mov	r0, sl
 8005c96:	f7ff f9d4 	bl	8005042 <quorem>
 8005c9a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005c9e:	9b00      	ldr	r3, [sp, #0]
 8005ca0:	f805 9b01 	strb.w	r9, [r5], #1
 8005ca4:	1aea      	subs	r2, r5, r3
 8005ca6:	9b01      	ldr	r3, [sp, #4]
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	dd07      	ble.n	8005cbc <_dtoa_r+0xb64>
 8005cac:	4651      	mov	r1, sl
 8005cae:	2300      	movs	r3, #0
 8005cb0:	220a      	movs	r2, #10
 8005cb2:	4620      	mov	r0, r4
 8005cb4:	f000 f9a4 	bl	8006000 <__multadd>
 8005cb8:	4682      	mov	sl, r0
 8005cba:	e7ea      	b.n	8005c92 <_dtoa_r+0xb3a>
 8005cbc:	9b01      	ldr	r3, [sp, #4]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	bfc8      	it	gt
 8005cc2:	461d      	movgt	r5, r3
 8005cc4:	9b00      	ldr	r3, [sp, #0]
 8005cc6:	bfd8      	it	le
 8005cc8:	2501      	movle	r5, #1
 8005cca:	441d      	add	r5, r3
 8005ccc:	f04f 0800 	mov.w	r8, #0
 8005cd0:	4651      	mov	r1, sl
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	4620      	mov	r0, r4
 8005cd6:	f000 fb41 	bl	800635c <__lshift>
 8005cda:	4631      	mov	r1, r6
 8005cdc:	4682      	mov	sl, r0
 8005cde:	f000 fba9 	bl	8006434 <__mcmp>
 8005ce2:	2800      	cmp	r0, #0
 8005ce4:	dc96      	bgt.n	8005c14 <_dtoa_r+0xabc>
 8005ce6:	d102      	bne.n	8005cee <_dtoa_r+0xb96>
 8005ce8:	f019 0f01 	tst.w	r9, #1
 8005cec:	d192      	bne.n	8005c14 <_dtoa_r+0xabc>
 8005cee:	462b      	mov	r3, r5
 8005cf0:	461d      	mov	r5, r3
 8005cf2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005cf6:	2a30      	cmp	r2, #48	; 0x30
 8005cf8:	d0fa      	beq.n	8005cf0 <_dtoa_r+0xb98>
 8005cfa:	e6dd      	b.n	8005ab8 <_dtoa_r+0x960>
 8005cfc:	9a00      	ldr	r2, [sp, #0]
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d189      	bne.n	8005c16 <_dtoa_r+0xabe>
 8005d02:	f10b 0b01 	add.w	fp, fp, #1
 8005d06:	2331      	movs	r3, #49	; 0x31
 8005d08:	e796      	b.n	8005c38 <_dtoa_r+0xae0>
 8005d0a:	4b0a      	ldr	r3, [pc, #40]	; (8005d34 <_dtoa_r+0xbdc>)
 8005d0c:	f7ff ba99 	b.w	8005242 <_dtoa_r+0xea>
 8005d10:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	f47f aa6d 	bne.w	80051f2 <_dtoa_r+0x9a>
 8005d18:	4b07      	ldr	r3, [pc, #28]	; (8005d38 <_dtoa_r+0xbe0>)
 8005d1a:	f7ff ba92 	b.w	8005242 <_dtoa_r+0xea>
 8005d1e:	9b01      	ldr	r3, [sp, #4]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	dcb5      	bgt.n	8005c90 <_dtoa_r+0xb38>
 8005d24:	9b07      	ldr	r3, [sp, #28]
 8005d26:	2b02      	cmp	r3, #2
 8005d28:	f73f aeb1 	bgt.w	8005a8e <_dtoa_r+0x936>
 8005d2c:	e7b0      	b.n	8005c90 <_dtoa_r+0xb38>
 8005d2e:	bf00      	nop
 8005d30:	08007cf0 	.word	0x08007cf0
 8005d34:	08007c50 	.word	0x08007c50
 8005d38:	08007c74 	.word	0x08007c74

08005d3c <_free_r>:
 8005d3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005d3e:	2900      	cmp	r1, #0
 8005d40:	d044      	beq.n	8005dcc <_free_r+0x90>
 8005d42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d46:	9001      	str	r0, [sp, #4]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	f1a1 0404 	sub.w	r4, r1, #4
 8005d4e:	bfb8      	it	lt
 8005d50:	18e4      	addlt	r4, r4, r3
 8005d52:	f000 f8e7 	bl	8005f24 <__malloc_lock>
 8005d56:	4a1e      	ldr	r2, [pc, #120]	; (8005dd0 <_free_r+0x94>)
 8005d58:	9801      	ldr	r0, [sp, #4]
 8005d5a:	6813      	ldr	r3, [r2, #0]
 8005d5c:	b933      	cbnz	r3, 8005d6c <_free_r+0x30>
 8005d5e:	6063      	str	r3, [r4, #4]
 8005d60:	6014      	str	r4, [r2, #0]
 8005d62:	b003      	add	sp, #12
 8005d64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005d68:	f000 b8e2 	b.w	8005f30 <__malloc_unlock>
 8005d6c:	42a3      	cmp	r3, r4
 8005d6e:	d908      	bls.n	8005d82 <_free_r+0x46>
 8005d70:	6825      	ldr	r5, [r4, #0]
 8005d72:	1961      	adds	r1, r4, r5
 8005d74:	428b      	cmp	r3, r1
 8005d76:	bf01      	itttt	eq
 8005d78:	6819      	ldreq	r1, [r3, #0]
 8005d7a:	685b      	ldreq	r3, [r3, #4]
 8005d7c:	1949      	addeq	r1, r1, r5
 8005d7e:	6021      	streq	r1, [r4, #0]
 8005d80:	e7ed      	b.n	8005d5e <_free_r+0x22>
 8005d82:	461a      	mov	r2, r3
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	b10b      	cbz	r3, 8005d8c <_free_r+0x50>
 8005d88:	42a3      	cmp	r3, r4
 8005d8a:	d9fa      	bls.n	8005d82 <_free_r+0x46>
 8005d8c:	6811      	ldr	r1, [r2, #0]
 8005d8e:	1855      	adds	r5, r2, r1
 8005d90:	42a5      	cmp	r5, r4
 8005d92:	d10b      	bne.n	8005dac <_free_r+0x70>
 8005d94:	6824      	ldr	r4, [r4, #0]
 8005d96:	4421      	add	r1, r4
 8005d98:	1854      	adds	r4, r2, r1
 8005d9a:	42a3      	cmp	r3, r4
 8005d9c:	6011      	str	r1, [r2, #0]
 8005d9e:	d1e0      	bne.n	8005d62 <_free_r+0x26>
 8005da0:	681c      	ldr	r4, [r3, #0]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	6053      	str	r3, [r2, #4]
 8005da6:	440c      	add	r4, r1
 8005da8:	6014      	str	r4, [r2, #0]
 8005daa:	e7da      	b.n	8005d62 <_free_r+0x26>
 8005dac:	d902      	bls.n	8005db4 <_free_r+0x78>
 8005dae:	230c      	movs	r3, #12
 8005db0:	6003      	str	r3, [r0, #0]
 8005db2:	e7d6      	b.n	8005d62 <_free_r+0x26>
 8005db4:	6825      	ldr	r5, [r4, #0]
 8005db6:	1961      	adds	r1, r4, r5
 8005db8:	428b      	cmp	r3, r1
 8005dba:	bf04      	itt	eq
 8005dbc:	6819      	ldreq	r1, [r3, #0]
 8005dbe:	685b      	ldreq	r3, [r3, #4]
 8005dc0:	6063      	str	r3, [r4, #4]
 8005dc2:	bf04      	itt	eq
 8005dc4:	1949      	addeq	r1, r1, r5
 8005dc6:	6021      	streq	r1, [r4, #0]
 8005dc8:	6054      	str	r4, [r2, #4]
 8005dca:	e7ca      	b.n	8005d62 <_free_r+0x26>
 8005dcc:	b003      	add	sp, #12
 8005dce:	bd30      	pop	{r4, r5, pc}
 8005dd0:	200007b8 	.word	0x200007b8

08005dd4 <malloc>:
 8005dd4:	4b02      	ldr	r3, [pc, #8]	; (8005de0 <malloc+0xc>)
 8005dd6:	4601      	mov	r1, r0
 8005dd8:	6818      	ldr	r0, [r3, #0]
 8005dda:	f000 b823 	b.w	8005e24 <_malloc_r>
 8005dde:	bf00      	nop
 8005de0:	20000068 	.word	0x20000068

08005de4 <sbrk_aligned>:
 8005de4:	b570      	push	{r4, r5, r6, lr}
 8005de6:	4e0e      	ldr	r6, [pc, #56]	; (8005e20 <sbrk_aligned+0x3c>)
 8005de8:	460c      	mov	r4, r1
 8005dea:	6831      	ldr	r1, [r6, #0]
 8005dec:	4605      	mov	r5, r0
 8005dee:	b911      	cbnz	r1, 8005df6 <sbrk_aligned+0x12>
 8005df0:	f001 f808 	bl	8006e04 <_sbrk_r>
 8005df4:	6030      	str	r0, [r6, #0]
 8005df6:	4621      	mov	r1, r4
 8005df8:	4628      	mov	r0, r5
 8005dfa:	f001 f803 	bl	8006e04 <_sbrk_r>
 8005dfe:	1c43      	adds	r3, r0, #1
 8005e00:	d00a      	beq.n	8005e18 <sbrk_aligned+0x34>
 8005e02:	1cc4      	adds	r4, r0, #3
 8005e04:	f024 0403 	bic.w	r4, r4, #3
 8005e08:	42a0      	cmp	r0, r4
 8005e0a:	d007      	beq.n	8005e1c <sbrk_aligned+0x38>
 8005e0c:	1a21      	subs	r1, r4, r0
 8005e0e:	4628      	mov	r0, r5
 8005e10:	f000 fff8 	bl	8006e04 <_sbrk_r>
 8005e14:	3001      	adds	r0, #1
 8005e16:	d101      	bne.n	8005e1c <sbrk_aligned+0x38>
 8005e18:	f04f 34ff 	mov.w	r4, #4294967295
 8005e1c:	4620      	mov	r0, r4
 8005e1e:	bd70      	pop	{r4, r5, r6, pc}
 8005e20:	200007bc 	.word	0x200007bc

08005e24 <_malloc_r>:
 8005e24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e28:	1ccd      	adds	r5, r1, #3
 8005e2a:	f025 0503 	bic.w	r5, r5, #3
 8005e2e:	3508      	adds	r5, #8
 8005e30:	2d0c      	cmp	r5, #12
 8005e32:	bf38      	it	cc
 8005e34:	250c      	movcc	r5, #12
 8005e36:	2d00      	cmp	r5, #0
 8005e38:	4607      	mov	r7, r0
 8005e3a:	db01      	blt.n	8005e40 <_malloc_r+0x1c>
 8005e3c:	42a9      	cmp	r1, r5
 8005e3e:	d905      	bls.n	8005e4c <_malloc_r+0x28>
 8005e40:	230c      	movs	r3, #12
 8005e42:	603b      	str	r3, [r7, #0]
 8005e44:	2600      	movs	r6, #0
 8005e46:	4630      	mov	r0, r6
 8005e48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e4c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005f20 <_malloc_r+0xfc>
 8005e50:	f000 f868 	bl	8005f24 <__malloc_lock>
 8005e54:	f8d8 3000 	ldr.w	r3, [r8]
 8005e58:	461c      	mov	r4, r3
 8005e5a:	bb5c      	cbnz	r4, 8005eb4 <_malloc_r+0x90>
 8005e5c:	4629      	mov	r1, r5
 8005e5e:	4638      	mov	r0, r7
 8005e60:	f7ff ffc0 	bl	8005de4 <sbrk_aligned>
 8005e64:	1c43      	adds	r3, r0, #1
 8005e66:	4604      	mov	r4, r0
 8005e68:	d155      	bne.n	8005f16 <_malloc_r+0xf2>
 8005e6a:	f8d8 4000 	ldr.w	r4, [r8]
 8005e6e:	4626      	mov	r6, r4
 8005e70:	2e00      	cmp	r6, #0
 8005e72:	d145      	bne.n	8005f00 <_malloc_r+0xdc>
 8005e74:	2c00      	cmp	r4, #0
 8005e76:	d048      	beq.n	8005f0a <_malloc_r+0xe6>
 8005e78:	6823      	ldr	r3, [r4, #0]
 8005e7a:	4631      	mov	r1, r6
 8005e7c:	4638      	mov	r0, r7
 8005e7e:	eb04 0903 	add.w	r9, r4, r3
 8005e82:	f000 ffbf 	bl	8006e04 <_sbrk_r>
 8005e86:	4581      	cmp	r9, r0
 8005e88:	d13f      	bne.n	8005f0a <_malloc_r+0xe6>
 8005e8a:	6821      	ldr	r1, [r4, #0]
 8005e8c:	1a6d      	subs	r5, r5, r1
 8005e8e:	4629      	mov	r1, r5
 8005e90:	4638      	mov	r0, r7
 8005e92:	f7ff ffa7 	bl	8005de4 <sbrk_aligned>
 8005e96:	3001      	adds	r0, #1
 8005e98:	d037      	beq.n	8005f0a <_malloc_r+0xe6>
 8005e9a:	6823      	ldr	r3, [r4, #0]
 8005e9c:	442b      	add	r3, r5
 8005e9e:	6023      	str	r3, [r4, #0]
 8005ea0:	f8d8 3000 	ldr.w	r3, [r8]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d038      	beq.n	8005f1a <_malloc_r+0xf6>
 8005ea8:	685a      	ldr	r2, [r3, #4]
 8005eaa:	42a2      	cmp	r2, r4
 8005eac:	d12b      	bne.n	8005f06 <_malloc_r+0xe2>
 8005eae:	2200      	movs	r2, #0
 8005eb0:	605a      	str	r2, [r3, #4]
 8005eb2:	e00f      	b.n	8005ed4 <_malloc_r+0xb0>
 8005eb4:	6822      	ldr	r2, [r4, #0]
 8005eb6:	1b52      	subs	r2, r2, r5
 8005eb8:	d41f      	bmi.n	8005efa <_malloc_r+0xd6>
 8005eba:	2a0b      	cmp	r2, #11
 8005ebc:	d917      	bls.n	8005eee <_malloc_r+0xca>
 8005ebe:	1961      	adds	r1, r4, r5
 8005ec0:	42a3      	cmp	r3, r4
 8005ec2:	6025      	str	r5, [r4, #0]
 8005ec4:	bf18      	it	ne
 8005ec6:	6059      	strne	r1, [r3, #4]
 8005ec8:	6863      	ldr	r3, [r4, #4]
 8005eca:	bf08      	it	eq
 8005ecc:	f8c8 1000 	streq.w	r1, [r8]
 8005ed0:	5162      	str	r2, [r4, r5]
 8005ed2:	604b      	str	r3, [r1, #4]
 8005ed4:	4638      	mov	r0, r7
 8005ed6:	f104 060b 	add.w	r6, r4, #11
 8005eda:	f000 f829 	bl	8005f30 <__malloc_unlock>
 8005ede:	f026 0607 	bic.w	r6, r6, #7
 8005ee2:	1d23      	adds	r3, r4, #4
 8005ee4:	1af2      	subs	r2, r6, r3
 8005ee6:	d0ae      	beq.n	8005e46 <_malloc_r+0x22>
 8005ee8:	1b9b      	subs	r3, r3, r6
 8005eea:	50a3      	str	r3, [r4, r2]
 8005eec:	e7ab      	b.n	8005e46 <_malloc_r+0x22>
 8005eee:	42a3      	cmp	r3, r4
 8005ef0:	6862      	ldr	r2, [r4, #4]
 8005ef2:	d1dd      	bne.n	8005eb0 <_malloc_r+0x8c>
 8005ef4:	f8c8 2000 	str.w	r2, [r8]
 8005ef8:	e7ec      	b.n	8005ed4 <_malloc_r+0xb0>
 8005efa:	4623      	mov	r3, r4
 8005efc:	6864      	ldr	r4, [r4, #4]
 8005efe:	e7ac      	b.n	8005e5a <_malloc_r+0x36>
 8005f00:	4634      	mov	r4, r6
 8005f02:	6876      	ldr	r6, [r6, #4]
 8005f04:	e7b4      	b.n	8005e70 <_malloc_r+0x4c>
 8005f06:	4613      	mov	r3, r2
 8005f08:	e7cc      	b.n	8005ea4 <_malloc_r+0x80>
 8005f0a:	230c      	movs	r3, #12
 8005f0c:	603b      	str	r3, [r7, #0]
 8005f0e:	4638      	mov	r0, r7
 8005f10:	f000 f80e 	bl	8005f30 <__malloc_unlock>
 8005f14:	e797      	b.n	8005e46 <_malloc_r+0x22>
 8005f16:	6025      	str	r5, [r4, #0]
 8005f18:	e7dc      	b.n	8005ed4 <_malloc_r+0xb0>
 8005f1a:	605b      	str	r3, [r3, #4]
 8005f1c:	deff      	udf	#255	; 0xff
 8005f1e:	bf00      	nop
 8005f20:	200007b8 	.word	0x200007b8

08005f24 <__malloc_lock>:
 8005f24:	4801      	ldr	r0, [pc, #4]	; (8005f2c <__malloc_lock+0x8>)
 8005f26:	f7ff b88a 	b.w	800503e <__retarget_lock_acquire_recursive>
 8005f2a:	bf00      	nop
 8005f2c:	200007b4 	.word	0x200007b4

08005f30 <__malloc_unlock>:
 8005f30:	4801      	ldr	r0, [pc, #4]	; (8005f38 <__malloc_unlock+0x8>)
 8005f32:	f7ff b885 	b.w	8005040 <__retarget_lock_release_recursive>
 8005f36:	bf00      	nop
 8005f38:	200007b4 	.word	0x200007b4

08005f3c <_Balloc>:
 8005f3c:	b570      	push	{r4, r5, r6, lr}
 8005f3e:	69c6      	ldr	r6, [r0, #28]
 8005f40:	4604      	mov	r4, r0
 8005f42:	460d      	mov	r5, r1
 8005f44:	b976      	cbnz	r6, 8005f64 <_Balloc+0x28>
 8005f46:	2010      	movs	r0, #16
 8005f48:	f7ff ff44 	bl	8005dd4 <malloc>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	61e0      	str	r0, [r4, #28]
 8005f50:	b920      	cbnz	r0, 8005f5c <_Balloc+0x20>
 8005f52:	4b18      	ldr	r3, [pc, #96]	; (8005fb4 <_Balloc+0x78>)
 8005f54:	4818      	ldr	r0, [pc, #96]	; (8005fb8 <_Balloc+0x7c>)
 8005f56:	216b      	movs	r1, #107	; 0x6b
 8005f58:	f000 ff72 	bl	8006e40 <__assert_func>
 8005f5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005f60:	6006      	str	r6, [r0, #0]
 8005f62:	60c6      	str	r6, [r0, #12]
 8005f64:	69e6      	ldr	r6, [r4, #28]
 8005f66:	68f3      	ldr	r3, [r6, #12]
 8005f68:	b183      	cbz	r3, 8005f8c <_Balloc+0x50>
 8005f6a:	69e3      	ldr	r3, [r4, #28]
 8005f6c:	68db      	ldr	r3, [r3, #12]
 8005f6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005f72:	b9b8      	cbnz	r0, 8005fa4 <_Balloc+0x68>
 8005f74:	2101      	movs	r1, #1
 8005f76:	fa01 f605 	lsl.w	r6, r1, r5
 8005f7a:	1d72      	adds	r2, r6, #5
 8005f7c:	0092      	lsls	r2, r2, #2
 8005f7e:	4620      	mov	r0, r4
 8005f80:	f000 ff7c 	bl	8006e7c <_calloc_r>
 8005f84:	b160      	cbz	r0, 8005fa0 <_Balloc+0x64>
 8005f86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005f8a:	e00e      	b.n	8005faa <_Balloc+0x6e>
 8005f8c:	2221      	movs	r2, #33	; 0x21
 8005f8e:	2104      	movs	r1, #4
 8005f90:	4620      	mov	r0, r4
 8005f92:	f000 ff73 	bl	8006e7c <_calloc_r>
 8005f96:	69e3      	ldr	r3, [r4, #28]
 8005f98:	60f0      	str	r0, [r6, #12]
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d1e4      	bne.n	8005f6a <_Balloc+0x2e>
 8005fa0:	2000      	movs	r0, #0
 8005fa2:	bd70      	pop	{r4, r5, r6, pc}
 8005fa4:	6802      	ldr	r2, [r0, #0]
 8005fa6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005faa:	2300      	movs	r3, #0
 8005fac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005fb0:	e7f7      	b.n	8005fa2 <_Balloc+0x66>
 8005fb2:	bf00      	nop
 8005fb4:	08007c81 	.word	0x08007c81
 8005fb8:	08007d01 	.word	0x08007d01

08005fbc <_Bfree>:
 8005fbc:	b570      	push	{r4, r5, r6, lr}
 8005fbe:	69c6      	ldr	r6, [r0, #28]
 8005fc0:	4605      	mov	r5, r0
 8005fc2:	460c      	mov	r4, r1
 8005fc4:	b976      	cbnz	r6, 8005fe4 <_Bfree+0x28>
 8005fc6:	2010      	movs	r0, #16
 8005fc8:	f7ff ff04 	bl	8005dd4 <malloc>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	61e8      	str	r0, [r5, #28]
 8005fd0:	b920      	cbnz	r0, 8005fdc <_Bfree+0x20>
 8005fd2:	4b09      	ldr	r3, [pc, #36]	; (8005ff8 <_Bfree+0x3c>)
 8005fd4:	4809      	ldr	r0, [pc, #36]	; (8005ffc <_Bfree+0x40>)
 8005fd6:	218f      	movs	r1, #143	; 0x8f
 8005fd8:	f000 ff32 	bl	8006e40 <__assert_func>
 8005fdc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005fe0:	6006      	str	r6, [r0, #0]
 8005fe2:	60c6      	str	r6, [r0, #12]
 8005fe4:	b13c      	cbz	r4, 8005ff6 <_Bfree+0x3a>
 8005fe6:	69eb      	ldr	r3, [r5, #28]
 8005fe8:	6862      	ldr	r2, [r4, #4]
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005ff0:	6021      	str	r1, [r4, #0]
 8005ff2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005ff6:	bd70      	pop	{r4, r5, r6, pc}
 8005ff8:	08007c81 	.word	0x08007c81
 8005ffc:	08007d01 	.word	0x08007d01

08006000 <__multadd>:
 8006000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006004:	690d      	ldr	r5, [r1, #16]
 8006006:	4607      	mov	r7, r0
 8006008:	460c      	mov	r4, r1
 800600a:	461e      	mov	r6, r3
 800600c:	f101 0c14 	add.w	ip, r1, #20
 8006010:	2000      	movs	r0, #0
 8006012:	f8dc 3000 	ldr.w	r3, [ip]
 8006016:	b299      	uxth	r1, r3
 8006018:	fb02 6101 	mla	r1, r2, r1, r6
 800601c:	0c1e      	lsrs	r6, r3, #16
 800601e:	0c0b      	lsrs	r3, r1, #16
 8006020:	fb02 3306 	mla	r3, r2, r6, r3
 8006024:	b289      	uxth	r1, r1
 8006026:	3001      	adds	r0, #1
 8006028:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800602c:	4285      	cmp	r5, r0
 800602e:	f84c 1b04 	str.w	r1, [ip], #4
 8006032:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006036:	dcec      	bgt.n	8006012 <__multadd+0x12>
 8006038:	b30e      	cbz	r6, 800607e <__multadd+0x7e>
 800603a:	68a3      	ldr	r3, [r4, #8]
 800603c:	42ab      	cmp	r3, r5
 800603e:	dc19      	bgt.n	8006074 <__multadd+0x74>
 8006040:	6861      	ldr	r1, [r4, #4]
 8006042:	4638      	mov	r0, r7
 8006044:	3101      	adds	r1, #1
 8006046:	f7ff ff79 	bl	8005f3c <_Balloc>
 800604a:	4680      	mov	r8, r0
 800604c:	b928      	cbnz	r0, 800605a <__multadd+0x5a>
 800604e:	4602      	mov	r2, r0
 8006050:	4b0c      	ldr	r3, [pc, #48]	; (8006084 <__multadd+0x84>)
 8006052:	480d      	ldr	r0, [pc, #52]	; (8006088 <__multadd+0x88>)
 8006054:	21ba      	movs	r1, #186	; 0xba
 8006056:	f000 fef3 	bl	8006e40 <__assert_func>
 800605a:	6922      	ldr	r2, [r4, #16]
 800605c:	3202      	adds	r2, #2
 800605e:	f104 010c 	add.w	r1, r4, #12
 8006062:	0092      	lsls	r2, r2, #2
 8006064:	300c      	adds	r0, #12
 8006066:	f000 fedd 	bl	8006e24 <memcpy>
 800606a:	4621      	mov	r1, r4
 800606c:	4638      	mov	r0, r7
 800606e:	f7ff ffa5 	bl	8005fbc <_Bfree>
 8006072:	4644      	mov	r4, r8
 8006074:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006078:	3501      	adds	r5, #1
 800607a:	615e      	str	r6, [r3, #20]
 800607c:	6125      	str	r5, [r4, #16]
 800607e:	4620      	mov	r0, r4
 8006080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006084:	08007cf0 	.word	0x08007cf0
 8006088:	08007d01 	.word	0x08007d01

0800608c <__hi0bits>:
 800608c:	0c03      	lsrs	r3, r0, #16
 800608e:	041b      	lsls	r3, r3, #16
 8006090:	b9d3      	cbnz	r3, 80060c8 <__hi0bits+0x3c>
 8006092:	0400      	lsls	r0, r0, #16
 8006094:	2310      	movs	r3, #16
 8006096:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800609a:	bf04      	itt	eq
 800609c:	0200      	lsleq	r0, r0, #8
 800609e:	3308      	addeq	r3, #8
 80060a0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80060a4:	bf04      	itt	eq
 80060a6:	0100      	lsleq	r0, r0, #4
 80060a8:	3304      	addeq	r3, #4
 80060aa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80060ae:	bf04      	itt	eq
 80060b0:	0080      	lsleq	r0, r0, #2
 80060b2:	3302      	addeq	r3, #2
 80060b4:	2800      	cmp	r0, #0
 80060b6:	db05      	blt.n	80060c4 <__hi0bits+0x38>
 80060b8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80060bc:	f103 0301 	add.w	r3, r3, #1
 80060c0:	bf08      	it	eq
 80060c2:	2320      	moveq	r3, #32
 80060c4:	4618      	mov	r0, r3
 80060c6:	4770      	bx	lr
 80060c8:	2300      	movs	r3, #0
 80060ca:	e7e4      	b.n	8006096 <__hi0bits+0xa>

080060cc <__lo0bits>:
 80060cc:	6803      	ldr	r3, [r0, #0]
 80060ce:	f013 0207 	ands.w	r2, r3, #7
 80060d2:	d00c      	beq.n	80060ee <__lo0bits+0x22>
 80060d4:	07d9      	lsls	r1, r3, #31
 80060d6:	d422      	bmi.n	800611e <__lo0bits+0x52>
 80060d8:	079a      	lsls	r2, r3, #30
 80060da:	bf49      	itett	mi
 80060dc:	085b      	lsrmi	r3, r3, #1
 80060de:	089b      	lsrpl	r3, r3, #2
 80060e0:	6003      	strmi	r3, [r0, #0]
 80060e2:	2201      	movmi	r2, #1
 80060e4:	bf5c      	itt	pl
 80060e6:	6003      	strpl	r3, [r0, #0]
 80060e8:	2202      	movpl	r2, #2
 80060ea:	4610      	mov	r0, r2
 80060ec:	4770      	bx	lr
 80060ee:	b299      	uxth	r1, r3
 80060f0:	b909      	cbnz	r1, 80060f6 <__lo0bits+0x2a>
 80060f2:	0c1b      	lsrs	r3, r3, #16
 80060f4:	2210      	movs	r2, #16
 80060f6:	b2d9      	uxtb	r1, r3
 80060f8:	b909      	cbnz	r1, 80060fe <__lo0bits+0x32>
 80060fa:	3208      	adds	r2, #8
 80060fc:	0a1b      	lsrs	r3, r3, #8
 80060fe:	0719      	lsls	r1, r3, #28
 8006100:	bf04      	itt	eq
 8006102:	091b      	lsreq	r3, r3, #4
 8006104:	3204      	addeq	r2, #4
 8006106:	0799      	lsls	r1, r3, #30
 8006108:	bf04      	itt	eq
 800610a:	089b      	lsreq	r3, r3, #2
 800610c:	3202      	addeq	r2, #2
 800610e:	07d9      	lsls	r1, r3, #31
 8006110:	d403      	bmi.n	800611a <__lo0bits+0x4e>
 8006112:	085b      	lsrs	r3, r3, #1
 8006114:	f102 0201 	add.w	r2, r2, #1
 8006118:	d003      	beq.n	8006122 <__lo0bits+0x56>
 800611a:	6003      	str	r3, [r0, #0]
 800611c:	e7e5      	b.n	80060ea <__lo0bits+0x1e>
 800611e:	2200      	movs	r2, #0
 8006120:	e7e3      	b.n	80060ea <__lo0bits+0x1e>
 8006122:	2220      	movs	r2, #32
 8006124:	e7e1      	b.n	80060ea <__lo0bits+0x1e>
	...

08006128 <__i2b>:
 8006128:	b510      	push	{r4, lr}
 800612a:	460c      	mov	r4, r1
 800612c:	2101      	movs	r1, #1
 800612e:	f7ff ff05 	bl	8005f3c <_Balloc>
 8006132:	4602      	mov	r2, r0
 8006134:	b928      	cbnz	r0, 8006142 <__i2b+0x1a>
 8006136:	4b05      	ldr	r3, [pc, #20]	; (800614c <__i2b+0x24>)
 8006138:	4805      	ldr	r0, [pc, #20]	; (8006150 <__i2b+0x28>)
 800613a:	f240 1145 	movw	r1, #325	; 0x145
 800613e:	f000 fe7f 	bl	8006e40 <__assert_func>
 8006142:	2301      	movs	r3, #1
 8006144:	6144      	str	r4, [r0, #20]
 8006146:	6103      	str	r3, [r0, #16]
 8006148:	bd10      	pop	{r4, pc}
 800614a:	bf00      	nop
 800614c:	08007cf0 	.word	0x08007cf0
 8006150:	08007d01 	.word	0x08007d01

08006154 <__multiply>:
 8006154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006158:	4691      	mov	r9, r2
 800615a:	690a      	ldr	r2, [r1, #16]
 800615c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006160:	429a      	cmp	r2, r3
 8006162:	bfb8      	it	lt
 8006164:	460b      	movlt	r3, r1
 8006166:	460c      	mov	r4, r1
 8006168:	bfbc      	itt	lt
 800616a:	464c      	movlt	r4, r9
 800616c:	4699      	movlt	r9, r3
 800616e:	6927      	ldr	r7, [r4, #16]
 8006170:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006174:	68a3      	ldr	r3, [r4, #8]
 8006176:	6861      	ldr	r1, [r4, #4]
 8006178:	eb07 060a 	add.w	r6, r7, sl
 800617c:	42b3      	cmp	r3, r6
 800617e:	b085      	sub	sp, #20
 8006180:	bfb8      	it	lt
 8006182:	3101      	addlt	r1, #1
 8006184:	f7ff feda 	bl	8005f3c <_Balloc>
 8006188:	b930      	cbnz	r0, 8006198 <__multiply+0x44>
 800618a:	4602      	mov	r2, r0
 800618c:	4b44      	ldr	r3, [pc, #272]	; (80062a0 <__multiply+0x14c>)
 800618e:	4845      	ldr	r0, [pc, #276]	; (80062a4 <__multiply+0x150>)
 8006190:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006194:	f000 fe54 	bl	8006e40 <__assert_func>
 8006198:	f100 0514 	add.w	r5, r0, #20
 800619c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80061a0:	462b      	mov	r3, r5
 80061a2:	2200      	movs	r2, #0
 80061a4:	4543      	cmp	r3, r8
 80061a6:	d321      	bcc.n	80061ec <__multiply+0x98>
 80061a8:	f104 0314 	add.w	r3, r4, #20
 80061ac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80061b0:	f109 0314 	add.w	r3, r9, #20
 80061b4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80061b8:	9202      	str	r2, [sp, #8]
 80061ba:	1b3a      	subs	r2, r7, r4
 80061bc:	3a15      	subs	r2, #21
 80061be:	f022 0203 	bic.w	r2, r2, #3
 80061c2:	3204      	adds	r2, #4
 80061c4:	f104 0115 	add.w	r1, r4, #21
 80061c8:	428f      	cmp	r7, r1
 80061ca:	bf38      	it	cc
 80061cc:	2204      	movcc	r2, #4
 80061ce:	9201      	str	r2, [sp, #4]
 80061d0:	9a02      	ldr	r2, [sp, #8]
 80061d2:	9303      	str	r3, [sp, #12]
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d80c      	bhi.n	80061f2 <__multiply+0x9e>
 80061d8:	2e00      	cmp	r6, #0
 80061da:	dd03      	ble.n	80061e4 <__multiply+0x90>
 80061dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d05b      	beq.n	800629c <__multiply+0x148>
 80061e4:	6106      	str	r6, [r0, #16]
 80061e6:	b005      	add	sp, #20
 80061e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061ec:	f843 2b04 	str.w	r2, [r3], #4
 80061f0:	e7d8      	b.n	80061a4 <__multiply+0x50>
 80061f2:	f8b3 a000 	ldrh.w	sl, [r3]
 80061f6:	f1ba 0f00 	cmp.w	sl, #0
 80061fa:	d024      	beq.n	8006246 <__multiply+0xf2>
 80061fc:	f104 0e14 	add.w	lr, r4, #20
 8006200:	46a9      	mov	r9, r5
 8006202:	f04f 0c00 	mov.w	ip, #0
 8006206:	f85e 2b04 	ldr.w	r2, [lr], #4
 800620a:	f8d9 1000 	ldr.w	r1, [r9]
 800620e:	fa1f fb82 	uxth.w	fp, r2
 8006212:	b289      	uxth	r1, r1
 8006214:	fb0a 110b 	mla	r1, sl, fp, r1
 8006218:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800621c:	f8d9 2000 	ldr.w	r2, [r9]
 8006220:	4461      	add	r1, ip
 8006222:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006226:	fb0a c20b 	mla	r2, sl, fp, ip
 800622a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800622e:	b289      	uxth	r1, r1
 8006230:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006234:	4577      	cmp	r7, lr
 8006236:	f849 1b04 	str.w	r1, [r9], #4
 800623a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800623e:	d8e2      	bhi.n	8006206 <__multiply+0xb2>
 8006240:	9a01      	ldr	r2, [sp, #4]
 8006242:	f845 c002 	str.w	ip, [r5, r2]
 8006246:	9a03      	ldr	r2, [sp, #12]
 8006248:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800624c:	3304      	adds	r3, #4
 800624e:	f1b9 0f00 	cmp.w	r9, #0
 8006252:	d021      	beq.n	8006298 <__multiply+0x144>
 8006254:	6829      	ldr	r1, [r5, #0]
 8006256:	f104 0c14 	add.w	ip, r4, #20
 800625a:	46ae      	mov	lr, r5
 800625c:	f04f 0a00 	mov.w	sl, #0
 8006260:	f8bc b000 	ldrh.w	fp, [ip]
 8006264:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006268:	fb09 220b 	mla	r2, r9, fp, r2
 800626c:	4452      	add	r2, sl
 800626e:	b289      	uxth	r1, r1
 8006270:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006274:	f84e 1b04 	str.w	r1, [lr], #4
 8006278:	f85c 1b04 	ldr.w	r1, [ip], #4
 800627c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006280:	f8be 1000 	ldrh.w	r1, [lr]
 8006284:	fb09 110a 	mla	r1, r9, sl, r1
 8006288:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800628c:	4567      	cmp	r7, ip
 800628e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006292:	d8e5      	bhi.n	8006260 <__multiply+0x10c>
 8006294:	9a01      	ldr	r2, [sp, #4]
 8006296:	50a9      	str	r1, [r5, r2]
 8006298:	3504      	adds	r5, #4
 800629a:	e799      	b.n	80061d0 <__multiply+0x7c>
 800629c:	3e01      	subs	r6, #1
 800629e:	e79b      	b.n	80061d8 <__multiply+0x84>
 80062a0:	08007cf0 	.word	0x08007cf0
 80062a4:	08007d01 	.word	0x08007d01

080062a8 <__pow5mult>:
 80062a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062ac:	4615      	mov	r5, r2
 80062ae:	f012 0203 	ands.w	r2, r2, #3
 80062b2:	4606      	mov	r6, r0
 80062b4:	460f      	mov	r7, r1
 80062b6:	d007      	beq.n	80062c8 <__pow5mult+0x20>
 80062b8:	4c25      	ldr	r4, [pc, #148]	; (8006350 <__pow5mult+0xa8>)
 80062ba:	3a01      	subs	r2, #1
 80062bc:	2300      	movs	r3, #0
 80062be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80062c2:	f7ff fe9d 	bl	8006000 <__multadd>
 80062c6:	4607      	mov	r7, r0
 80062c8:	10ad      	asrs	r5, r5, #2
 80062ca:	d03d      	beq.n	8006348 <__pow5mult+0xa0>
 80062cc:	69f4      	ldr	r4, [r6, #28]
 80062ce:	b97c      	cbnz	r4, 80062f0 <__pow5mult+0x48>
 80062d0:	2010      	movs	r0, #16
 80062d2:	f7ff fd7f 	bl	8005dd4 <malloc>
 80062d6:	4602      	mov	r2, r0
 80062d8:	61f0      	str	r0, [r6, #28]
 80062da:	b928      	cbnz	r0, 80062e8 <__pow5mult+0x40>
 80062dc:	4b1d      	ldr	r3, [pc, #116]	; (8006354 <__pow5mult+0xac>)
 80062de:	481e      	ldr	r0, [pc, #120]	; (8006358 <__pow5mult+0xb0>)
 80062e0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80062e4:	f000 fdac 	bl	8006e40 <__assert_func>
 80062e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80062ec:	6004      	str	r4, [r0, #0]
 80062ee:	60c4      	str	r4, [r0, #12]
 80062f0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80062f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80062f8:	b94c      	cbnz	r4, 800630e <__pow5mult+0x66>
 80062fa:	f240 2171 	movw	r1, #625	; 0x271
 80062fe:	4630      	mov	r0, r6
 8006300:	f7ff ff12 	bl	8006128 <__i2b>
 8006304:	2300      	movs	r3, #0
 8006306:	f8c8 0008 	str.w	r0, [r8, #8]
 800630a:	4604      	mov	r4, r0
 800630c:	6003      	str	r3, [r0, #0]
 800630e:	f04f 0900 	mov.w	r9, #0
 8006312:	07eb      	lsls	r3, r5, #31
 8006314:	d50a      	bpl.n	800632c <__pow5mult+0x84>
 8006316:	4639      	mov	r1, r7
 8006318:	4622      	mov	r2, r4
 800631a:	4630      	mov	r0, r6
 800631c:	f7ff ff1a 	bl	8006154 <__multiply>
 8006320:	4639      	mov	r1, r7
 8006322:	4680      	mov	r8, r0
 8006324:	4630      	mov	r0, r6
 8006326:	f7ff fe49 	bl	8005fbc <_Bfree>
 800632a:	4647      	mov	r7, r8
 800632c:	106d      	asrs	r5, r5, #1
 800632e:	d00b      	beq.n	8006348 <__pow5mult+0xa0>
 8006330:	6820      	ldr	r0, [r4, #0]
 8006332:	b938      	cbnz	r0, 8006344 <__pow5mult+0x9c>
 8006334:	4622      	mov	r2, r4
 8006336:	4621      	mov	r1, r4
 8006338:	4630      	mov	r0, r6
 800633a:	f7ff ff0b 	bl	8006154 <__multiply>
 800633e:	6020      	str	r0, [r4, #0]
 8006340:	f8c0 9000 	str.w	r9, [r0]
 8006344:	4604      	mov	r4, r0
 8006346:	e7e4      	b.n	8006312 <__pow5mult+0x6a>
 8006348:	4638      	mov	r0, r7
 800634a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800634e:	bf00      	nop
 8006350:	08007e50 	.word	0x08007e50
 8006354:	08007c81 	.word	0x08007c81
 8006358:	08007d01 	.word	0x08007d01

0800635c <__lshift>:
 800635c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006360:	460c      	mov	r4, r1
 8006362:	6849      	ldr	r1, [r1, #4]
 8006364:	6923      	ldr	r3, [r4, #16]
 8006366:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800636a:	68a3      	ldr	r3, [r4, #8]
 800636c:	4607      	mov	r7, r0
 800636e:	4691      	mov	r9, r2
 8006370:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006374:	f108 0601 	add.w	r6, r8, #1
 8006378:	42b3      	cmp	r3, r6
 800637a:	db0b      	blt.n	8006394 <__lshift+0x38>
 800637c:	4638      	mov	r0, r7
 800637e:	f7ff fddd 	bl	8005f3c <_Balloc>
 8006382:	4605      	mov	r5, r0
 8006384:	b948      	cbnz	r0, 800639a <__lshift+0x3e>
 8006386:	4602      	mov	r2, r0
 8006388:	4b28      	ldr	r3, [pc, #160]	; (800642c <__lshift+0xd0>)
 800638a:	4829      	ldr	r0, [pc, #164]	; (8006430 <__lshift+0xd4>)
 800638c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006390:	f000 fd56 	bl	8006e40 <__assert_func>
 8006394:	3101      	adds	r1, #1
 8006396:	005b      	lsls	r3, r3, #1
 8006398:	e7ee      	b.n	8006378 <__lshift+0x1c>
 800639a:	2300      	movs	r3, #0
 800639c:	f100 0114 	add.w	r1, r0, #20
 80063a0:	f100 0210 	add.w	r2, r0, #16
 80063a4:	4618      	mov	r0, r3
 80063a6:	4553      	cmp	r3, sl
 80063a8:	db33      	blt.n	8006412 <__lshift+0xb6>
 80063aa:	6920      	ldr	r0, [r4, #16]
 80063ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80063b0:	f104 0314 	add.w	r3, r4, #20
 80063b4:	f019 091f 	ands.w	r9, r9, #31
 80063b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80063bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80063c0:	d02b      	beq.n	800641a <__lshift+0xbe>
 80063c2:	f1c9 0e20 	rsb	lr, r9, #32
 80063c6:	468a      	mov	sl, r1
 80063c8:	2200      	movs	r2, #0
 80063ca:	6818      	ldr	r0, [r3, #0]
 80063cc:	fa00 f009 	lsl.w	r0, r0, r9
 80063d0:	4310      	orrs	r0, r2
 80063d2:	f84a 0b04 	str.w	r0, [sl], #4
 80063d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80063da:	459c      	cmp	ip, r3
 80063dc:	fa22 f20e 	lsr.w	r2, r2, lr
 80063e0:	d8f3      	bhi.n	80063ca <__lshift+0x6e>
 80063e2:	ebac 0304 	sub.w	r3, ip, r4
 80063e6:	3b15      	subs	r3, #21
 80063e8:	f023 0303 	bic.w	r3, r3, #3
 80063ec:	3304      	adds	r3, #4
 80063ee:	f104 0015 	add.w	r0, r4, #21
 80063f2:	4584      	cmp	ip, r0
 80063f4:	bf38      	it	cc
 80063f6:	2304      	movcc	r3, #4
 80063f8:	50ca      	str	r2, [r1, r3]
 80063fa:	b10a      	cbz	r2, 8006400 <__lshift+0xa4>
 80063fc:	f108 0602 	add.w	r6, r8, #2
 8006400:	3e01      	subs	r6, #1
 8006402:	4638      	mov	r0, r7
 8006404:	612e      	str	r6, [r5, #16]
 8006406:	4621      	mov	r1, r4
 8006408:	f7ff fdd8 	bl	8005fbc <_Bfree>
 800640c:	4628      	mov	r0, r5
 800640e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006412:	f842 0f04 	str.w	r0, [r2, #4]!
 8006416:	3301      	adds	r3, #1
 8006418:	e7c5      	b.n	80063a6 <__lshift+0x4a>
 800641a:	3904      	subs	r1, #4
 800641c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006420:	f841 2f04 	str.w	r2, [r1, #4]!
 8006424:	459c      	cmp	ip, r3
 8006426:	d8f9      	bhi.n	800641c <__lshift+0xc0>
 8006428:	e7ea      	b.n	8006400 <__lshift+0xa4>
 800642a:	bf00      	nop
 800642c:	08007cf0 	.word	0x08007cf0
 8006430:	08007d01 	.word	0x08007d01

08006434 <__mcmp>:
 8006434:	b530      	push	{r4, r5, lr}
 8006436:	6902      	ldr	r2, [r0, #16]
 8006438:	690c      	ldr	r4, [r1, #16]
 800643a:	1b12      	subs	r2, r2, r4
 800643c:	d10e      	bne.n	800645c <__mcmp+0x28>
 800643e:	f100 0314 	add.w	r3, r0, #20
 8006442:	3114      	adds	r1, #20
 8006444:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006448:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800644c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006450:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006454:	42a5      	cmp	r5, r4
 8006456:	d003      	beq.n	8006460 <__mcmp+0x2c>
 8006458:	d305      	bcc.n	8006466 <__mcmp+0x32>
 800645a:	2201      	movs	r2, #1
 800645c:	4610      	mov	r0, r2
 800645e:	bd30      	pop	{r4, r5, pc}
 8006460:	4283      	cmp	r3, r0
 8006462:	d3f3      	bcc.n	800644c <__mcmp+0x18>
 8006464:	e7fa      	b.n	800645c <__mcmp+0x28>
 8006466:	f04f 32ff 	mov.w	r2, #4294967295
 800646a:	e7f7      	b.n	800645c <__mcmp+0x28>

0800646c <__mdiff>:
 800646c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006470:	460c      	mov	r4, r1
 8006472:	4606      	mov	r6, r0
 8006474:	4611      	mov	r1, r2
 8006476:	4620      	mov	r0, r4
 8006478:	4690      	mov	r8, r2
 800647a:	f7ff ffdb 	bl	8006434 <__mcmp>
 800647e:	1e05      	subs	r5, r0, #0
 8006480:	d110      	bne.n	80064a4 <__mdiff+0x38>
 8006482:	4629      	mov	r1, r5
 8006484:	4630      	mov	r0, r6
 8006486:	f7ff fd59 	bl	8005f3c <_Balloc>
 800648a:	b930      	cbnz	r0, 800649a <__mdiff+0x2e>
 800648c:	4b3a      	ldr	r3, [pc, #232]	; (8006578 <__mdiff+0x10c>)
 800648e:	4602      	mov	r2, r0
 8006490:	f240 2137 	movw	r1, #567	; 0x237
 8006494:	4839      	ldr	r0, [pc, #228]	; (800657c <__mdiff+0x110>)
 8006496:	f000 fcd3 	bl	8006e40 <__assert_func>
 800649a:	2301      	movs	r3, #1
 800649c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80064a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064a4:	bfa4      	itt	ge
 80064a6:	4643      	movge	r3, r8
 80064a8:	46a0      	movge	r8, r4
 80064aa:	4630      	mov	r0, r6
 80064ac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80064b0:	bfa6      	itte	ge
 80064b2:	461c      	movge	r4, r3
 80064b4:	2500      	movge	r5, #0
 80064b6:	2501      	movlt	r5, #1
 80064b8:	f7ff fd40 	bl	8005f3c <_Balloc>
 80064bc:	b920      	cbnz	r0, 80064c8 <__mdiff+0x5c>
 80064be:	4b2e      	ldr	r3, [pc, #184]	; (8006578 <__mdiff+0x10c>)
 80064c0:	4602      	mov	r2, r0
 80064c2:	f240 2145 	movw	r1, #581	; 0x245
 80064c6:	e7e5      	b.n	8006494 <__mdiff+0x28>
 80064c8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80064cc:	6926      	ldr	r6, [r4, #16]
 80064ce:	60c5      	str	r5, [r0, #12]
 80064d0:	f104 0914 	add.w	r9, r4, #20
 80064d4:	f108 0514 	add.w	r5, r8, #20
 80064d8:	f100 0e14 	add.w	lr, r0, #20
 80064dc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80064e0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80064e4:	f108 0210 	add.w	r2, r8, #16
 80064e8:	46f2      	mov	sl, lr
 80064ea:	2100      	movs	r1, #0
 80064ec:	f859 3b04 	ldr.w	r3, [r9], #4
 80064f0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80064f4:	fa11 f88b 	uxtah	r8, r1, fp
 80064f8:	b299      	uxth	r1, r3
 80064fa:	0c1b      	lsrs	r3, r3, #16
 80064fc:	eba8 0801 	sub.w	r8, r8, r1
 8006500:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006504:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006508:	fa1f f888 	uxth.w	r8, r8
 800650c:	1419      	asrs	r1, r3, #16
 800650e:	454e      	cmp	r6, r9
 8006510:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006514:	f84a 3b04 	str.w	r3, [sl], #4
 8006518:	d8e8      	bhi.n	80064ec <__mdiff+0x80>
 800651a:	1b33      	subs	r3, r6, r4
 800651c:	3b15      	subs	r3, #21
 800651e:	f023 0303 	bic.w	r3, r3, #3
 8006522:	3304      	adds	r3, #4
 8006524:	3415      	adds	r4, #21
 8006526:	42a6      	cmp	r6, r4
 8006528:	bf38      	it	cc
 800652a:	2304      	movcc	r3, #4
 800652c:	441d      	add	r5, r3
 800652e:	4473      	add	r3, lr
 8006530:	469e      	mov	lr, r3
 8006532:	462e      	mov	r6, r5
 8006534:	4566      	cmp	r6, ip
 8006536:	d30e      	bcc.n	8006556 <__mdiff+0xea>
 8006538:	f10c 0203 	add.w	r2, ip, #3
 800653c:	1b52      	subs	r2, r2, r5
 800653e:	f022 0203 	bic.w	r2, r2, #3
 8006542:	3d03      	subs	r5, #3
 8006544:	45ac      	cmp	ip, r5
 8006546:	bf38      	it	cc
 8006548:	2200      	movcc	r2, #0
 800654a:	4413      	add	r3, r2
 800654c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006550:	b17a      	cbz	r2, 8006572 <__mdiff+0x106>
 8006552:	6107      	str	r7, [r0, #16]
 8006554:	e7a4      	b.n	80064a0 <__mdiff+0x34>
 8006556:	f856 8b04 	ldr.w	r8, [r6], #4
 800655a:	fa11 f288 	uxtah	r2, r1, r8
 800655e:	1414      	asrs	r4, r2, #16
 8006560:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006564:	b292      	uxth	r2, r2
 8006566:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800656a:	f84e 2b04 	str.w	r2, [lr], #4
 800656e:	1421      	asrs	r1, r4, #16
 8006570:	e7e0      	b.n	8006534 <__mdiff+0xc8>
 8006572:	3f01      	subs	r7, #1
 8006574:	e7ea      	b.n	800654c <__mdiff+0xe0>
 8006576:	bf00      	nop
 8006578:	08007cf0 	.word	0x08007cf0
 800657c:	08007d01 	.word	0x08007d01

08006580 <__d2b>:
 8006580:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006584:	460f      	mov	r7, r1
 8006586:	2101      	movs	r1, #1
 8006588:	ec59 8b10 	vmov	r8, r9, d0
 800658c:	4616      	mov	r6, r2
 800658e:	f7ff fcd5 	bl	8005f3c <_Balloc>
 8006592:	4604      	mov	r4, r0
 8006594:	b930      	cbnz	r0, 80065a4 <__d2b+0x24>
 8006596:	4602      	mov	r2, r0
 8006598:	4b24      	ldr	r3, [pc, #144]	; (800662c <__d2b+0xac>)
 800659a:	4825      	ldr	r0, [pc, #148]	; (8006630 <__d2b+0xb0>)
 800659c:	f240 310f 	movw	r1, #783	; 0x30f
 80065a0:	f000 fc4e 	bl	8006e40 <__assert_func>
 80065a4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80065a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80065ac:	bb2d      	cbnz	r5, 80065fa <__d2b+0x7a>
 80065ae:	9301      	str	r3, [sp, #4]
 80065b0:	f1b8 0300 	subs.w	r3, r8, #0
 80065b4:	d026      	beq.n	8006604 <__d2b+0x84>
 80065b6:	4668      	mov	r0, sp
 80065b8:	9300      	str	r3, [sp, #0]
 80065ba:	f7ff fd87 	bl	80060cc <__lo0bits>
 80065be:	e9dd 1200 	ldrd	r1, r2, [sp]
 80065c2:	b1e8      	cbz	r0, 8006600 <__d2b+0x80>
 80065c4:	f1c0 0320 	rsb	r3, r0, #32
 80065c8:	fa02 f303 	lsl.w	r3, r2, r3
 80065cc:	430b      	orrs	r3, r1
 80065ce:	40c2      	lsrs	r2, r0
 80065d0:	6163      	str	r3, [r4, #20]
 80065d2:	9201      	str	r2, [sp, #4]
 80065d4:	9b01      	ldr	r3, [sp, #4]
 80065d6:	61a3      	str	r3, [r4, #24]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	bf14      	ite	ne
 80065dc:	2202      	movne	r2, #2
 80065de:	2201      	moveq	r2, #1
 80065e0:	6122      	str	r2, [r4, #16]
 80065e2:	b1bd      	cbz	r5, 8006614 <__d2b+0x94>
 80065e4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80065e8:	4405      	add	r5, r0
 80065ea:	603d      	str	r5, [r7, #0]
 80065ec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80065f0:	6030      	str	r0, [r6, #0]
 80065f2:	4620      	mov	r0, r4
 80065f4:	b003      	add	sp, #12
 80065f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80065fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065fe:	e7d6      	b.n	80065ae <__d2b+0x2e>
 8006600:	6161      	str	r1, [r4, #20]
 8006602:	e7e7      	b.n	80065d4 <__d2b+0x54>
 8006604:	a801      	add	r0, sp, #4
 8006606:	f7ff fd61 	bl	80060cc <__lo0bits>
 800660a:	9b01      	ldr	r3, [sp, #4]
 800660c:	6163      	str	r3, [r4, #20]
 800660e:	3020      	adds	r0, #32
 8006610:	2201      	movs	r2, #1
 8006612:	e7e5      	b.n	80065e0 <__d2b+0x60>
 8006614:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006618:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800661c:	6038      	str	r0, [r7, #0]
 800661e:	6918      	ldr	r0, [r3, #16]
 8006620:	f7ff fd34 	bl	800608c <__hi0bits>
 8006624:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006628:	e7e2      	b.n	80065f0 <__d2b+0x70>
 800662a:	bf00      	nop
 800662c:	08007cf0 	.word	0x08007cf0
 8006630:	08007d01 	.word	0x08007d01

08006634 <__ssputs_r>:
 8006634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006638:	688e      	ldr	r6, [r1, #8]
 800663a:	461f      	mov	r7, r3
 800663c:	42be      	cmp	r6, r7
 800663e:	680b      	ldr	r3, [r1, #0]
 8006640:	4682      	mov	sl, r0
 8006642:	460c      	mov	r4, r1
 8006644:	4690      	mov	r8, r2
 8006646:	d82c      	bhi.n	80066a2 <__ssputs_r+0x6e>
 8006648:	898a      	ldrh	r2, [r1, #12]
 800664a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800664e:	d026      	beq.n	800669e <__ssputs_r+0x6a>
 8006650:	6965      	ldr	r5, [r4, #20]
 8006652:	6909      	ldr	r1, [r1, #16]
 8006654:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006658:	eba3 0901 	sub.w	r9, r3, r1
 800665c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006660:	1c7b      	adds	r3, r7, #1
 8006662:	444b      	add	r3, r9
 8006664:	106d      	asrs	r5, r5, #1
 8006666:	429d      	cmp	r5, r3
 8006668:	bf38      	it	cc
 800666a:	461d      	movcc	r5, r3
 800666c:	0553      	lsls	r3, r2, #21
 800666e:	d527      	bpl.n	80066c0 <__ssputs_r+0x8c>
 8006670:	4629      	mov	r1, r5
 8006672:	f7ff fbd7 	bl	8005e24 <_malloc_r>
 8006676:	4606      	mov	r6, r0
 8006678:	b360      	cbz	r0, 80066d4 <__ssputs_r+0xa0>
 800667a:	6921      	ldr	r1, [r4, #16]
 800667c:	464a      	mov	r2, r9
 800667e:	f000 fbd1 	bl	8006e24 <memcpy>
 8006682:	89a3      	ldrh	r3, [r4, #12]
 8006684:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800668c:	81a3      	strh	r3, [r4, #12]
 800668e:	6126      	str	r6, [r4, #16]
 8006690:	6165      	str	r5, [r4, #20]
 8006692:	444e      	add	r6, r9
 8006694:	eba5 0509 	sub.w	r5, r5, r9
 8006698:	6026      	str	r6, [r4, #0]
 800669a:	60a5      	str	r5, [r4, #8]
 800669c:	463e      	mov	r6, r7
 800669e:	42be      	cmp	r6, r7
 80066a0:	d900      	bls.n	80066a4 <__ssputs_r+0x70>
 80066a2:	463e      	mov	r6, r7
 80066a4:	6820      	ldr	r0, [r4, #0]
 80066a6:	4632      	mov	r2, r6
 80066a8:	4641      	mov	r1, r8
 80066aa:	f000 fb6f 	bl	8006d8c <memmove>
 80066ae:	68a3      	ldr	r3, [r4, #8]
 80066b0:	1b9b      	subs	r3, r3, r6
 80066b2:	60a3      	str	r3, [r4, #8]
 80066b4:	6823      	ldr	r3, [r4, #0]
 80066b6:	4433      	add	r3, r6
 80066b8:	6023      	str	r3, [r4, #0]
 80066ba:	2000      	movs	r0, #0
 80066bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066c0:	462a      	mov	r2, r5
 80066c2:	f000 fc03 	bl	8006ecc <_realloc_r>
 80066c6:	4606      	mov	r6, r0
 80066c8:	2800      	cmp	r0, #0
 80066ca:	d1e0      	bne.n	800668e <__ssputs_r+0x5a>
 80066cc:	6921      	ldr	r1, [r4, #16]
 80066ce:	4650      	mov	r0, sl
 80066d0:	f7ff fb34 	bl	8005d3c <_free_r>
 80066d4:	230c      	movs	r3, #12
 80066d6:	f8ca 3000 	str.w	r3, [sl]
 80066da:	89a3      	ldrh	r3, [r4, #12]
 80066dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066e0:	81a3      	strh	r3, [r4, #12]
 80066e2:	f04f 30ff 	mov.w	r0, #4294967295
 80066e6:	e7e9      	b.n	80066bc <__ssputs_r+0x88>

080066e8 <_svfiprintf_r>:
 80066e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066ec:	4698      	mov	r8, r3
 80066ee:	898b      	ldrh	r3, [r1, #12]
 80066f0:	061b      	lsls	r3, r3, #24
 80066f2:	b09d      	sub	sp, #116	; 0x74
 80066f4:	4607      	mov	r7, r0
 80066f6:	460d      	mov	r5, r1
 80066f8:	4614      	mov	r4, r2
 80066fa:	d50e      	bpl.n	800671a <_svfiprintf_r+0x32>
 80066fc:	690b      	ldr	r3, [r1, #16]
 80066fe:	b963      	cbnz	r3, 800671a <_svfiprintf_r+0x32>
 8006700:	2140      	movs	r1, #64	; 0x40
 8006702:	f7ff fb8f 	bl	8005e24 <_malloc_r>
 8006706:	6028      	str	r0, [r5, #0]
 8006708:	6128      	str	r0, [r5, #16]
 800670a:	b920      	cbnz	r0, 8006716 <_svfiprintf_r+0x2e>
 800670c:	230c      	movs	r3, #12
 800670e:	603b      	str	r3, [r7, #0]
 8006710:	f04f 30ff 	mov.w	r0, #4294967295
 8006714:	e0d0      	b.n	80068b8 <_svfiprintf_r+0x1d0>
 8006716:	2340      	movs	r3, #64	; 0x40
 8006718:	616b      	str	r3, [r5, #20]
 800671a:	2300      	movs	r3, #0
 800671c:	9309      	str	r3, [sp, #36]	; 0x24
 800671e:	2320      	movs	r3, #32
 8006720:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006724:	f8cd 800c 	str.w	r8, [sp, #12]
 8006728:	2330      	movs	r3, #48	; 0x30
 800672a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80068d0 <_svfiprintf_r+0x1e8>
 800672e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006732:	f04f 0901 	mov.w	r9, #1
 8006736:	4623      	mov	r3, r4
 8006738:	469a      	mov	sl, r3
 800673a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800673e:	b10a      	cbz	r2, 8006744 <_svfiprintf_r+0x5c>
 8006740:	2a25      	cmp	r2, #37	; 0x25
 8006742:	d1f9      	bne.n	8006738 <_svfiprintf_r+0x50>
 8006744:	ebba 0b04 	subs.w	fp, sl, r4
 8006748:	d00b      	beq.n	8006762 <_svfiprintf_r+0x7a>
 800674a:	465b      	mov	r3, fp
 800674c:	4622      	mov	r2, r4
 800674e:	4629      	mov	r1, r5
 8006750:	4638      	mov	r0, r7
 8006752:	f7ff ff6f 	bl	8006634 <__ssputs_r>
 8006756:	3001      	adds	r0, #1
 8006758:	f000 80a9 	beq.w	80068ae <_svfiprintf_r+0x1c6>
 800675c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800675e:	445a      	add	r2, fp
 8006760:	9209      	str	r2, [sp, #36]	; 0x24
 8006762:	f89a 3000 	ldrb.w	r3, [sl]
 8006766:	2b00      	cmp	r3, #0
 8006768:	f000 80a1 	beq.w	80068ae <_svfiprintf_r+0x1c6>
 800676c:	2300      	movs	r3, #0
 800676e:	f04f 32ff 	mov.w	r2, #4294967295
 8006772:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006776:	f10a 0a01 	add.w	sl, sl, #1
 800677a:	9304      	str	r3, [sp, #16]
 800677c:	9307      	str	r3, [sp, #28]
 800677e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006782:	931a      	str	r3, [sp, #104]	; 0x68
 8006784:	4654      	mov	r4, sl
 8006786:	2205      	movs	r2, #5
 8006788:	f814 1b01 	ldrb.w	r1, [r4], #1
 800678c:	4850      	ldr	r0, [pc, #320]	; (80068d0 <_svfiprintf_r+0x1e8>)
 800678e:	f7f9 fd27 	bl	80001e0 <memchr>
 8006792:	9a04      	ldr	r2, [sp, #16]
 8006794:	b9d8      	cbnz	r0, 80067ce <_svfiprintf_r+0xe6>
 8006796:	06d0      	lsls	r0, r2, #27
 8006798:	bf44      	itt	mi
 800679a:	2320      	movmi	r3, #32
 800679c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067a0:	0711      	lsls	r1, r2, #28
 80067a2:	bf44      	itt	mi
 80067a4:	232b      	movmi	r3, #43	; 0x2b
 80067a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067aa:	f89a 3000 	ldrb.w	r3, [sl]
 80067ae:	2b2a      	cmp	r3, #42	; 0x2a
 80067b0:	d015      	beq.n	80067de <_svfiprintf_r+0xf6>
 80067b2:	9a07      	ldr	r2, [sp, #28]
 80067b4:	4654      	mov	r4, sl
 80067b6:	2000      	movs	r0, #0
 80067b8:	f04f 0c0a 	mov.w	ip, #10
 80067bc:	4621      	mov	r1, r4
 80067be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80067c2:	3b30      	subs	r3, #48	; 0x30
 80067c4:	2b09      	cmp	r3, #9
 80067c6:	d94d      	bls.n	8006864 <_svfiprintf_r+0x17c>
 80067c8:	b1b0      	cbz	r0, 80067f8 <_svfiprintf_r+0x110>
 80067ca:	9207      	str	r2, [sp, #28]
 80067cc:	e014      	b.n	80067f8 <_svfiprintf_r+0x110>
 80067ce:	eba0 0308 	sub.w	r3, r0, r8
 80067d2:	fa09 f303 	lsl.w	r3, r9, r3
 80067d6:	4313      	orrs	r3, r2
 80067d8:	9304      	str	r3, [sp, #16]
 80067da:	46a2      	mov	sl, r4
 80067dc:	e7d2      	b.n	8006784 <_svfiprintf_r+0x9c>
 80067de:	9b03      	ldr	r3, [sp, #12]
 80067e0:	1d19      	adds	r1, r3, #4
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	9103      	str	r1, [sp, #12]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	bfbb      	ittet	lt
 80067ea:	425b      	neglt	r3, r3
 80067ec:	f042 0202 	orrlt.w	r2, r2, #2
 80067f0:	9307      	strge	r3, [sp, #28]
 80067f2:	9307      	strlt	r3, [sp, #28]
 80067f4:	bfb8      	it	lt
 80067f6:	9204      	strlt	r2, [sp, #16]
 80067f8:	7823      	ldrb	r3, [r4, #0]
 80067fa:	2b2e      	cmp	r3, #46	; 0x2e
 80067fc:	d10c      	bne.n	8006818 <_svfiprintf_r+0x130>
 80067fe:	7863      	ldrb	r3, [r4, #1]
 8006800:	2b2a      	cmp	r3, #42	; 0x2a
 8006802:	d134      	bne.n	800686e <_svfiprintf_r+0x186>
 8006804:	9b03      	ldr	r3, [sp, #12]
 8006806:	1d1a      	adds	r2, r3, #4
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	9203      	str	r2, [sp, #12]
 800680c:	2b00      	cmp	r3, #0
 800680e:	bfb8      	it	lt
 8006810:	f04f 33ff 	movlt.w	r3, #4294967295
 8006814:	3402      	adds	r4, #2
 8006816:	9305      	str	r3, [sp, #20]
 8006818:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80068e0 <_svfiprintf_r+0x1f8>
 800681c:	7821      	ldrb	r1, [r4, #0]
 800681e:	2203      	movs	r2, #3
 8006820:	4650      	mov	r0, sl
 8006822:	f7f9 fcdd 	bl	80001e0 <memchr>
 8006826:	b138      	cbz	r0, 8006838 <_svfiprintf_r+0x150>
 8006828:	9b04      	ldr	r3, [sp, #16]
 800682a:	eba0 000a 	sub.w	r0, r0, sl
 800682e:	2240      	movs	r2, #64	; 0x40
 8006830:	4082      	lsls	r2, r0
 8006832:	4313      	orrs	r3, r2
 8006834:	3401      	adds	r4, #1
 8006836:	9304      	str	r3, [sp, #16]
 8006838:	f814 1b01 	ldrb.w	r1, [r4], #1
 800683c:	4825      	ldr	r0, [pc, #148]	; (80068d4 <_svfiprintf_r+0x1ec>)
 800683e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006842:	2206      	movs	r2, #6
 8006844:	f7f9 fccc 	bl	80001e0 <memchr>
 8006848:	2800      	cmp	r0, #0
 800684a:	d038      	beq.n	80068be <_svfiprintf_r+0x1d6>
 800684c:	4b22      	ldr	r3, [pc, #136]	; (80068d8 <_svfiprintf_r+0x1f0>)
 800684e:	bb1b      	cbnz	r3, 8006898 <_svfiprintf_r+0x1b0>
 8006850:	9b03      	ldr	r3, [sp, #12]
 8006852:	3307      	adds	r3, #7
 8006854:	f023 0307 	bic.w	r3, r3, #7
 8006858:	3308      	adds	r3, #8
 800685a:	9303      	str	r3, [sp, #12]
 800685c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800685e:	4433      	add	r3, r6
 8006860:	9309      	str	r3, [sp, #36]	; 0x24
 8006862:	e768      	b.n	8006736 <_svfiprintf_r+0x4e>
 8006864:	fb0c 3202 	mla	r2, ip, r2, r3
 8006868:	460c      	mov	r4, r1
 800686a:	2001      	movs	r0, #1
 800686c:	e7a6      	b.n	80067bc <_svfiprintf_r+0xd4>
 800686e:	2300      	movs	r3, #0
 8006870:	3401      	adds	r4, #1
 8006872:	9305      	str	r3, [sp, #20]
 8006874:	4619      	mov	r1, r3
 8006876:	f04f 0c0a 	mov.w	ip, #10
 800687a:	4620      	mov	r0, r4
 800687c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006880:	3a30      	subs	r2, #48	; 0x30
 8006882:	2a09      	cmp	r2, #9
 8006884:	d903      	bls.n	800688e <_svfiprintf_r+0x1a6>
 8006886:	2b00      	cmp	r3, #0
 8006888:	d0c6      	beq.n	8006818 <_svfiprintf_r+0x130>
 800688a:	9105      	str	r1, [sp, #20]
 800688c:	e7c4      	b.n	8006818 <_svfiprintf_r+0x130>
 800688e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006892:	4604      	mov	r4, r0
 8006894:	2301      	movs	r3, #1
 8006896:	e7f0      	b.n	800687a <_svfiprintf_r+0x192>
 8006898:	ab03      	add	r3, sp, #12
 800689a:	9300      	str	r3, [sp, #0]
 800689c:	462a      	mov	r2, r5
 800689e:	4b0f      	ldr	r3, [pc, #60]	; (80068dc <_svfiprintf_r+0x1f4>)
 80068a0:	a904      	add	r1, sp, #16
 80068a2:	4638      	mov	r0, r7
 80068a4:	f7fd fd4c 	bl	8004340 <_printf_float>
 80068a8:	1c42      	adds	r2, r0, #1
 80068aa:	4606      	mov	r6, r0
 80068ac:	d1d6      	bne.n	800685c <_svfiprintf_r+0x174>
 80068ae:	89ab      	ldrh	r3, [r5, #12]
 80068b0:	065b      	lsls	r3, r3, #25
 80068b2:	f53f af2d 	bmi.w	8006710 <_svfiprintf_r+0x28>
 80068b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80068b8:	b01d      	add	sp, #116	; 0x74
 80068ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068be:	ab03      	add	r3, sp, #12
 80068c0:	9300      	str	r3, [sp, #0]
 80068c2:	462a      	mov	r2, r5
 80068c4:	4b05      	ldr	r3, [pc, #20]	; (80068dc <_svfiprintf_r+0x1f4>)
 80068c6:	a904      	add	r1, sp, #16
 80068c8:	4638      	mov	r0, r7
 80068ca:	f7fd ffdd 	bl	8004888 <_printf_i>
 80068ce:	e7eb      	b.n	80068a8 <_svfiprintf_r+0x1c0>
 80068d0:	08007e5c 	.word	0x08007e5c
 80068d4:	08007e66 	.word	0x08007e66
 80068d8:	08004341 	.word	0x08004341
 80068dc:	08006635 	.word	0x08006635
 80068e0:	08007e62 	.word	0x08007e62

080068e4 <__sfputc_r>:
 80068e4:	6893      	ldr	r3, [r2, #8]
 80068e6:	3b01      	subs	r3, #1
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	b410      	push	{r4}
 80068ec:	6093      	str	r3, [r2, #8]
 80068ee:	da08      	bge.n	8006902 <__sfputc_r+0x1e>
 80068f0:	6994      	ldr	r4, [r2, #24]
 80068f2:	42a3      	cmp	r3, r4
 80068f4:	db01      	blt.n	80068fa <__sfputc_r+0x16>
 80068f6:	290a      	cmp	r1, #10
 80068f8:	d103      	bne.n	8006902 <__sfputc_r+0x1e>
 80068fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80068fe:	f7fe ba8c 	b.w	8004e1a <__swbuf_r>
 8006902:	6813      	ldr	r3, [r2, #0]
 8006904:	1c58      	adds	r0, r3, #1
 8006906:	6010      	str	r0, [r2, #0]
 8006908:	7019      	strb	r1, [r3, #0]
 800690a:	4608      	mov	r0, r1
 800690c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006910:	4770      	bx	lr

08006912 <__sfputs_r>:
 8006912:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006914:	4606      	mov	r6, r0
 8006916:	460f      	mov	r7, r1
 8006918:	4614      	mov	r4, r2
 800691a:	18d5      	adds	r5, r2, r3
 800691c:	42ac      	cmp	r4, r5
 800691e:	d101      	bne.n	8006924 <__sfputs_r+0x12>
 8006920:	2000      	movs	r0, #0
 8006922:	e007      	b.n	8006934 <__sfputs_r+0x22>
 8006924:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006928:	463a      	mov	r2, r7
 800692a:	4630      	mov	r0, r6
 800692c:	f7ff ffda 	bl	80068e4 <__sfputc_r>
 8006930:	1c43      	adds	r3, r0, #1
 8006932:	d1f3      	bne.n	800691c <__sfputs_r+0xa>
 8006934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006938 <_vfiprintf_r>:
 8006938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800693c:	460d      	mov	r5, r1
 800693e:	b09d      	sub	sp, #116	; 0x74
 8006940:	4614      	mov	r4, r2
 8006942:	4698      	mov	r8, r3
 8006944:	4606      	mov	r6, r0
 8006946:	b118      	cbz	r0, 8006950 <_vfiprintf_r+0x18>
 8006948:	6a03      	ldr	r3, [r0, #32]
 800694a:	b90b      	cbnz	r3, 8006950 <_vfiprintf_r+0x18>
 800694c:	f7fe f94a 	bl	8004be4 <__sinit>
 8006950:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006952:	07d9      	lsls	r1, r3, #31
 8006954:	d405      	bmi.n	8006962 <_vfiprintf_r+0x2a>
 8006956:	89ab      	ldrh	r3, [r5, #12]
 8006958:	059a      	lsls	r2, r3, #22
 800695a:	d402      	bmi.n	8006962 <_vfiprintf_r+0x2a>
 800695c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800695e:	f7fe fb6e 	bl	800503e <__retarget_lock_acquire_recursive>
 8006962:	89ab      	ldrh	r3, [r5, #12]
 8006964:	071b      	lsls	r3, r3, #28
 8006966:	d501      	bpl.n	800696c <_vfiprintf_r+0x34>
 8006968:	692b      	ldr	r3, [r5, #16]
 800696a:	b99b      	cbnz	r3, 8006994 <_vfiprintf_r+0x5c>
 800696c:	4629      	mov	r1, r5
 800696e:	4630      	mov	r0, r6
 8006970:	f7fe fa90 	bl	8004e94 <__swsetup_r>
 8006974:	b170      	cbz	r0, 8006994 <_vfiprintf_r+0x5c>
 8006976:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006978:	07dc      	lsls	r4, r3, #31
 800697a:	d504      	bpl.n	8006986 <_vfiprintf_r+0x4e>
 800697c:	f04f 30ff 	mov.w	r0, #4294967295
 8006980:	b01d      	add	sp, #116	; 0x74
 8006982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006986:	89ab      	ldrh	r3, [r5, #12]
 8006988:	0598      	lsls	r0, r3, #22
 800698a:	d4f7      	bmi.n	800697c <_vfiprintf_r+0x44>
 800698c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800698e:	f7fe fb57 	bl	8005040 <__retarget_lock_release_recursive>
 8006992:	e7f3      	b.n	800697c <_vfiprintf_r+0x44>
 8006994:	2300      	movs	r3, #0
 8006996:	9309      	str	r3, [sp, #36]	; 0x24
 8006998:	2320      	movs	r3, #32
 800699a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800699e:	f8cd 800c 	str.w	r8, [sp, #12]
 80069a2:	2330      	movs	r3, #48	; 0x30
 80069a4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006b58 <_vfiprintf_r+0x220>
 80069a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80069ac:	f04f 0901 	mov.w	r9, #1
 80069b0:	4623      	mov	r3, r4
 80069b2:	469a      	mov	sl, r3
 80069b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80069b8:	b10a      	cbz	r2, 80069be <_vfiprintf_r+0x86>
 80069ba:	2a25      	cmp	r2, #37	; 0x25
 80069bc:	d1f9      	bne.n	80069b2 <_vfiprintf_r+0x7a>
 80069be:	ebba 0b04 	subs.w	fp, sl, r4
 80069c2:	d00b      	beq.n	80069dc <_vfiprintf_r+0xa4>
 80069c4:	465b      	mov	r3, fp
 80069c6:	4622      	mov	r2, r4
 80069c8:	4629      	mov	r1, r5
 80069ca:	4630      	mov	r0, r6
 80069cc:	f7ff ffa1 	bl	8006912 <__sfputs_r>
 80069d0:	3001      	adds	r0, #1
 80069d2:	f000 80a9 	beq.w	8006b28 <_vfiprintf_r+0x1f0>
 80069d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069d8:	445a      	add	r2, fp
 80069da:	9209      	str	r2, [sp, #36]	; 0x24
 80069dc:	f89a 3000 	ldrb.w	r3, [sl]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	f000 80a1 	beq.w	8006b28 <_vfiprintf_r+0x1f0>
 80069e6:	2300      	movs	r3, #0
 80069e8:	f04f 32ff 	mov.w	r2, #4294967295
 80069ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80069f0:	f10a 0a01 	add.w	sl, sl, #1
 80069f4:	9304      	str	r3, [sp, #16]
 80069f6:	9307      	str	r3, [sp, #28]
 80069f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80069fc:	931a      	str	r3, [sp, #104]	; 0x68
 80069fe:	4654      	mov	r4, sl
 8006a00:	2205      	movs	r2, #5
 8006a02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a06:	4854      	ldr	r0, [pc, #336]	; (8006b58 <_vfiprintf_r+0x220>)
 8006a08:	f7f9 fbea 	bl	80001e0 <memchr>
 8006a0c:	9a04      	ldr	r2, [sp, #16]
 8006a0e:	b9d8      	cbnz	r0, 8006a48 <_vfiprintf_r+0x110>
 8006a10:	06d1      	lsls	r1, r2, #27
 8006a12:	bf44      	itt	mi
 8006a14:	2320      	movmi	r3, #32
 8006a16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a1a:	0713      	lsls	r3, r2, #28
 8006a1c:	bf44      	itt	mi
 8006a1e:	232b      	movmi	r3, #43	; 0x2b
 8006a20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a24:	f89a 3000 	ldrb.w	r3, [sl]
 8006a28:	2b2a      	cmp	r3, #42	; 0x2a
 8006a2a:	d015      	beq.n	8006a58 <_vfiprintf_r+0x120>
 8006a2c:	9a07      	ldr	r2, [sp, #28]
 8006a2e:	4654      	mov	r4, sl
 8006a30:	2000      	movs	r0, #0
 8006a32:	f04f 0c0a 	mov.w	ip, #10
 8006a36:	4621      	mov	r1, r4
 8006a38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a3c:	3b30      	subs	r3, #48	; 0x30
 8006a3e:	2b09      	cmp	r3, #9
 8006a40:	d94d      	bls.n	8006ade <_vfiprintf_r+0x1a6>
 8006a42:	b1b0      	cbz	r0, 8006a72 <_vfiprintf_r+0x13a>
 8006a44:	9207      	str	r2, [sp, #28]
 8006a46:	e014      	b.n	8006a72 <_vfiprintf_r+0x13a>
 8006a48:	eba0 0308 	sub.w	r3, r0, r8
 8006a4c:	fa09 f303 	lsl.w	r3, r9, r3
 8006a50:	4313      	orrs	r3, r2
 8006a52:	9304      	str	r3, [sp, #16]
 8006a54:	46a2      	mov	sl, r4
 8006a56:	e7d2      	b.n	80069fe <_vfiprintf_r+0xc6>
 8006a58:	9b03      	ldr	r3, [sp, #12]
 8006a5a:	1d19      	adds	r1, r3, #4
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	9103      	str	r1, [sp, #12]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	bfbb      	ittet	lt
 8006a64:	425b      	neglt	r3, r3
 8006a66:	f042 0202 	orrlt.w	r2, r2, #2
 8006a6a:	9307      	strge	r3, [sp, #28]
 8006a6c:	9307      	strlt	r3, [sp, #28]
 8006a6e:	bfb8      	it	lt
 8006a70:	9204      	strlt	r2, [sp, #16]
 8006a72:	7823      	ldrb	r3, [r4, #0]
 8006a74:	2b2e      	cmp	r3, #46	; 0x2e
 8006a76:	d10c      	bne.n	8006a92 <_vfiprintf_r+0x15a>
 8006a78:	7863      	ldrb	r3, [r4, #1]
 8006a7a:	2b2a      	cmp	r3, #42	; 0x2a
 8006a7c:	d134      	bne.n	8006ae8 <_vfiprintf_r+0x1b0>
 8006a7e:	9b03      	ldr	r3, [sp, #12]
 8006a80:	1d1a      	adds	r2, r3, #4
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	9203      	str	r2, [sp, #12]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	bfb8      	it	lt
 8006a8a:	f04f 33ff 	movlt.w	r3, #4294967295
 8006a8e:	3402      	adds	r4, #2
 8006a90:	9305      	str	r3, [sp, #20]
 8006a92:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006b68 <_vfiprintf_r+0x230>
 8006a96:	7821      	ldrb	r1, [r4, #0]
 8006a98:	2203      	movs	r2, #3
 8006a9a:	4650      	mov	r0, sl
 8006a9c:	f7f9 fba0 	bl	80001e0 <memchr>
 8006aa0:	b138      	cbz	r0, 8006ab2 <_vfiprintf_r+0x17a>
 8006aa2:	9b04      	ldr	r3, [sp, #16]
 8006aa4:	eba0 000a 	sub.w	r0, r0, sl
 8006aa8:	2240      	movs	r2, #64	; 0x40
 8006aaa:	4082      	lsls	r2, r0
 8006aac:	4313      	orrs	r3, r2
 8006aae:	3401      	adds	r4, #1
 8006ab0:	9304      	str	r3, [sp, #16]
 8006ab2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ab6:	4829      	ldr	r0, [pc, #164]	; (8006b5c <_vfiprintf_r+0x224>)
 8006ab8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006abc:	2206      	movs	r2, #6
 8006abe:	f7f9 fb8f 	bl	80001e0 <memchr>
 8006ac2:	2800      	cmp	r0, #0
 8006ac4:	d03f      	beq.n	8006b46 <_vfiprintf_r+0x20e>
 8006ac6:	4b26      	ldr	r3, [pc, #152]	; (8006b60 <_vfiprintf_r+0x228>)
 8006ac8:	bb1b      	cbnz	r3, 8006b12 <_vfiprintf_r+0x1da>
 8006aca:	9b03      	ldr	r3, [sp, #12]
 8006acc:	3307      	adds	r3, #7
 8006ace:	f023 0307 	bic.w	r3, r3, #7
 8006ad2:	3308      	adds	r3, #8
 8006ad4:	9303      	str	r3, [sp, #12]
 8006ad6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ad8:	443b      	add	r3, r7
 8006ada:	9309      	str	r3, [sp, #36]	; 0x24
 8006adc:	e768      	b.n	80069b0 <_vfiprintf_r+0x78>
 8006ade:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ae2:	460c      	mov	r4, r1
 8006ae4:	2001      	movs	r0, #1
 8006ae6:	e7a6      	b.n	8006a36 <_vfiprintf_r+0xfe>
 8006ae8:	2300      	movs	r3, #0
 8006aea:	3401      	adds	r4, #1
 8006aec:	9305      	str	r3, [sp, #20]
 8006aee:	4619      	mov	r1, r3
 8006af0:	f04f 0c0a 	mov.w	ip, #10
 8006af4:	4620      	mov	r0, r4
 8006af6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006afa:	3a30      	subs	r2, #48	; 0x30
 8006afc:	2a09      	cmp	r2, #9
 8006afe:	d903      	bls.n	8006b08 <_vfiprintf_r+0x1d0>
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d0c6      	beq.n	8006a92 <_vfiprintf_r+0x15a>
 8006b04:	9105      	str	r1, [sp, #20]
 8006b06:	e7c4      	b.n	8006a92 <_vfiprintf_r+0x15a>
 8006b08:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b0c:	4604      	mov	r4, r0
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e7f0      	b.n	8006af4 <_vfiprintf_r+0x1bc>
 8006b12:	ab03      	add	r3, sp, #12
 8006b14:	9300      	str	r3, [sp, #0]
 8006b16:	462a      	mov	r2, r5
 8006b18:	4b12      	ldr	r3, [pc, #72]	; (8006b64 <_vfiprintf_r+0x22c>)
 8006b1a:	a904      	add	r1, sp, #16
 8006b1c:	4630      	mov	r0, r6
 8006b1e:	f7fd fc0f 	bl	8004340 <_printf_float>
 8006b22:	4607      	mov	r7, r0
 8006b24:	1c78      	adds	r0, r7, #1
 8006b26:	d1d6      	bne.n	8006ad6 <_vfiprintf_r+0x19e>
 8006b28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b2a:	07d9      	lsls	r1, r3, #31
 8006b2c:	d405      	bmi.n	8006b3a <_vfiprintf_r+0x202>
 8006b2e:	89ab      	ldrh	r3, [r5, #12]
 8006b30:	059a      	lsls	r2, r3, #22
 8006b32:	d402      	bmi.n	8006b3a <_vfiprintf_r+0x202>
 8006b34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b36:	f7fe fa83 	bl	8005040 <__retarget_lock_release_recursive>
 8006b3a:	89ab      	ldrh	r3, [r5, #12]
 8006b3c:	065b      	lsls	r3, r3, #25
 8006b3e:	f53f af1d 	bmi.w	800697c <_vfiprintf_r+0x44>
 8006b42:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b44:	e71c      	b.n	8006980 <_vfiprintf_r+0x48>
 8006b46:	ab03      	add	r3, sp, #12
 8006b48:	9300      	str	r3, [sp, #0]
 8006b4a:	462a      	mov	r2, r5
 8006b4c:	4b05      	ldr	r3, [pc, #20]	; (8006b64 <_vfiprintf_r+0x22c>)
 8006b4e:	a904      	add	r1, sp, #16
 8006b50:	4630      	mov	r0, r6
 8006b52:	f7fd fe99 	bl	8004888 <_printf_i>
 8006b56:	e7e4      	b.n	8006b22 <_vfiprintf_r+0x1ea>
 8006b58:	08007e5c 	.word	0x08007e5c
 8006b5c:	08007e66 	.word	0x08007e66
 8006b60:	08004341 	.word	0x08004341
 8006b64:	08006913 	.word	0x08006913
 8006b68:	08007e62 	.word	0x08007e62

08006b6c <__sflush_r>:
 8006b6c:	898a      	ldrh	r2, [r1, #12]
 8006b6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b72:	4605      	mov	r5, r0
 8006b74:	0710      	lsls	r0, r2, #28
 8006b76:	460c      	mov	r4, r1
 8006b78:	d458      	bmi.n	8006c2c <__sflush_r+0xc0>
 8006b7a:	684b      	ldr	r3, [r1, #4]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	dc05      	bgt.n	8006b8c <__sflush_r+0x20>
 8006b80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	dc02      	bgt.n	8006b8c <__sflush_r+0x20>
 8006b86:	2000      	movs	r0, #0
 8006b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b8e:	2e00      	cmp	r6, #0
 8006b90:	d0f9      	beq.n	8006b86 <__sflush_r+0x1a>
 8006b92:	2300      	movs	r3, #0
 8006b94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006b98:	682f      	ldr	r7, [r5, #0]
 8006b9a:	6a21      	ldr	r1, [r4, #32]
 8006b9c:	602b      	str	r3, [r5, #0]
 8006b9e:	d032      	beq.n	8006c06 <__sflush_r+0x9a>
 8006ba0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006ba2:	89a3      	ldrh	r3, [r4, #12]
 8006ba4:	075a      	lsls	r2, r3, #29
 8006ba6:	d505      	bpl.n	8006bb4 <__sflush_r+0x48>
 8006ba8:	6863      	ldr	r3, [r4, #4]
 8006baa:	1ac0      	subs	r0, r0, r3
 8006bac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006bae:	b10b      	cbz	r3, 8006bb4 <__sflush_r+0x48>
 8006bb0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006bb2:	1ac0      	subs	r0, r0, r3
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	4602      	mov	r2, r0
 8006bb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006bba:	6a21      	ldr	r1, [r4, #32]
 8006bbc:	4628      	mov	r0, r5
 8006bbe:	47b0      	blx	r6
 8006bc0:	1c43      	adds	r3, r0, #1
 8006bc2:	89a3      	ldrh	r3, [r4, #12]
 8006bc4:	d106      	bne.n	8006bd4 <__sflush_r+0x68>
 8006bc6:	6829      	ldr	r1, [r5, #0]
 8006bc8:	291d      	cmp	r1, #29
 8006bca:	d82b      	bhi.n	8006c24 <__sflush_r+0xb8>
 8006bcc:	4a29      	ldr	r2, [pc, #164]	; (8006c74 <__sflush_r+0x108>)
 8006bce:	410a      	asrs	r2, r1
 8006bd0:	07d6      	lsls	r6, r2, #31
 8006bd2:	d427      	bmi.n	8006c24 <__sflush_r+0xb8>
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	6062      	str	r2, [r4, #4]
 8006bd8:	04d9      	lsls	r1, r3, #19
 8006bda:	6922      	ldr	r2, [r4, #16]
 8006bdc:	6022      	str	r2, [r4, #0]
 8006bde:	d504      	bpl.n	8006bea <__sflush_r+0x7e>
 8006be0:	1c42      	adds	r2, r0, #1
 8006be2:	d101      	bne.n	8006be8 <__sflush_r+0x7c>
 8006be4:	682b      	ldr	r3, [r5, #0]
 8006be6:	b903      	cbnz	r3, 8006bea <__sflush_r+0x7e>
 8006be8:	6560      	str	r0, [r4, #84]	; 0x54
 8006bea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006bec:	602f      	str	r7, [r5, #0]
 8006bee:	2900      	cmp	r1, #0
 8006bf0:	d0c9      	beq.n	8006b86 <__sflush_r+0x1a>
 8006bf2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006bf6:	4299      	cmp	r1, r3
 8006bf8:	d002      	beq.n	8006c00 <__sflush_r+0x94>
 8006bfa:	4628      	mov	r0, r5
 8006bfc:	f7ff f89e 	bl	8005d3c <_free_r>
 8006c00:	2000      	movs	r0, #0
 8006c02:	6360      	str	r0, [r4, #52]	; 0x34
 8006c04:	e7c0      	b.n	8006b88 <__sflush_r+0x1c>
 8006c06:	2301      	movs	r3, #1
 8006c08:	4628      	mov	r0, r5
 8006c0a:	47b0      	blx	r6
 8006c0c:	1c41      	adds	r1, r0, #1
 8006c0e:	d1c8      	bne.n	8006ba2 <__sflush_r+0x36>
 8006c10:	682b      	ldr	r3, [r5, #0]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d0c5      	beq.n	8006ba2 <__sflush_r+0x36>
 8006c16:	2b1d      	cmp	r3, #29
 8006c18:	d001      	beq.n	8006c1e <__sflush_r+0xb2>
 8006c1a:	2b16      	cmp	r3, #22
 8006c1c:	d101      	bne.n	8006c22 <__sflush_r+0xb6>
 8006c1e:	602f      	str	r7, [r5, #0]
 8006c20:	e7b1      	b.n	8006b86 <__sflush_r+0x1a>
 8006c22:	89a3      	ldrh	r3, [r4, #12]
 8006c24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c28:	81a3      	strh	r3, [r4, #12]
 8006c2a:	e7ad      	b.n	8006b88 <__sflush_r+0x1c>
 8006c2c:	690f      	ldr	r7, [r1, #16]
 8006c2e:	2f00      	cmp	r7, #0
 8006c30:	d0a9      	beq.n	8006b86 <__sflush_r+0x1a>
 8006c32:	0793      	lsls	r3, r2, #30
 8006c34:	680e      	ldr	r6, [r1, #0]
 8006c36:	bf08      	it	eq
 8006c38:	694b      	ldreq	r3, [r1, #20]
 8006c3a:	600f      	str	r7, [r1, #0]
 8006c3c:	bf18      	it	ne
 8006c3e:	2300      	movne	r3, #0
 8006c40:	eba6 0807 	sub.w	r8, r6, r7
 8006c44:	608b      	str	r3, [r1, #8]
 8006c46:	f1b8 0f00 	cmp.w	r8, #0
 8006c4a:	dd9c      	ble.n	8006b86 <__sflush_r+0x1a>
 8006c4c:	6a21      	ldr	r1, [r4, #32]
 8006c4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006c50:	4643      	mov	r3, r8
 8006c52:	463a      	mov	r2, r7
 8006c54:	4628      	mov	r0, r5
 8006c56:	47b0      	blx	r6
 8006c58:	2800      	cmp	r0, #0
 8006c5a:	dc06      	bgt.n	8006c6a <__sflush_r+0xfe>
 8006c5c:	89a3      	ldrh	r3, [r4, #12]
 8006c5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c62:	81a3      	strh	r3, [r4, #12]
 8006c64:	f04f 30ff 	mov.w	r0, #4294967295
 8006c68:	e78e      	b.n	8006b88 <__sflush_r+0x1c>
 8006c6a:	4407      	add	r7, r0
 8006c6c:	eba8 0800 	sub.w	r8, r8, r0
 8006c70:	e7e9      	b.n	8006c46 <__sflush_r+0xda>
 8006c72:	bf00      	nop
 8006c74:	dfbffffe 	.word	0xdfbffffe

08006c78 <_fflush_r>:
 8006c78:	b538      	push	{r3, r4, r5, lr}
 8006c7a:	690b      	ldr	r3, [r1, #16]
 8006c7c:	4605      	mov	r5, r0
 8006c7e:	460c      	mov	r4, r1
 8006c80:	b913      	cbnz	r3, 8006c88 <_fflush_r+0x10>
 8006c82:	2500      	movs	r5, #0
 8006c84:	4628      	mov	r0, r5
 8006c86:	bd38      	pop	{r3, r4, r5, pc}
 8006c88:	b118      	cbz	r0, 8006c92 <_fflush_r+0x1a>
 8006c8a:	6a03      	ldr	r3, [r0, #32]
 8006c8c:	b90b      	cbnz	r3, 8006c92 <_fflush_r+0x1a>
 8006c8e:	f7fd ffa9 	bl	8004be4 <__sinit>
 8006c92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d0f3      	beq.n	8006c82 <_fflush_r+0xa>
 8006c9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006c9c:	07d0      	lsls	r0, r2, #31
 8006c9e:	d404      	bmi.n	8006caa <_fflush_r+0x32>
 8006ca0:	0599      	lsls	r1, r3, #22
 8006ca2:	d402      	bmi.n	8006caa <_fflush_r+0x32>
 8006ca4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ca6:	f7fe f9ca 	bl	800503e <__retarget_lock_acquire_recursive>
 8006caa:	4628      	mov	r0, r5
 8006cac:	4621      	mov	r1, r4
 8006cae:	f7ff ff5d 	bl	8006b6c <__sflush_r>
 8006cb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006cb4:	07da      	lsls	r2, r3, #31
 8006cb6:	4605      	mov	r5, r0
 8006cb8:	d4e4      	bmi.n	8006c84 <_fflush_r+0xc>
 8006cba:	89a3      	ldrh	r3, [r4, #12]
 8006cbc:	059b      	lsls	r3, r3, #22
 8006cbe:	d4e1      	bmi.n	8006c84 <_fflush_r+0xc>
 8006cc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cc2:	f7fe f9bd 	bl	8005040 <__retarget_lock_release_recursive>
 8006cc6:	e7dd      	b.n	8006c84 <_fflush_r+0xc>

08006cc8 <__swhatbuf_r>:
 8006cc8:	b570      	push	{r4, r5, r6, lr}
 8006cca:	460c      	mov	r4, r1
 8006ccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cd0:	2900      	cmp	r1, #0
 8006cd2:	b096      	sub	sp, #88	; 0x58
 8006cd4:	4615      	mov	r5, r2
 8006cd6:	461e      	mov	r6, r3
 8006cd8:	da0d      	bge.n	8006cf6 <__swhatbuf_r+0x2e>
 8006cda:	89a3      	ldrh	r3, [r4, #12]
 8006cdc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006ce0:	f04f 0100 	mov.w	r1, #0
 8006ce4:	bf0c      	ite	eq
 8006ce6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006cea:	2340      	movne	r3, #64	; 0x40
 8006cec:	2000      	movs	r0, #0
 8006cee:	6031      	str	r1, [r6, #0]
 8006cf0:	602b      	str	r3, [r5, #0]
 8006cf2:	b016      	add	sp, #88	; 0x58
 8006cf4:	bd70      	pop	{r4, r5, r6, pc}
 8006cf6:	466a      	mov	r2, sp
 8006cf8:	f000 f862 	bl	8006dc0 <_fstat_r>
 8006cfc:	2800      	cmp	r0, #0
 8006cfe:	dbec      	blt.n	8006cda <__swhatbuf_r+0x12>
 8006d00:	9901      	ldr	r1, [sp, #4]
 8006d02:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006d06:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006d0a:	4259      	negs	r1, r3
 8006d0c:	4159      	adcs	r1, r3
 8006d0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d12:	e7eb      	b.n	8006cec <__swhatbuf_r+0x24>

08006d14 <__smakebuf_r>:
 8006d14:	898b      	ldrh	r3, [r1, #12]
 8006d16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006d18:	079d      	lsls	r5, r3, #30
 8006d1a:	4606      	mov	r6, r0
 8006d1c:	460c      	mov	r4, r1
 8006d1e:	d507      	bpl.n	8006d30 <__smakebuf_r+0x1c>
 8006d20:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006d24:	6023      	str	r3, [r4, #0]
 8006d26:	6123      	str	r3, [r4, #16]
 8006d28:	2301      	movs	r3, #1
 8006d2a:	6163      	str	r3, [r4, #20]
 8006d2c:	b002      	add	sp, #8
 8006d2e:	bd70      	pop	{r4, r5, r6, pc}
 8006d30:	ab01      	add	r3, sp, #4
 8006d32:	466a      	mov	r2, sp
 8006d34:	f7ff ffc8 	bl	8006cc8 <__swhatbuf_r>
 8006d38:	9900      	ldr	r1, [sp, #0]
 8006d3a:	4605      	mov	r5, r0
 8006d3c:	4630      	mov	r0, r6
 8006d3e:	f7ff f871 	bl	8005e24 <_malloc_r>
 8006d42:	b948      	cbnz	r0, 8006d58 <__smakebuf_r+0x44>
 8006d44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d48:	059a      	lsls	r2, r3, #22
 8006d4a:	d4ef      	bmi.n	8006d2c <__smakebuf_r+0x18>
 8006d4c:	f023 0303 	bic.w	r3, r3, #3
 8006d50:	f043 0302 	orr.w	r3, r3, #2
 8006d54:	81a3      	strh	r3, [r4, #12]
 8006d56:	e7e3      	b.n	8006d20 <__smakebuf_r+0xc>
 8006d58:	89a3      	ldrh	r3, [r4, #12]
 8006d5a:	6020      	str	r0, [r4, #0]
 8006d5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d60:	81a3      	strh	r3, [r4, #12]
 8006d62:	9b00      	ldr	r3, [sp, #0]
 8006d64:	6163      	str	r3, [r4, #20]
 8006d66:	9b01      	ldr	r3, [sp, #4]
 8006d68:	6120      	str	r0, [r4, #16]
 8006d6a:	b15b      	cbz	r3, 8006d84 <__smakebuf_r+0x70>
 8006d6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d70:	4630      	mov	r0, r6
 8006d72:	f000 f837 	bl	8006de4 <_isatty_r>
 8006d76:	b128      	cbz	r0, 8006d84 <__smakebuf_r+0x70>
 8006d78:	89a3      	ldrh	r3, [r4, #12]
 8006d7a:	f023 0303 	bic.w	r3, r3, #3
 8006d7e:	f043 0301 	orr.w	r3, r3, #1
 8006d82:	81a3      	strh	r3, [r4, #12]
 8006d84:	89a3      	ldrh	r3, [r4, #12]
 8006d86:	431d      	orrs	r5, r3
 8006d88:	81a5      	strh	r5, [r4, #12]
 8006d8a:	e7cf      	b.n	8006d2c <__smakebuf_r+0x18>

08006d8c <memmove>:
 8006d8c:	4288      	cmp	r0, r1
 8006d8e:	b510      	push	{r4, lr}
 8006d90:	eb01 0402 	add.w	r4, r1, r2
 8006d94:	d902      	bls.n	8006d9c <memmove+0x10>
 8006d96:	4284      	cmp	r4, r0
 8006d98:	4623      	mov	r3, r4
 8006d9a:	d807      	bhi.n	8006dac <memmove+0x20>
 8006d9c:	1e43      	subs	r3, r0, #1
 8006d9e:	42a1      	cmp	r1, r4
 8006da0:	d008      	beq.n	8006db4 <memmove+0x28>
 8006da2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006da6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006daa:	e7f8      	b.n	8006d9e <memmove+0x12>
 8006dac:	4402      	add	r2, r0
 8006dae:	4601      	mov	r1, r0
 8006db0:	428a      	cmp	r2, r1
 8006db2:	d100      	bne.n	8006db6 <memmove+0x2a>
 8006db4:	bd10      	pop	{r4, pc}
 8006db6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006dba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006dbe:	e7f7      	b.n	8006db0 <memmove+0x24>

08006dc0 <_fstat_r>:
 8006dc0:	b538      	push	{r3, r4, r5, lr}
 8006dc2:	4d07      	ldr	r5, [pc, #28]	; (8006de0 <_fstat_r+0x20>)
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	4604      	mov	r4, r0
 8006dc8:	4608      	mov	r0, r1
 8006dca:	4611      	mov	r1, r2
 8006dcc:	602b      	str	r3, [r5, #0]
 8006dce:	f7fc f86e 	bl	8002eae <_fstat>
 8006dd2:	1c43      	adds	r3, r0, #1
 8006dd4:	d102      	bne.n	8006ddc <_fstat_r+0x1c>
 8006dd6:	682b      	ldr	r3, [r5, #0]
 8006dd8:	b103      	cbz	r3, 8006ddc <_fstat_r+0x1c>
 8006dda:	6023      	str	r3, [r4, #0]
 8006ddc:	bd38      	pop	{r3, r4, r5, pc}
 8006dde:	bf00      	nop
 8006de0:	200007b0 	.word	0x200007b0

08006de4 <_isatty_r>:
 8006de4:	b538      	push	{r3, r4, r5, lr}
 8006de6:	4d06      	ldr	r5, [pc, #24]	; (8006e00 <_isatty_r+0x1c>)
 8006de8:	2300      	movs	r3, #0
 8006dea:	4604      	mov	r4, r0
 8006dec:	4608      	mov	r0, r1
 8006dee:	602b      	str	r3, [r5, #0]
 8006df0:	f7fc f86d 	bl	8002ece <_isatty>
 8006df4:	1c43      	adds	r3, r0, #1
 8006df6:	d102      	bne.n	8006dfe <_isatty_r+0x1a>
 8006df8:	682b      	ldr	r3, [r5, #0]
 8006dfa:	b103      	cbz	r3, 8006dfe <_isatty_r+0x1a>
 8006dfc:	6023      	str	r3, [r4, #0]
 8006dfe:	bd38      	pop	{r3, r4, r5, pc}
 8006e00:	200007b0 	.word	0x200007b0

08006e04 <_sbrk_r>:
 8006e04:	b538      	push	{r3, r4, r5, lr}
 8006e06:	4d06      	ldr	r5, [pc, #24]	; (8006e20 <_sbrk_r+0x1c>)
 8006e08:	2300      	movs	r3, #0
 8006e0a:	4604      	mov	r4, r0
 8006e0c:	4608      	mov	r0, r1
 8006e0e:	602b      	str	r3, [r5, #0]
 8006e10:	f7fc f876 	bl	8002f00 <_sbrk>
 8006e14:	1c43      	adds	r3, r0, #1
 8006e16:	d102      	bne.n	8006e1e <_sbrk_r+0x1a>
 8006e18:	682b      	ldr	r3, [r5, #0]
 8006e1a:	b103      	cbz	r3, 8006e1e <_sbrk_r+0x1a>
 8006e1c:	6023      	str	r3, [r4, #0]
 8006e1e:	bd38      	pop	{r3, r4, r5, pc}
 8006e20:	200007b0 	.word	0x200007b0

08006e24 <memcpy>:
 8006e24:	440a      	add	r2, r1
 8006e26:	4291      	cmp	r1, r2
 8006e28:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e2c:	d100      	bne.n	8006e30 <memcpy+0xc>
 8006e2e:	4770      	bx	lr
 8006e30:	b510      	push	{r4, lr}
 8006e32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e3a:	4291      	cmp	r1, r2
 8006e3c:	d1f9      	bne.n	8006e32 <memcpy+0xe>
 8006e3e:	bd10      	pop	{r4, pc}

08006e40 <__assert_func>:
 8006e40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006e42:	4614      	mov	r4, r2
 8006e44:	461a      	mov	r2, r3
 8006e46:	4b09      	ldr	r3, [pc, #36]	; (8006e6c <__assert_func+0x2c>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4605      	mov	r5, r0
 8006e4c:	68d8      	ldr	r0, [r3, #12]
 8006e4e:	b14c      	cbz	r4, 8006e64 <__assert_func+0x24>
 8006e50:	4b07      	ldr	r3, [pc, #28]	; (8006e70 <__assert_func+0x30>)
 8006e52:	9100      	str	r1, [sp, #0]
 8006e54:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006e58:	4906      	ldr	r1, [pc, #24]	; (8006e74 <__assert_func+0x34>)
 8006e5a:	462b      	mov	r3, r5
 8006e5c:	f000 f872 	bl	8006f44 <fiprintf>
 8006e60:	f000 f882 	bl	8006f68 <abort>
 8006e64:	4b04      	ldr	r3, [pc, #16]	; (8006e78 <__assert_func+0x38>)
 8006e66:	461c      	mov	r4, r3
 8006e68:	e7f3      	b.n	8006e52 <__assert_func+0x12>
 8006e6a:	bf00      	nop
 8006e6c:	20000068 	.word	0x20000068
 8006e70:	08007e77 	.word	0x08007e77
 8006e74:	08007e84 	.word	0x08007e84
 8006e78:	08007eb2 	.word	0x08007eb2

08006e7c <_calloc_r>:
 8006e7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e7e:	fba1 2402 	umull	r2, r4, r1, r2
 8006e82:	b94c      	cbnz	r4, 8006e98 <_calloc_r+0x1c>
 8006e84:	4611      	mov	r1, r2
 8006e86:	9201      	str	r2, [sp, #4]
 8006e88:	f7fe ffcc 	bl	8005e24 <_malloc_r>
 8006e8c:	9a01      	ldr	r2, [sp, #4]
 8006e8e:	4605      	mov	r5, r0
 8006e90:	b930      	cbnz	r0, 8006ea0 <_calloc_r+0x24>
 8006e92:	4628      	mov	r0, r5
 8006e94:	b003      	add	sp, #12
 8006e96:	bd30      	pop	{r4, r5, pc}
 8006e98:	220c      	movs	r2, #12
 8006e9a:	6002      	str	r2, [r0, #0]
 8006e9c:	2500      	movs	r5, #0
 8006e9e:	e7f8      	b.n	8006e92 <_calloc_r+0x16>
 8006ea0:	4621      	mov	r1, r4
 8006ea2:	f7fe f84f 	bl	8004f44 <memset>
 8006ea6:	e7f4      	b.n	8006e92 <_calloc_r+0x16>

08006ea8 <__ascii_mbtowc>:
 8006ea8:	b082      	sub	sp, #8
 8006eaa:	b901      	cbnz	r1, 8006eae <__ascii_mbtowc+0x6>
 8006eac:	a901      	add	r1, sp, #4
 8006eae:	b142      	cbz	r2, 8006ec2 <__ascii_mbtowc+0x1a>
 8006eb0:	b14b      	cbz	r3, 8006ec6 <__ascii_mbtowc+0x1e>
 8006eb2:	7813      	ldrb	r3, [r2, #0]
 8006eb4:	600b      	str	r3, [r1, #0]
 8006eb6:	7812      	ldrb	r2, [r2, #0]
 8006eb8:	1e10      	subs	r0, r2, #0
 8006eba:	bf18      	it	ne
 8006ebc:	2001      	movne	r0, #1
 8006ebe:	b002      	add	sp, #8
 8006ec0:	4770      	bx	lr
 8006ec2:	4610      	mov	r0, r2
 8006ec4:	e7fb      	b.n	8006ebe <__ascii_mbtowc+0x16>
 8006ec6:	f06f 0001 	mvn.w	r0, #1
 8006eca:	e7f8      	b.n	8006ebe <__ascii_mbtowc+0x16>

08006ecc <_realloc_r>:
 8006ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ed0:	4680      	mov	r8, r0
 8006ed2:	4614      	mov	r4, r2
 8006ed4:	460e      	mov	r6, r1
 8006ed6:	b921      	cbnz	r1, 8006ee2 <_realloc_r+0x16>
 8006ed8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006edc:	4611      	mov	r1, r2
 8006ede:	f7fe bfa1 	b.w	8005e24 <_malloc_r>
 8006ee2:	b92a      	cbnz	r2, 8006ef0 <_realloc_r+0x24>
 8006ee4:	f7fe ff2a 	bl	8005d3c <_free_r>
 8006ee8:	4625      	mov	r5, r4
 8006eea:	4628      	mov	r0, r5
 8006eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ef0:	f000 f841 	bl	8006f76 <_malloc_usable_size_r>
 8006ef4:	4284      	cmp	r4, r0
 8006ef6:	4607      	mov	r7, r0
 8006ef8:	d802      	bhi.n	8006f00 <_realloc_r+0x34>
 8006efa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006efe:	d812      	bhi.n	8006f26 <_realloc_r+0x5a>
 8006f00:	4621      	mov	r1, r4
 8006f02:	4640      	mov	r0, r8
 8006f04:	f7fe ff8e 	bl	8005e24 <_malloc_r>
 8006f08:	4605      	mov	r5, r0
 8006f0a:	2800      	cmp	r0, #0
 8006f0c:	d0ed      	beq.n	8006eea <_realloc_r+0x1e>
 8006f0e:	42bc      	cmp	r4, r7
 8006f10:	4622      	mov	r2, r4
 8006f12:	4631      	mov	r1, r6
 8006f14:	bf28      	it	cs
 8006f16:	463a      	movcs	r2, r7
 8006f18:	f7ff ff84 	bl	8006e24 <memcpy>
 8006f1c:	4631      	mov	r1, r6
 8006f1e:	4640      	mov	r0, r8
 8006f20:	f7fe ff0c 	bl	8005d3c <_free_r>
 8006f24:	e7e1      	b.n	8006eea <_realloc_r+0x1e>
 8006f26:	4635      	mov	r5, r6
 8006f28:	e7df      	b.n	8006eea <_realloc_r+0x1e>

08006f2a <__ascii_wctomb>:
 8006f2a:	b149      	cbz	r1, 8006f40 <__ascii_wctomb+0x16>
 8006f2c:	2aff      	cmp	r2, #255	; 0xff
 8006f2e:	bf85      	ittet	hi
 8006f30:	238a      	movhi	r3, #138	; 0x8a
 8006f32:	6003      	strhi	r3, [r0, #0]
 8006f34:	700a      	strbls	r2, [r1, #0]
 8006f36:	f04f 30ff 	movhi.w	r0, #4294967295
 8006f3a:	bf98      	it	ls
 8006f3c:	2001      	movls	r0, #1
 8006f3e:	4770      	bx	lr
 8006f40:	4608      	mov	r0, r1
 8006f42:	4770      	bx	lr

08006f44 <fiprintf>:
 8006f44:	b40e      	push	{r1, r2, r3}
 8006f46:	b503      	push	{r0, r1, lr}
 8006f48:	4601      	mov	r1, r0
 8006f4a:	ab03      	add	r3, sp, #12
 8006f4c:	4805      	ldr	r0, [pc, #20]	; (8006f64 <fiprintf+0x20>)
 8006f4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f52:	6800      	ldr	r0, [r0, #0]
 8006f54:	9301      	str	r3, [sp, #4]
 8006f56:	f7ff fcef 	bl	8006938 <_vfiprintf_r>
 8006f5a:	b002      	add	sp, #8
 8006f5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f60:	b003      	add	sp, #12
 8006f62:	4770      	bx	lr
 8006f64:	20000068 	.word	0x20000068

08006f68 <abort>:
 8006f68:	b508      	push	{r3, lr}
 8006f6a:	2006      	movs	r0, #6
 8006f6c:	f000 f834 	bl	8006fd8 <raise>
 8006f70:	2001      	movs	r0, #1
 8006f72:	f7fb ff69 	bl	8002e48 <_exit>

08006f76 <_malloc_usable_size_r>:
 8006f76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f7a:	1f18      	subs	r0, r3, #4
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	bfbc      	itt	lt
 8006f80:	580b      	ldrlt	r3, [r1, r0]
 8006f82:	18c0      	addlt	r0, r0, r3
 8006f84:	4770      	bx	lr

08006f86 <_raise_r>:
 8006f86:	291f      	cmp	r1, #31
 8006f88:	b538      	push	{r3, r4, r5, lr}
 8006f8a:	4604      	mov	r4, r0
 8006f8c:	460d      	mov	r5, r1
 8006f8e:	d904      	bls.n	8006f9a <_raise_r+0x14>
 8006f90:	2316      	movs	r3, #22
 8006f92:	6003      	str	r3, [r0, #0]
 8006f94:	f04f 30ff 	mov.w	r0, #4294967295
 8006f98:	bd38      	pop	{r3, r4, r5, pc}
 8006f9a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006f9c:	b112      	cbz	r2, 8006fa4 <_raise_r+0x1e>
 8006f9e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006fa2:	b94b      	cbnz	r3, 8006fb8 <_raise_r+0x32>
 8006fa4:	4620      	mov	r0, r4
 8006fa6:	f000 f831 	bl	800700c <_getpid_r>
 8006faa:	462a      	mov	r2, r5
 8006fac:	4601      	mov	r1, r0
 8006fae:	4620      	mov	r0, r4
 8006fb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006fb4:	f000 b818 	b.w	8006fe8 <_kill_r>
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d00a      	beq.n	8006fd2 <_raise_r+0x4c>
 8006fbc:	1c59      	adds	r1, r3, #1
 8006fbe:	d103      	bne.n	8006fc8 <_raise_r+0x42>
 8006fc0:	2316      	movs	r3, #22
 8006fc2:	6003      	str	r3, [r0, #0]
 8006fc4:	2001      	movs	r0, #1
 8006fc6:	e7e7      	b.n	8006f98 <_raise_r+0x12>
 8006fc8:	2400      	movs	r4, #0
 8006fca:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006fce:	4628      	mov	r0, r5
 8006fd0:	4798      	blx	r3
 8006fd2:	2000      	movs	r0, #0
 8006fd4:	e7e0      	b.n	8006f98 <_raise_r+0x12>
	...

08006fd8 <raise>:
 8006fd8:	4b02      	ldr	r3, [pc, #8]	; (8006fe4 <raise+0xc>)
 8006fda:	4601      	mov	r1, r0
 8006fdc:	6818      	ldr	r0, [r3, #0]
 8006fde:	f7ff bfd2 	b.w	8006f86 <_raise_r>
 8006fe2:	bf00      	nop
 8006fe4:	20000068 	.word	0x20000068

08006fe8 <_kill_r>:
 8006fe8:	b538      	push	{r3, r4, r5, lr}
 8006fea:	4d07      	ldr	r5, [pc, #28]	; (8007008 <_kill_r+0x20>)
 8006fec:	2300      	movs	r3, #0
 8006fee:	4604      	mov	r4, r0
 8006ff0:	4608      	mov	r0, r1
 8006ff2:	4611      	mov	r1, r2
 8006ff4:	602b      	str	r3, [r5, #0]
 8006ff6:	f7fb ff17 	bl	8002e28 <_kill>
 8006ffa:	1c43      	adds	r3, r0, #1
 8006ffc:	d102      	bne.n	8007004 <_kill_r+0x1c>
 8006ffe:	682b      	ldr	r3, [r5, #0]
 8007000:	b103      	cbz	r3, 8007004 <_kill_r+0x1c>
 8007002:	6023      	str	r3, [r4, #0]
 8007004:	bd38      	pop	{r3, r4, r5, pc}
 8007006:	bf00      	nop
 8007008:	200007b0 	.word	0x200007b0

0800700c <_getpid_r>:
 800700c:	f7fb bf04 	b.w	8002e18 <_getpid>

08007010 <powf>:
 8007010:	b508      	push	{r3, lr}
 8007012:	ed2d 8b04 	vpush	{d8-d9}
 8007016:	eeb0 8a60 	vmov.f32	s16, s1
 800701a:	eeb0 9a40 	vmov.f32	s18, s0
 800701e:	f000 f85b 	bl	80070d8 <__ieee754_powf>
 8007022:	eeb4 8a48 	vcmp.f32	s16, s16
 8007026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800702a:	eef0 8a40 	vmov.f32	s17, s0
 800702e:	d63e      	bvs.n	80070ae <powf+0x9e>
 8007030:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8007034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007038:	d112      	bne.n	8007060 <powf+0x50>
 800703a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800703e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007042:	d039      	beq.n	80070b8 <powf+0xa8>
 8007044:	eeb0 0a48 	vmov.f32	s0, s16
 8007048:	f000 f839 	bl	80070be <finitef>
 800704c:	b378      	cbz	r0, 80070ae <powf+0x9e>
 800704e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8007052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007056:	d52a      	bpl.n	80070ae <powf+0x9e>
 8007058:	f7fd ffc6 	bl	8004fe8 <__errno>
 800705c:	2322      	movs	r3, #34	; 0x22
 800705e:	e014      	b.n	800708a <powf+0x7a>
 8007060:	f000 f82d 	bl	80070be <finitef>
 8007064:	b998      	cbnz	r0, 800708e <powf+0x7e>
 8007066:	eeb0 0a49 	vmov.f32	s0, s18
 800706a:	f000 f828 	bl	80070be <finitef>
 800706e:	b170      	cbz	r0, 800708e <powf+0x7e>
 8007070:	eeb0 0a48 	vmov.f32	s0, s16
 8007074:	f000 f823 	bl	80070be <finitef>
 8007078:	b148      	cbz	r0, 800708e <powf+0x7e>
 800707a:	eef4 8a68 	vcmp.f32	s17, s17
 800707e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007082:	d7e9      	bvc.n	8007058 <powf+0x48>
 8007084:	f7fd ffb0 	bl	8004fe8 <__errno>
 8007088:	2321      	movs	r3, #33	; 0x21
 800708a:	6003      	str	r3, [r0, #0]
 800708c:	e00f      	b.n	80070ae <powf+0x9e>
 800708e:	eef5 8a40 	vcmp.f32	s17, #0.0
 8007092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007096:	d10a      	bne.n	80070ae <powf+0x9e>
 8007098:	eeb0 0a49 	vmov.f32	s0, s18
 800709c:	f000 f80f 	bl	80070be <finitef>
 80070a0:	b128      	cbz	r0, 80070ae <powf+0x9e>
 80070a2:	eeb0 0a48 	vmov.f32	s0, s16
 80070a6:	f000 f80a 	bl	80070be <finitef>
 80070aa:	2800      	cmp	r0, #0
 80070ac:	d1d4      	bne.n	8007058 <powf+0x48>
 80070ae:	eeb0 0a68 	vmov.f32	s0, s17
 80070b2:	ecbd 8b04 	vpop	{d8-d9}
 80070b6:	bd08      	pop	{r3, pc}
 80070b8:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80070bc:	e7f7      	b.n	80070ae <powf+0x9e>

080070be <finitef>:
 80070be:	b082      	sub	sp, #8
 80070c0:	ed8d 0a01 	vstr	s0, [sp, #4]
 80070c4:	9801      	ldr	r0, [sp, #4]
 80070c6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80070ca:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80070ce:	bfac      	ite	ge
 80070d0:	2000      	movge	r0, #0
 80070d2:	2001      	movlt	r0, #1
 80070d4:	b002      	add	sp, #8
 80070d6:	4770      	bx	lr

080070d8 <__ieee754_powf>:
 80070d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070dc:	ee10 4a90 	vmov	r4, s1
 80070e0:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 80070e4:	ed2d 8b02 	vpush	{d8}
 80070e8:	ee10 7a10 	vmov	r7, s0
 80070ec:	eeb0 8a40 	vmov.f32	s16, s0
 80070f0:	eef0 8a60 	vmov.f32	s17, s1
 80070f4:	d10c      	bne.n	8007110 <__ieee754_powf+0x38>
 80070f6:	f487 0780 	eor.w	r7, r7, #4194304	; 0x400000
 80070fa:	007f      	lsls	r7, r7, #1
 80070fc:	f517 0f00 	cmn.w	r7, #8388608	; 0x800000
 8007100:	f240 8292 	bls.w	8007628 <__ieee754_powf+0x550>
 8007104:	ee38 0a28 	vadd.f32	s0, s16, s17
 8007108:	ecbd 8b02 	vpop	{d8}
 800710c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007110:	f027 4500 	bic.w	r5, r7, #2147483648	; 0x80000000
 8007114:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8007118:	dcf4      	bgt.n	8007104 <__ieee754_powf+0x2c>
 800711a:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800711e:	dd08      	ble.n	8007132 <__ieee754_powf+0x5a>
 8007120:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8007124:	d1ee      	bne.n	8007104 <__ieee754_powf+0x2c>
 8007126:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 800712a:	0064      	lsls	r4, r4, #1
 800712c:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8007130:	e7e6      	b.n	8007100 <__ieee754_powf+0x28>
 8007132:	2f00      	cmp	r7, #0
 8007134:	da20      	bge.n	8007178 <__ieee754_powf+0xa0>
 8007136:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 800713a:	da2d      	bge.n	8007198 <__ieee754_powf+0xc0>
 800713c:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8007140:	f2c0 827b 	blt.w	800763a <__ieee754_powf+0x562>
 8007144:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8007148:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800714c:	fa48 f603 	asr.w	r6, r8, r3
 8007150:	fa06 f303 	lsl.w	r3, r6, r3
 8007154:	4543      	cmp	r3, r8
 8007156:	f040 8270 	bne.w	800763a <__ieee754_powf+0x562>
 800715a:	f006 0601 	and.w	r6, r6, #1
 800715e:	f1c6 0602 	rsb	r6, r6, #2
 8007162:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8007166:	d11f      	bne.n	80071a8 <__ieee754_powf+0xd0>
 8007168:	2c00      	cmp	r4, #0
 800716a:	f280 8263 	bge.w	8007634 <__ieee754_powf+0x55c>
 800716e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007172:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8007176:	e7c7      	b.n	8007108 <__ieee754_powf+0x30>
 8007178:	2600      	movs	r6, #0
 800717a:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800717e:	d1f0      	bne.n	8007162 <__ieee754_powf+0x8a>
 8007180:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 8007184:	f000 8250 	beq.w	8007628 <__ieee754_powf+0x550>
 8007188:	dd08      	ble.n	800719c <__ieee754_powf+0xc4>
 800718a:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8007490 <__ieee754_powf+0x3b8>
 800718e:	2c00      	cmp	r4, #0
 8007190:	bfa8      	it	ge
 8007192:	eeb0 0a68 	vmovge.f32	s0, s17
 8007196:	e7b7      	b.n	8007108 <__ieee754_powf+0x30>
 8007198:	2602      	movs	r6, #2
 800719a:	e7ee      	b.n	800717a <__ieee754_powf+0xa2>
 800719c:	2c00      	cmp	r4, #0
 800719e:	f280 8246 	bge.w	800762e <__ieee754_powf+0x556>
 80071a2:	eeb1 0a68 	vneg.f32	s0, s17
 80071a6:	e7af      	b.n	8007108 <__ieee754_powf+0x30>
 80071a8:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 80071ac:	d102      	bne.n	80071b4 <__ieee754_powf+0xdc>
 80071ae:	ee28 0a08 	vmul.f32	s0, s16, s16
 80071b2:	e7a9      	b.n	8007108 <__ieee754_powf+0x30>
 80071b4:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 80071b8:	eeb0 0a48 	vmov.f32	s0, s16
 80071bc:	d107      	bne.n	80071ce <__ieee754_powf+0xf6>
 80071be:	2f00      	cmp	r7, #0
 80071c0:	db05      	blt.n	80071ce <__ieee754_powf+0xf6>
 80071c2:	ecbd 8b02 	vpop	{d8}
 80071c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071ca:	f000 badf 	b.w	800778c <__ieee754_sqrtf>
 80071ce:	f000 fa4d 	bl	800766c <fabsf>
 80071d2:	b125      	cbz	r5, 80071de <__ieee754_powf+0x106>
 80071d4:	f027 4340 	bic.w	r3, r7, #3221225472	; 0xc0000000
 80071d8:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80071dc:	d115      	bne.n	800720a <__ieee754_powf+0x132>
 80071de:	2c00      	cmp	r4, #0
 80071e0:	bfbc      	itt	lt
 80071e2:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 80071e6:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80071ea:	2f00      	cmp	r7, #0
 80071ec:	da8c      	bge.n	8007108 <__ieee754_powf+0x30>
 80071ee:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 80071f2:	4335      	orrs	r5, r6
 80071f4:	d104      	bne.n	8007200 <__ieee754_powf+0x128>
 80071f6:	ee70 7a40 	vsub.f32	s15, s0, s0
 80071fa:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80071fe:	e783      	b.n	8007108 <__ieee754_powf+0x30>
 8007200:	2e01      	cmp	r6, #1
 8007202:	d181      	bne.n	8007108 <__ieee754_powf+0x30>
 8007204:	eeb1 0a40 	vneg.f32	s0, s0
 8007208:	e77e      	b.n	8007108 <__ieee754_powf+0x30>
 800720a:	0ff8      	lsrs	r0, r7, #31
 800720c:	3801      	subs	r0, #1
 800720e:	ea56 0300 	orrs.w	r3, r6, r0
 8007212:	d104      	bne.n	800721e <__ieee754_powf+0x146>
 8007214:	ee38 8a48 	vsub.f32	s16, s16, s16
 8007218:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800721c:	e774      	b.n	8007108 <__ieee754_powf+0x30>
 800721e:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 8007222:	dd73      	ble.n	800730c <__ieee754_powf+0x234>
 8007224:	4b9b      	ldr	r3, [pc, #620]	; (8007494 <__ieee754_powf+0x3bc>)
 8007226:	429d      	cmp	r5, r3
 8007228:	dc08      	bgt.n	800723c <__ieee754_powf+0x164>
 800722a:	2c00      	cmp	r4, #0
 800722c:	da0b      	bge.n	8007246 <__ieee754_powf+0x16e>
 800722e:	2000      	movs	r0, #0
 8007230:	ecbd 8b02 	vpop	{d8}
 8007234:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007238:	f000 baa2 	b.w	8007780 <__math_oflowf>
 800723c:	4b96      	ldr	r3, [pc, #600]	; (8007498 <__ieee754_powf+0x3c0>)
 800723e:	429d      	cmp	r5, r3
 8007240:	dd08      	ble.n	8007254 <__ieee754_powf+0x17c>
 8007242:	2c00      	cmp	r4, #0
 8007244:	dcf3      	bgt.n	800722e <__ieee754_powf+0x156>
 8007246:	2000      	movs	r0, #0
 8007248:	ecbd 8b02 	vpop	{d8}
 800724c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007250:	f000 ba90 	b.w	8007774 <__math_uflowf>
 8007254:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007258:	ee30 0a67 	vsub.f32	s0, s0, s15
 800725c:	eddf 6a8f 	vldr	s13, [pc, #572]	; 800749c <__ieee754_powf+0x3c4>
 8007260:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8007264:	eee0 6a67 	vfms.f32	s13, s0, s15
 8007268:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800726c:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8007270:	ee20 7a00 	vmul.f32	s14, s0, s0
 8007274:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007278:	eddf 7a89 	vldr	s15, [pc, #548]	; 80074a0 <__ieee754_powf+0x3c8>
 800727c:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8007280:	ed9f 7a88 	vldr	s14, [pc, #544]	; 80074a4 <__ieee754_powf+0x3cc>
 8007284:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007288:	ed9f 7a87 	vldr	s14, [pc, #540]	; 80074a8 <__ieee754_powf+0x3d0>
 800728c:	eef0 6a67 	vmov.f32	s13, s15
 8007290:	eee0 6a07 	vfma.f32	s13, s0, s14
 8007294:	ee16 3a90 	vmov	r3, s13
 8007298:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800729c:	f023 030f 	bic.w	r3, r3, #15
 80072a0:	ee06 3a90 	vmov	s13, r3
 80072a4:	eee0 6a47 	vfms.f32	s13, s0, s14
 80072a8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80072ac:	3e01      	subs	r6, #1
 80072ae:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 80072b2:	4306      	orrs	r6, r0
 80072b4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80072b8:	f024 040f 	bic.w	r4, r4, #15
 80072bc:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80072c0:	bf08      	it	eq
 80072c2:	eeb0 8a47 	vmoveq.f32	s16, s14
 80072c6:	ee07 4a10 	vmov	s14, r4
 80072ca:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80072ce:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80072d2:	ee07 3a90 	vmov	s15, r3
 80072d6:	eee7 0a27 	vfma.f32	s1, s14, s15
 80072da:	ee07 4a10 	vmov	s14, r4
 80072de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80072e2:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80072e6:	ee17 1a10 	vmov	r1, s14
 80072ea:	2900      	cmp	r1, #0
 80072ec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80072f0:	f340 817c 	ble.w	80075ec <__ieee754_powf+0x514>
 80072f4:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 80072f8:	f340 80f8 	ble.w	80074ec <__ieee754_powf+0x414>
 80072fc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8007300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007304:	bf4c      	ite	mi
 8007306:	2001      	movmi	r0, #1
 8007308:	2000      	movpl	r0, #0
 800730a:	e791      	b.n	8007230 <__ieee754_powf+0x158>
 800730c:	f017 4fff 	tst.w	r7, #2139095040	; 0x7f800000
 8007310:	bf01      	itttt	eq
 8007312:	eddf 7a66 	vldreq	s15, [pc, #408]	; 80074ac <__ieee754_powf+0x3d4>
 8007316:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800731a:	f06f 0317 	mvneq.w	r3, #23
 800731e:	ee17 5a90 	vmoveq	r5, s15
 8007322:	ea4f 52e5 	mov.w	r2, r5, asr #23
 8007326:	bf18      	it	ne
 8007328:	2300      	movne	r3, #0
 800732a:	3a7f      	subs	r2, #127	; 0x7f
 800732c:	441a      	add	r2, r3
 800732e:	4b60      	ldr	r3, [pc, #384]	; (80074b0 <__ieee754_powf+0x3d8>)
 8007330:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8007334:	429d      	cmp	r5, r3
 8007336:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 800733a:	dd06      	ble.n	800734a <__ieee754_powf+0x272>
 800733c:	4b5d      	ldr	r3, [pc, #372]	; (80074b4 <__ieee754_powf+0x3dc>)
 800733e:	429d      	cmp	r5, r3
 8007340:	f340 80a4 	ble.w	800748c <__ieee754_powf+0x3b4>
 8007344:	3201      	adds	r2, #1
 8007346:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800734a:	2500      	movs	r5, #0
 800734c:	4b5a      	ldr	r3, [pc, #360]	; (80074b8 <__ieee754_powf+0x3e0>)
 800734e:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8007352:	ee07 1a10 	vmov	s14, r1
 8007356:	edd3 5a00 	vldr	s11, [r3]
 800735a:	4b58      	ldr	r3, [pc, #352]	; (80074bc <__ieee754_powf+0x3e4>)
 800735c:	ee75 7a87 	vadd.f32	s15, s11, s14
 8007360:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007364:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8007368:	1049      	asrs	r1, r1, #1
 800736a:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800736e:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8007372:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 8007376:	ee37 6a65 	vsub.f32	s12, s14, s11
 800737a:	ee07 1a90 	vmov	s15, r1
 800737e:	ee26 5a24 	vmul.f32	s10, s12, s9
 8007382:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8007386:	ee15 7a10 	vmov	r7, s10
 800738a:	401f      	ands	r7, r3
 800738c:	ee06 7a90 	vmov	s13, r7
 8007390:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8007394:	ee37 7a65 	vsub.f32	s14, s14, s11
 8007398:	ee65 7a05 	vmul.f32	s15, s10, s10
 800739c:	eea6 6ac7 	vfms.f32	s12, s13, s14
 80073a0:	eddf 5a47 	vldr	s11, [pc, #284]	; 80074c0 <__ieee754_powf+0x3e8>
 80073a4:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80074c4 <__ieee754_powf+0x3ec>
 80073a8:	eee7 5a87 	vfma.f32	s11, s15, s14
 80073ac:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80074c8 <__ieee754_powf+0x3f0>
 80073b0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80073b4:	eddf 5a39 	vldr	s11, [pc, #228]	; 800749c <__ieee754_powf+0x3c4>
 80073b8:	eee7 5a27 	vfma.f32	s11, s14, s15
 80073bc:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80074cc <__ieee754_powf+0x3f4>
 80073c0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80073c4:	eddf 5a42 	vldr	s11, [pc, #264]	; 80074d0 <__ieee754_powf+0x3f8>
 80073c8:	ee26 6a24 	vmul.f32	s12, s12, s9
 80073cc:	eee7 5a27 	vfma.f32	s11, s14, s15
 80073d0:	ee35 7a26 	vadd.f32	s14, s10, s13
 80073d4:	ee67 4aa7 	vmul.f32	s9, s15, s15
 80073d8:	ee27 7a06 	vmul.f32	s14, s14, s12
 80073dc:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 80073e0:	eea4 7aa5 	vfma.f32	s14, s9, s11
 80073e4:	eef0 5a67 	vmov.f32	s11, s15
 80073e8:	eee6 5aa6 	vfma.f32	s11, s13, s13
 80073ec:	ee75 5a87 	vadd.f32	s11, s11, s14
 80073f0:	ee15 1a90 	vmov	r1, s11
 80073f4:	4019      	ands	r1, r3
 80073f6:	ee05 1a90 	vmov	s11, r1
 80073fa:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80073fe:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8007402:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007406:	ee67 7a85 	vmul.f32	s15, s15, s10
 800740a:	eee6 7a25 	vfma.f32	s15, s12, s11
 800740e:	eeb0 6a67 	vmov.f32	s12, s15
 8007412:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8007416:	ee16 1a10 	vmov	r1, s12
 800741a:	4019      	ands	r1, r3
 800741c:	ee07 1a10 	vmov	s14, r1
 8007420:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8007424:	ee06 1a10 	vmov	s12, r1
 8007428:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800742c:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80074d4 <__ieee754_powf+0x3fc>
 8007430:	4929      	ldr	r1, [pc, #164]	; (80074d8 <__ieee754_powf+0x400>)
 8007432:	eddf 5a2a 	vldr	s11, [pc, #168]	; 80074dc <__ieee754_powf+0x404>
 8007436:	ee67 7a87 	vmul.f32	s15, s15, s14
 800743a:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80074e0 <__ieee754_powf+0x408>
 800743e:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007442:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8007446:	ed91 7a00 	vldr	s14, [r1]
 800744a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800744e:	ee07 2a10 	vmov	s14, r2
 8007452:	eef0 6a67 	vmov.f32	s13, s15
 8007456:	4a23      	ldr	r2, [pc, #140]	; (80074e4 <__ieee754_powf+0x40c>)
 8007458:	eee6 6a25 	vfma.f32	s13, s12, s11
 800745c:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8007460:	ed92 5a00 	vldr	s10, [r2]
 8007464:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007468:	ee76 6a85 	vadd.f32	s13, s13, s10
 800746c:	ee76 6a87 	vadd.f32	s13, s13, s14
 8007470:	ee16 2a90 	vmov	r2, s13
 8007474:	4013      	ands	r3, r2
 8007476:	ee06 3a90 	vmov	s13, r3
 800747a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800747e:	ee37 7a45 	vsub.f32	s14, s14, s10
 8007482:	eea6 7a65 	vfms.f32	s14, s12, s11
 8007486:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800748a:	e70f      	b.n	80072ac <__ieee754_powf+0x1d4>
 800748c:	2501      	movs	r5, #1
 800748e:	e75d      	b.n	800734c <__ieee754_powf+0x274>
 8007490:	00000000 	.word	0x00000000
 8007494:	3f7ffff3 	.word	0x3f7ffff3
 8007498:	3f800007 	.word	0x3f800007
 800749c:	3eaaaaab 	.word	0x3eaaaaab
 80074a0:	3fb8aa3b 	.word	0x3fb8aa3b
 80074a4:	36eca570 	.word	0x36eca570
 80074a8:	3fb8aa00 	.word	0x3fb8aa00
 80074ac:	4b800000 	.word	0x4b800000
 80074b0:	001cc471 	.word	0x001cc471
 80074b4:	005db3d6 	.word	0x005db3d6
 80074b8:	08007fb4 	.word	0x08007fb4
 80074bc:	fffff000 	.word	0xfffff000
 80074c0:	3e6c3255 	.word	0x3e6c3255
 80074c4:	3e53f142 	.word	0x3e53f142
 80074c8:	3e8ba305 	.word	0x3e8ba305
 80074cc:	3edb6db7 	.word	0x3edb6db7
 80074d0:	3f19999a 	.word	0x3f19999a
 80074d4:	3f76384f 	.word	0x3f76384f
 80074d8:	08007fc4 	.word	0x08007fc4
 80074dc:	3f763800 	.word	0x3f763800
 80074e0:	369dc3a0 	.word	0x369dc3a0
 80074e4:	08007fbc 	.word	0x08007fbc
 80074e8:	3338aa3c 	.word	0x3338aa3c
 80074ec:	f040 8093 	bne.w	8007616 <__ieee754_powf+0x53e>
 80074f0:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 80074e8 <__ieee754_powf+0x410>
 80074f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80074f8:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80074fc:	eef4 6ac7 	vcmpe.f32	s13, s14
 8007500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007504:	f73f aefa 	bgt.w	80072fc <__ieee754_powf+0x224>
 8007508:	15db      	asrs	r3, r3, #23
 800750a:	3b7e      	subs	r3, #126	; 0x7e
 800750c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8007510:	4118      	asrs	r0, r3
 8007512:	4408      	add	r0, r1
 8007514:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8007518:	4a49      	ldr	r2, [pc, #292]	; (8007640 <__ieee754_powf+0x568>)
 800751a:	3b7f      	subs	r3, #127	; 0x7f
 800751c:	411a      	asrs	r2, r3
 800751e:	4002      	ands	r2, r0
 8007520:	ee07 2a10 	vmov	s14, r2
 8007524:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8007528:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800752c:	f1c3 0317 	rsb	r3, r3, #23
 8007530:	4118      	asrs	r0, r3
 8007532:	2900      	cmp	r1, #0
 8007534:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007538:	bfb8      	it	lt
 800753a:	4240      	neglt	r0, r0
 800753c:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8007540:	eddf 6a40 	vldr	s13, [pc, #256]	; 8007644 <__ieee754_powf+0x56c>
 8007544:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8007648 <__ieee754_powf+0x570>
 8007548:	ee17 3a10 	vmov	r3, s14
 800754c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007550:	f023 030f 	bic.w	r3, r3, #15
 8007554:	ee07 3a10 	vmov	s14, r3
 8007558:	ee77 7a67 	vsub.f32	s15, s14, s15
 800755c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007560:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8007564:	eddf 7a39 	vldr	s15, [pc, #228]	; 800764c <__ieee754_powf+0x574>
 8007568:	ee67 7a27 	vmul.f32	s15, s14, s15
 800756c:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8007570:	eef0 6a67 	vmov.f32	s13, s15
 8007574:	eee7 6a06 	vfma.f32	s13, s14, s12
 8007578:	eef0 5a66 	vmov.f32	s11, s13
 800757c:	eee7 5a46 	vfms.f32	s11, s14, s12
 8007580:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8007584:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8007588:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8007650 <__ieee754_powf+0x578>
 800758c:	eddf 5a31 	vldr	s11, [pc, #196]	; 8007654 <__ieee754_powf+0x57c>
 8007590:	eea7 6a25 	vfma.f32	s12, s14, s11
 8007594:	eddf 5a30 	vldr	s11, [pc, #192]	; 8007658 <__ieee754_powf+0x580>
 8007598:	eee6 5a07 	vfma.f32	s11, s12, s14
 800759c:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800765c <__ieee754_powf+0x584>
 80075a0:	eea5 6a87 	vfma.f32	s12, s11, s14
 80075a4:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007660 <__ieee754_powf+0x588>
 80075a8:	eee6 5a07 	vfma.f32	s11, s12, s14
 80075ac:	eeb0 6a66 	vmov.f32	s12, s13
 80075b0:	eea5 6ac7 	vfms.f32	s12, s11, s14
 80075b4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80075b8:	ee66 5a86 	vmul.f32	s11, s13, s12
 80075bc:	ee36 6a47 	vsub.f32	s12, s12, s14
 80075c0:	eee6 7aa7 	vfma.f32	s15, s13, s15
 80075c4:	ee85 7a86 	vdiv.f32	s14, s11, s12
 80075c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80075cc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80075d0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80075d4:	ee10 3a10 	vmov	r3, s0
 80075d8:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80075dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80075e0:	da1f      	bge.n	8007622 <__ieee754_powf+0x54a>
 80075e2:	f000 f84b 	bl	800767c <scalbnf>
 80075e6:	ee20 0a08 	vmul.f32	s0, s0, s16
 80075ea:	e58d      	b.n	8007108 <__ieee754_powf+0x30>
 80075ec:	4a1d      	ldr	r2, [pc, #116]	; (8007664 <__ieee754_powf+0x58c>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	dd07      	ble.n	8007602 <__ieee754_powf+0x52a>
 80075f2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80075f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075fa:	bf4c      	ite	mi
 80075fc:	2001      	movmi	r0, #1
 80075fe:	2000      	movpl	r0, #0
 8007600:	e622      	b.n	8007248 <__ieee754_powf+0x170>
 8007602:	d108      	bne.n	8007616 <__ieee754_powf+0x53e>
 8007604:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007608:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800760c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007610:	f6ff af7a 	blt.w	8007508 <__ieee754_powf+0x430>
 8007614:	e7ed      	b.n	80075f2 <__ieee754_powf+0x51a>
 8007616:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800761a:	f73f af75 	bgt.w	8007508 <__ieee754_powf+0x430>
 800761e:	2000      	movs	r0, #0
 8007620:	e78c      	b.n	800753c <__ieee754_powf+0x464>
 8007622:	ee00 3a10 	vmov	s0, r3
 8007626:	e7de      	b.n	80075e6 <__ieee754_powf+0x50e>
 8007628:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800762c:	e56c      	b.n	8007108 <__ieee754_powf+0x30>
 800762e:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8007668 <__ieee754_powf+0x590>
 8007632:	e569      	b.n	8007108 <__ieee754_powf+0x30>
 8007634:	eeb0 0a48 	vmov.f32	s0, s16
 8007638:	e566      	b.n	8007108 <__ieee754_powf+0x30>
 800763a:	2600      	movs	r6, #0
 800763c:	e591      	b.n	8007162 <__ieee754_powf+0x8a>
 800763e:	bf00      	nop
 8007640:	ff800000 	.word	0xff800000
 8007644:	3f317218 	.word	0x3f317218
 8007648:	3f317200 	.word	0x3f317200
 800764c:	35bfbe8c 	.word	0x35bfbe8c
 8007650:	b5ddea0e 	.word	0xb5ddea0e
 8007654:	3331bb4c 	.word	0x3331bb4c
 8007658:	388ab355 	.word	0x388ab355
 800765c:	bb360b61 	.word	0xbb360b61
 8007660:	3e2aaaab 	.word	0x3e2aaaab
 8007664:	43160000 	.word	0x43160000
 8007668:	00000000 	.word	0x00000000

0800766c <fabsf>:
 800766c:	ee10 3a10 	vmov	r3, s0
 8007670:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007674:	ee00 3a10 	vmov	s0, r3
 8007678:	4770      	bx	lr
	...

0800767c <scalbnf>:
 800767c:	ee10 3a10 	vmov	r3, s0
 8007680:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8007684:	d02b      	beq.n	80076de <scalbnf+0x62>
 8007686:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800768a:	d302      	bcc.n	8007692 <scalbnf+0x16>
 800768c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007690:	4770      	bx	lr
 8007692:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8007696:	d123      	bne.n	80076e0 <scalbnf+0x64>
 8007698:	4b24      	ldr	r3, [pc, #144]	; (800772c <scalbnf+0xb0>)
 800769a:	eddf 7a25 	vldr	s15, [pc, #148]	; 8007730 <scalbnf+0xb4>
 800769e:	4298      	cmp	r0, r3
 80076a0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80076a4:	db17      	blt.n	80076d6 <scalbnf+0x5a>
 80076a6:	ee10 3a10 	vmov	r3, s0
 80076aa:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80076ae:	3a19      	subs	r2, #25
 80076b0:	f24c 3150 	movw	r1, #50000	; 0xc350
 80076b4:	4288      	cmp	r0, r1
 80076b6:	dd15      	ble.n	80076e4 <scalbnf+0x68>
 80076b8:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8007734 <scalbnf+0xb8>
 80076bc:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8007738 <scalbnf+0xbc>
 80076c0:	ee10 3a10 	vmov	r3, s0
 80076c4:	eeb0 7a67 	vmov.f32	s14, s15
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	bfb8      	it	lt
 80076cc:	eef0 7a66 	vmovlt.f32	s15, s13
 80076d0:	ee27 0a87 	vmul.f32	s0, s15, s14
 80076d4:	4770      	bx	lr
 80076d6:	eddf 7a19 	vldr	s15, [pc, #100]	; 800773c <scalbnf+0xc0>
 80076da:	ee27 0a80 	vmul.f32	s0, s15, s0
 80076de:	4770      	bx	lr
 80076e0:	0dd2      	lsrs	r2, r2, #23
 80076e2:	e7e5      	b.n	80076b0 <scalbnf+0x34>
 80076e4:	4410      	add	r0, r2
 80076e6:	28fe      	cmp	r0, #254	; 0xfe
 80076e8:	dce6      	bgt.n	80076b8 <scalbnf+0x3c>
 80076ea:	2800      	cmp	r0, #0
 80076ec:	dd06      	ble.n	80076fc <scalbnf+0x80>
 80076ee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80076f2:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80076f6:	ee00 3a10 	vmov	s0, r3
 80076fa:	4770      	bx	lr
 80076fc:	f110 0f16 	cmn.w	r0, #22
 8007700:	da09      	bge.n	8007716 <scalbnf+0x9a>
 8007702:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800773c <scalbnf+0xc0>
 8007706:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8007740 <scalbnf+0xc4>
 800770a:	ee10 3a10 	vmov	r3, s0
 800770e:	eeb0 7a67 	vmov.f32	s14, s15
 8007712:	2b00      	cmp	r3, #0
 8007714:	e7d9      	b.n	80076ca <scalbnf+0x4e>
 8007716:	3019      	adds	r0, #25
 8007718:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800771c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8007720:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8007744 <scalbnf+0xc8>
 8007724:	ee07 3a90 	vmov	s15, r3
 8007728:	e7d7      	b.n	80076da <scalbnf+0x5e>
 800772a:	bf00      	nop
 800772c:	ffff3cb0 	.word	0xffff3cb0
 8007730:	4c000000 	.word	0x4c000000
 8007734:	7149f2ca 	.word	0x7149f2ca
 8007738:	f149f2ca 	.word	0xf149f2ca
 800773c:	0da24260 	.word	0x0da24260
 8007740:	8da24260 	.word	0x8da24260
 8007744:	33000000 	.word	0x33000000

08007748 <with_errnof>:
 8007748:	b513      	push	{r0, r1, r4, lr}
 800774a:	4604      	mov	r4, r0
 800774c:	ed8d 0a01 	vstr	s0, [sp, #4]
 8007750:	f7fd fc4a 	bl	8004fe8 <__errno>
 8007754:	ed9d 0a01 	vldr	s0, [sp, #4]
 8007758:	6004      	str	r4, [r0, #0]
 800775a:	b002      	add	sp, #8
 800775c:	bd10      	pop	{r4, pc}

0800775e <xflowf>:
 800775e:	b130      	cbz	r0, 800776e <xflowf+0x10>
 8007760:	eef1 7a40 	vneg.f32	s15, s0
 8007764:	ee27 0a80 	vmul.f32	s0, s15, s0
 8007768:	2022      	movs	r0, #34	; 0x22
 800776a:	f7ff bfed 	b.w	8007748 <with_errnof>
 800776e:	eef0 7a40 	vmov.f32	s15, s0
 8007772:	e7f7      	b.n	8007764 <xflowf+0x6>

08007774 <__math_uflowf>:
 8007774:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800777c <__math_uflowf+0x8>
 8007778:	f7ff bff1 	b.w	800775e <xflowf>
 800777c:	10000000 	.word	0x10000000

08007780 <__math_oflowf>:
 8007780:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007788 <__math_oflowf+0x8>
 8007784:	f7ff bfeb 	b.w	800775e <xflowf>
 8007788:	70000000 	.word	0x70000000

0800778c <__ieee754_sqrtf>:
 800778c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8007790:	4770      	bx	lr
	...

08007794 <_init>:
 8007794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007796:	bf00      	nop
 8007798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800779a:	bc08      	pop	{r3}
 800779c:	469e      	mov	lr, r3
 800779e:	4770      	bx	lr

080077a0 <_fini>:
 80077a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077a2:	bf00      	nop
 80077a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077a6:	bc08      	pop	{r3}
 80077a8:	469e      	mov	lr, r3
 80077aa:	4770      	bx	lr
